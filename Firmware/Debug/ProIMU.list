
ProIMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006704  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080068c8  080068c8  000168c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006920  08006920  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  08006920  08006920  00016920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006928  08006928  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006928  08006928  00016928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08006930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b1c  20000190  08006ac0  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cac  08006ac0  00021cac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014718  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000320c  00000000  00000000  000348d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00037ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  00038680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002115e  00000000  00000000  000390d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011348  00000000  00000000  0005a22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b3963  00000000  00000000  0006b576  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0011eed9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ddc  00000000  00000000  0011ef2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000190 	.word	0x20000190
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080068b0 	.word	0x080068b0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000194 	.word	0x20000194
 8000200:	080068b0 	.word	0x080068b0

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);


int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  HAL_Init();
 8000500:	f000 f938 	bl	8000774 <HAL_Init>

  SystemClock_Config();
 8000504:	f000 f806 	bl	8000514 <SystemClock_Config>

  MX_GPIO_Init();
 8000508:	f000 f86e 	bl	80005e8 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800050c:	f005 fc40 	bl	8005d90 <MX_USB_DEVICE_Init>

  while (1)
 8000510:	e7fe      	b.n	8000510 <main+0x14>
	...

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 031c 	add.w	r3, r7, #28
 800051e:	2234      	movs	r2, #52	; 0x34
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f006 f9bc 	bl	80068a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000538:	2300      	movs	r3, #0
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000540:	4a27      	ldr	r2, [pc, #156]	; (80005e0 <SystemClock_Config+0xcc>)
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6413      	str	r3, [r2, #64]	; 0x40
 8000548:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <SystemClock_Config+0xcc>)
 800054a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800054c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2300      	movs	r3, #0
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <SystemClock_Config+0xd0>)
 800055e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <SystemClock_Config+0xd0>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000570:	2301      	movs	r3, #1
 8000572:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000578:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057a:	2302      	movs	r3, #2
 800057c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800057e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000582:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000584:	2308      	movs	r3, #8
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000588:	2360      	movs	r3, #96	; 0x60
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000590:	2304      	movs	r3, #4
 8000592:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000594:	2302      	movs	r3, #2
 8000596:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	4618      	mov	r0, r3
 800059e:	f002 f975 	bl	800288c <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005a8:	f000 f846 	bl	8000638 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005be:	2300      	movs	r3, #0
 80005c0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005c2:	f107 0308 	add.w	r3, r7, #8
 80005c6:	2103      	movs	r1, #3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 fdbf 	bl	800214c <HAL_RCC_ClockConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005d4:	f000 f830 	bl	8000638 <Error_Handler>
  }
}
 80005d8:	bf00      	nop
 80005da:	3750      	adds	r7, #80	; 0x50
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <MX_GPIO_Init+0x4c>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <MX_GPIO_Init+0x4c>)
 80005f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <MX_GPIO_Init+0x4c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <MX_GPIO_Init+0x4c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <MX_GPIO_Init+0x4c>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <MX_GPIO_Init+0x4c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800

08000638 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063c:	b672      	cpsid	i
}
 800063e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000640:	e7fe      	b.n	8000640 <Error_Handler+0x8>
	...

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <HAL_MspInit+0x4c>)
 8000650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000652:	4a0f      	ldr	r2, [pc, #60]	; (8000690 <HAL_MspInit+0x4c>)
 8000654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000658:	6453      	str	r3, [r2, #68]	; 0x44
 800065a:	4b0d      	ldr	r3, [pc, #52]	; (8000690 <HAL_MspInit+0x4c>)
 800065c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <HAL_MspInit+0x4c>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066e:	4a08      	ldr	r2, [pc, #32]	; (8000690 <HAL_MspInit+0x4c>)
 8000670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000674:	6413      	str	r3, [r2, #64]	; 0x40
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_MspInit+0x4c>)
 8000678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800

08000694 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000698:	e7fe      	b.n	8000698 <NMI_Handler+0x4>

0800069a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800069a:	b480      	push	{r7}
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800069e:	e7fe      	b.n	800069e <HardFault_Handler+0x4>

080006a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <MemManage_Handler+0x4>

080006a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b6:	bf00      	nop
 80006b8:	46bd      	mov	sp, r7
 80006ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006be:	4770      	bx	lr

080006c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr

080006ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ce:	b480      	push	{r7}
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e0:	f000 f89a 	bl	8000818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006ec:	4802      	ldr	r0, [pc, #8]	; (80006f8 <OTG_FS_IRQHandler+0x10>)
 80006ee:	f000 fcb4 	bl	800105a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200018a4 	.word	0x200018a4

080006fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <SystemInit+0x20>)
 8000702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000706:	4a05      	ldr	r2, [pc, #20]	; (800071c <SystemInit+0x20>)
 8000708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800070c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000720:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000758 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000724:	480d      	ldr	r0, [pc, #52]	; (800075c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000726:	490e      	ldr	r1, [pc, #56]	; (8000760 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000728:	4a0e      	ldr	r2, [pc, #56]	; (8000764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800072c:	e002      	b.n	8000734 <LoopCopyDataInit>

0800072e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000732:	3304      	adds	r3, #4

08000734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000738:	d3f9      	bcc.n	800072e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073a:	4a0b      	ldr	r2, [pc, #44]	; (8000768 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800073c:	4c0b      	ldr	r4, [pc, #44]	; (800076c <LoopFillZerobss+0x26>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000740:	e001      	b.n	8000746 <LoopFillZerobss>

08000742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000744:	3204      	adds	r2, #4

08000746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000748:	d3fb      	bcc.n	8000742 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800074a:	f7ff ffd7 	bl	80006fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800074e:	f006 f883 	bl	8006858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000752:	f7ff fed3 	bl	80004fc <main>
  bx  lr    
 8000756:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000758:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000760:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000764:	08006930 	.word	0x08006930
  ldr r2, =_sbss
 8000768:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 800076c:	20001cac 	.word	0x20001cac

08000770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC_IRQHandler>
	...

08000774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000778:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <HAL_Init+0x40>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <HAL_Init+0x40>)
 800077e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000784:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <HAL_Init+0x40>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a0a      	ldr	r2, [pc, #40]	; (80007b4 <HAL_Init+0x40>)
 800078a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800078e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000790:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <HAL_Init+0x40>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a07      	ldr	r2, [pc, #28]	; (80007b4 <HAL_Init+0x40>)
 8000796:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800079a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800079c:	2003      	movs	r0, #3
 800079e:	f000 f94f 	bl	8000a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007a2:	200f      	movs	r0, #15
 80007a4:	f000 f808 	bl	80007b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a8:	f7ff ff4c 	bl	8000644 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007ac:	2300      	movs	r3, #0
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023c00 	.word	0x40023c00

080007b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <HAL_InitTick+0x54>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <HAL_InitTick+0x58>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f967 	bl	8000aaa <HAL_SYSTICK_Config>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00e      	b.n	8000804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	d80a      	bhi.n	8000802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ec:	2200      	movs	r2, #0
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	f000 f92f 	bl	8000a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f8:	4a06      	ldr	r2, [pc, #24]	; (8000814 <HAL_InitTick+0x5c>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007fe:	2300      	movs	r3, #0
 8000800:	e000      	b.n	8000804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000000 	.word	0x20000000
 8000810:	20000008 	.word	0x20000008
 8000814:	20000004 	.word	0x20000004

08000818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800081c:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_IncTick+0x20>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_IncTick+0x24>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4413      	add	r3, r2
 8000828:	4a04      	ldr	r2, [pc, #16]	; (800083c <HAL_IncTick+0x24>)
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	20000008 	.word	0x20000008
 800083c:	200003d0 	.word	0x200003d0

08000840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  return uwTick;
 8000844:	4b03      	ldr	r3, [pc, #12]	; (8000854 <HAL_GetTick+0x14>)
 8000846:	681b      	ldr	r3, [r3, #0]
}
 8000848:	4618      	mov	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	200003d0 	.word	0x200003d0

08000858 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000860:	f7ff ffee 	bl	8000840 <HAL_GetTick>
 8000864:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000870:	d005      	beq.n	800087e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_Delay+0x44>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	461a      	mov	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	4413      	add	r3, r2
 800087c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800087e:	bf00      	nop
 8000880:	f7ff ffde 	bl	8000840 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	429a      	cmp	r2, r3
 800088e:	d8f7      	bhi.n	8000880 <HAL_Delay+0x28>
  {
  }
}
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	3710      	adds	r7, #16
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000008 	.word	0x20000008

080008a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b085      	sub	sp, #20
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008bc:	4013      	ands	r3, r2
 80008be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008d2:	4a04      	ldr	r2, [pc, #16]	; (80008e4 <__NVIC_SetPriorityGrouping+0x44>)
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	60d3      	str	r3, [r2, #12]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <__NVIC_GetPriorityGrouping+0x18>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	0a1b      	lsrs	r3, r3, #8
 80008f2:	f003 0307 	and.w	r3, r3, #7
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	2b00      	cmp	r3, #0
 8000914:	db0b      	blt.n	800092e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	f003 021f 	and.w	r2, r3, #31
 800091c:	4907      	ldr	r1, [pc, #28]	; (800093c <__NVIC_EnableIRQ+0x38>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	095b      	lsrs	r3, r3, #5
 8000924:	2001      	movs	r0, #1
 8000926:	fa00 f202 	lsl.w	r2, r0, r2
 800092a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000e100 	.word	0xe000e100

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db0a      	blt.n	800096a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	490c      	ldr	r1, [pc, #48]	; (800098c <__NVIC_SetPriority+0x4c>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	0112      	lsls	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	440b      	add	r3, r1
 8000964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000968:	e00a      	b.n	8000980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4908      	ldr	r1, [pc, #32]	; (8000990 <__NVIC_SetPriority+0x50>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	3b04      	subs	r3, #4
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	440b      	add	r3, r1
 800097e:	761a      	strb	r2, [r3, #24]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	; 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f1c3 0307 	rsb	r3, r3, #7
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	bf28      	it	cs
 80009b2:	2304      	movcs	r3, #4
 80009b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3304      	adds	r3, #4
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d902      	bls.n	80009c4 <NVIC_EncodePriority+0x30>
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3b03      	subs	r3, #3
 80009c2:	e000      	b.n	80009c6 <NVIC_EncodePriority+0x32>
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43da      	mvns	r2, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	401a      	ands	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43d9      	mvns	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	4313      	orrs	r3, r2
         );
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3724      	adds	r7, #36	; 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
	...

080009fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a0c:	d301      	bcc.n	8000a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00f      	b.n	8000a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a12:	4a0a      	ldr	r2, [pc, #40]	; (8000a3c <SysTick_Config+0x40>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3b01      	subs	r3, #1
 8000a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f7ff ff8e 	bl	8000940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <SysTick_Config+0x40>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a2a:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <SysTick_Config+0x40>)
 8000a2c:	2207      	movs	r2, #7
 8000a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a30:	2300      	movs	r3, #0
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	e000e010 	.word	0xe000e010

08000a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff ff29 	bl	80008a0 <__NVIC_SetPriorityGrouping>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b086      	sub	sp, #24
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a68:	f7ff ff3e 	bl	80008e8 <__NVIC_GetPriorityGrouping>
 8000a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	68b9      	ldr	r1, [r7, #8]
 8000a72:	6978      	ldr	r0, [r7, #20]
 8000a74:	f7ff ff8e 	bl	8000994 <NVIC_EncodePriority>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7e:	4611      	mov	r1, r2
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff ff5d 	bl	8000940 <__NVIC_SetPriority>
}
 8000a86:	bf00      	nop
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff ff31 	bl	8000904 <__NVIC_EnableIRQ>
}
 8000aa2:	bf00      	nop
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}

08000aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ab2:	6878      	ldr	r0, [r7, #4]
 8000ab4:	f7ff ffa2 	bl	80009fc <SysTick_Config>
 8000ab8:	4603      	mov	r3, r0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
	...

08000ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
 8000ade:	e14d      	b.n	8000d7c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	f040 813c 	bne.w	8000d76 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0303 	and.w	r3, r3, #3
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d005      	beq.n	8000b16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d130      	bne.n	8000b78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	005b      	lsls	r3, r3, #1
 8000b20:	2203      	movs	r2, #3
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	68da      	ldr	r2, [r3, #12]
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	43db      	mvns	r3, r3
 8000b56:	69ba      	ldr	r2, [r7, #24]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	091b      	lsrs	r3, r3, #4
 8000b62:	f003 0201 	and.w	r2, r3, #1
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	69ba      	ldr	r2, [r7, #24]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f003 0303 	and.w	r3, r3, #3
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d017      	beq.n	8000bb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	2203      	movs	r2, #3
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	43db      	mvns	r3, r3
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	69ba      	ldr	r2, [r7, #24]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	69ba      	ldr	r2, [r7, #24]
 8000bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f003 0303 	and.w	r3, r3, #3
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d123      	bne.n	8000c08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000bc0:	69fb      	ldr	r3, [r7, #28]
 8000bc2:	08da      	lsrs	r2, r3, #3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	3208      	adds	r2, #8
 8000bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	69ba      	ldr	r2, [r7, #24]
 8000be0:	4013      	ands	r3, r2
 8000be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	691a      	ldr	r2, [r3, #16]
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f003 0307 	and.w	r3, r3, #7
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	69ba      	ldr	r2, [r7, #24]
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	08da      	lsrs	r2, r3, #3
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3208      	adds	r2, #8
 8000c02:	69b9      	ldr	r1, [r7, #24]
 8000c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	2203      	movs	r2, #3
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0203 	and.w	r2, r3, #3
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	f000 8096 	beq.w	8000d76 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b51      	ldr	r3, [pc, #324]	; (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a50      	ldr	r2, [pc, #320]	; (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b4e      	ldr	r3, [pc, #312]	; (8000d94 <HAL_GPIO_Init+0x2d0>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000c66:	4a4c      	ldr	r2, [pc, #304]	; (8000d98 <HAL_GPIO_Init+0x2d4>)
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	089b      	lsrs	r3, r3, #2
 8000c6c:	3302      	adds	r3, #2
 8000c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f003 0303 	and.w	r3, r3, #3
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4013      	ands	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a43      	ldr	r2, [pc, #268]	; (8000d9c <HAL_GPIO_Init+0x2d8>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d00d      	beq.n	8000cae <HAL_GPIO_Init+0x1ea>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a42      	ldr	r2, [pc, #264]	; (8000da0 <HAL_GPIO_Init+0x2dc>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d007      	beq.n	8000caa <HAL_GPIO_Init+0x1e6>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a41      	ldr	r2, [pc, #260]	; (8000da4 <HAL_GPIO_Init+0x2e0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d101      	bne.n	8000ca6 <HAL_GPIO_Init+0x1e2>
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	e004      	b.n	8000cb0 <HAL_GPIO_Init+0x1ec>
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	e002      	b.n	8000cb0 <HAL_GPIO_Init+0x1ec>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <HAL_GPIO_Init+0x1ec>
 8000cae:	2300      	movs	r3, #0
 8000cb0:	69fa      	ldr	r2, [r7, #28]
 8000cb2:	f002 0203 	and.w	r2, r2, #3
 8000cb6:	0092      	lsls	r2, r2, #2
 8000cb8:	4093      	lsls	r3, r2
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000cc0:	4935      	ldr	r1, [pc, #212]	; (8000d98 <HAL_GPIO_Init+0x2d4>)
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	089b      	lsrs	r3, r3, #2
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cce:	4b36      	ldr	r3, [pc, #216]	; (8000da8 <HAL_GPIO_Init+0x2e4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000cea:	69ba      	ldr	r2, [r7, #24]
 8000cec:	693b      	ldr	r3, [r7, #16]
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000cf2:	4a2d      	ldr	r2, [pc, #180]	; (8000da8 <HAL_GPIO_Init+0x2e4>)
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000cf8:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <HAL_GPIO_Init+0x2e4>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000cfe:	693b      	ldr	r3, [r7, #16]
 8000d00:	43db      	mvns	r3, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4013      	ands	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d003      	beq.n	8000d1c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000d1c:	4a22      	ldr	r2, [pc, #136]	; (8000da8 <HAL_GPIO_Init+0x2e4>)
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <HAL_GPIO_Init+0x2e4>)
 8000d24:	689b      	ldr	r3, [r3, #8]
 8000d26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d003      	beq.n	8000d46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d46:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <HAL_GPIO_Init+0x2e4>)
 8000d48:	69bb      	ldr	r3, [r7, #24]
 8000d4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_GPIO_Init+0x2e4>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <HAL_GPIO_Init+0x2e4>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	61fb      	str	r3, [r7, #28]
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	2b0f      	cmp	r3, #15
 8000d80:	f67f aeae 	bls.w	8000ae0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	3724      	adds	r7, #36	; 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800
 8000d98:	40013800 	.word	0x40013800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40020400 	.word	0x40020400
 8000da4:	40020800 	.word	0x40020800
 8000da8:	40013c00 	.word	0x40013c00

08000dac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dae:	b08f      	sub	sp, #60	; 0x3c
 8000db0:	af0a      	add	r7, sp, #40	; 0x28
 8000db2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d101      	bne.n	8000dbe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e116      	b.n	8000fec <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d106      	bne.n	8000dde <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f005 f9cb 	bl	8006174 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2203      	movs	r2, #3
 8000de2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d102      	bne.n	8000df8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f002 f8de 	bl	8002fbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	603b      	str	r3, [r7, #0]
 8000e08:	687e      	ldr	r6, [r7, #4]
 8000e0a:	466d      	mov	r5, sp
 8000e0c:	f106 0410 	add.w	r4, r6, #16
 8000e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e20:	1d33      	adds	r3, r6, #4
 8000e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000e24:	6838      	ldr	r0, [r7, #0]
 8000e26:	f001 ffb5 	bl	8002d94 <USB_CoreInit>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d005      	beq.n	8000e3c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2202      	movs	r2, #2
 8000e34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	e0d7      	b.n	8000fec <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 f8cc 	bl	8002fe0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]
 8000e4c:	e04a      	b.n	8000ee4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000e4e:	7bfa      	ldrb	r2, [r7, #15]
 8000e50:	6879      	ldr	r1, [r7, #4]
 8000e52:	4613      	mov	r3, r2
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	1a9b      	subs	r3, r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	333d      	adds	r3, #61	; 0x3d
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000e62:	7bfa      	ldrb	r2, [r7, #15]
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	1a9b      	subs	r3, r3, r2
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	333c      	adds	r3, #60	; 0x3c
 8000e72:	7bfa      	ldrb	r2, [r7, #15]
 8000e74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000e76:	7bfa      	ldrb	r2, [r7, #15]
 8000e78:	7bfb      	ldrb	r3, [r7, #15]
 8000e7a:	b298      	uxth	r0, r3
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	4613      	mov	r3, r2
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	440b      	add	r3, r1
 8000e88:	3342      	adds	r3, #66	; 0x42
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000e8e:	7bfa      	ldrb	r2, [r7, #15]
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	333f      	adds	r3, #63	; 0x3f
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ea2:	7bfa      	ldrb	r2, [r7, #15]
 8000ea4:	6879      	ldr	r1, [r7, #4]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	00db      	lsls	r3, r3, #3
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	440b      	add	r3, r1
 8000eb0:	3344      	adds	r3, #68	; 0x44
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000eb6:	7bfa      	ldrb	r2, [r7, #15]
 8000eb8:	6879      	ldr	r1, [r7, #4]
 8000eba:	4613      	mov	r3, r2
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	1a9b      	subs	r3, r3, r2
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	440b      	add	r3, r1
 8000ec4:	3348      	adds	r3, #72	; 0x48
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	6879      	ldr	r1, [r7, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	1a9b      	subs	r3, r3, r2
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	3350      	adds	r3, #80	; 0x50
 8000eda:	2200      	movs	r2, #0
 8000edc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	73fb      	strb	r3, [r7, #15]
 8000ee4:	7bfa      	ldrb	r2, [r7, #15]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d3af      	bcc.n	8000e4e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e044      	b.n	8000f7e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ef4:	7bfa      	ldrb	r2, [r7, #15]
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	00db      	lsls	r3, r3, #3
 8000efc:	1a9b      	subs	r3, r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000f0a:	7bfa      	ldrb	r2, [r7, #15]
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	4613      	mov	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	1a9b      	subs	r3, r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	440b      	add	r3, r1
 8000f18:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8000f1c:	7bfa      	ldrb	r2, [r7, #15]
 8000f1e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000f20:	7bfa      	ldrb	r2, [r7, #15]
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	4613      	mov	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	1a9b      	subs	r3, r3, r2
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000f36:	7bfa      	ldrb	r2, [r7, #15]
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	1a9b      	subs	r3, r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	440b      	add	r3, r1
 8000f44:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000f4c:	7bfa      	ldrb	r2, [r7, #15]
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	1a9b      	subs	r3, r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	440b      	add	r3, r1
 8000f5a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000f62:	7bfa      	ldrb	r2, [r7, #15]
 8000f64:	6879      	ldr	r1, [r7, #4]
 8000f66:	4613      	mov	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	1a9b      	subs	r3, r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	440b      	add	r3, r1
 8000f70:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	73fb      	strb	r3, [r7, #15]
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d3b5      	bcc.n	8000ef4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	687e      	ldr	r6, [r7, #4]
 8000f90:	466d      	mov	r5, sp
 8000f92:	f106 0410 	add.w	r4, r6, #16
 8000f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fa2:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fa6:	1d33      	adds	r3, r6, #4
 8000fa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000faa:	6838      	ldr	r0, [r7, #0]
 8000fac:	f002 f864 	bl	8003078 <USB_DevInit>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d005      	beq.n	8000fc2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2202      	movs	r2, #2
 8000fba:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e014      	b.n	8000fec <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d102      	bne.n	8000fe0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f001 f892 	bl	8002104 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f003 f8d3 	bl	8004190 <USB_DevDisconnect>

  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000ff4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001008:	2b01      	cmp	r3, #1
 800100a:	d101      	bne.n	8001010 <HAL_PCD_Start+0x1c>
 800100c:	2302      	movs	r3, #2
 800100e:	e020      	b.n	8001052 <HAL_PCD_Start+0x5e>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2201      	movs	r2, #1
 8001014:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	2b01      	cmp	r3, #1
 800101e:	d109      	bne.n	8001034 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001024:	2b01      	cmp	r3, #1
 8001026:	d005      	beq.n	8001034 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f001 ffaf 	bl	8002f9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f003 f883 	bl	800414e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800105a:	b590      	push	{r4, r7, lr}
 800105c:	b08d      	sub	sp, #52	; 0x34
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f003 f941 	bl	80042f8 <USB_GetMode>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	f040 83ca 	bne.w	8001812 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4618      	mov	r0, r3
 8001084:	f003 f8a5 	bl	80041d2 <USB_ReadInterrupts>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	f000 83c0 	beq.w	8001810 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f003 f89c 	bl	80041d2 <USB_ReadInterrupts>
 800109a:	4603      	mov	r3, r0
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d107      	bne.n	80010b4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	695a      	ldr	r2, [r3, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f002 0202 	and.w	r2, r2, #2
 80010b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f003 f88a 	bl	80041d2 <USB_ReadInterrupts>
 80010be:	4603      	mov	r3, r0
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	2b10      	cmp	r3, #16
 80010c6:	d161      	bne.n	800118c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	699a      	ldr	r2, [r3, #24]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 0210 	bic.w	r2, r2, #16
 80010d6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80010d8:	6a3b      	ldr	r3, [r7, #32]
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	f003 020f 	and.w	r2, r3, #15
 80010e4:	4613      	mov	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	1a9b      	subs	r3, r3, r2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	3304      	adds	r3, #4
 80010f6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	0c5b      	lsrs	r3, r3, #17
 80010fc:	f003 030f 	and.w	r3, r3, #15
 8001100:	2b02      	cmp	r3, #2
 8001102:	d124      	bne.n	800114e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800110a:	4013      	ands	r3, r2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d035      	beq.n	800117c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	091b      	lsrs	r3, r3, #4
 8001118:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800111a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800111e:	b29b      	uxth	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	6a38      	ldr	r0, [r7, #32]
 8001124:	f002 fec1 	bl	8003eaa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	68da      	ldr	r2, [r3, #12]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001134:	441a      	add	r2, r3
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	699a      	ldr	r2, [r3, #24]
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	091b      	lsrs	r3, r3, #4
 8001142:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001146:	441a      	add	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	619a      	str	r2, [r3, #24]
 800114c:	e016      	b.n	800117c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	0c5b      	lsrs	r3, r3, #17
 8001152:	f003 030f 	and.w	r3, r3, #15
 8001156:	2b06      	cmp	r3, #6
 8001158:	d110      	bne.n	800117c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001160:	2208      	movs	r2, #8
 8001162:	4619      	mov	r1, r3
 8001164:	6a38      	ldr	r0, [r7, #32]
 8001166:	f002 fea0 	bl	8003eaa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	699a      	ldr	r2, [r3, #24]
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	091b      	lsrs	r3, r3, #4
 8001172:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001176:	441a      	add	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	699a      	ldr	r2, [r3, #24]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0210 	orr.w	r2, r2, #16
 800118a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f003 f81e 	bl	80041d2 <USB_ReadInterrupts>
 8001196:	4603      	mov	r3, r0
 8001198:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800119c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011a0:	d16e      	bne.n	8001280 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80011a2:	2300      	movs	r3, #0
 80011a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 f824 	bl	80041f8 <USB_ReadDevAllOutEpInterrupt>
 80011b0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80011b2:	e062      	b.n	800127a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80011b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d057      	beq.n	800126e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f003 f849 	bl	8004260 <USB_ReadDevOutEPInterrupt>
 80011ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00c      	beq.n	80011f4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	015a      	lsls	r2, r3, #5
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	4413      	add	r3, r2
 80011e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80011e6:	461a      	mov	r2, r3
 80011e8:	2301      	movs	r3, #1
 80011ea:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80011ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 fdde 	bl	8001db0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d00c      	beq.n	8001218 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	015a      	lsls	r2, r3, #5
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	4413      	add	r3, r2
 8001206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800120a:	461a      	mov	r2, r3
 800120c:	2308      	movs	r3, #8
 800120e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 fed8 	bl	8001fc8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	f003 0310 	and.w	r3, r3, #16
 800121e:	2b00      	cmp	r3, #0
 8001220:	d008      	beq.n	8001234 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001224:	015a      	lsls	r2, r3, #5
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	4413      	add	r3, r2
 800122a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800122e:	461a      	mov	r2, r3
 8001230:	2310      	movs	r3, #16
 8001232:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	f003 0320 	and.w	r3, r3, #32
 800123a:	2b00      	cmp	r3, #0
 800123c:	d008      	beq.n	8001250 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	015a      	lsls	r2, r3, #5
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	4413      	add	r3, r2
 8001246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800124a:	461a      	mov	r2, r3
 800124c:	2320      	movs	r3, #32
 800124e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d009      	beq.n	800126e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800125c:	015a      	lsls	r2, r3, #5
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	4413      	add	r3, r2
 8001262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001266:	461a      	mov	r2, r3
 8001268:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800126c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800126e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001270:	3301      	adds	r3, #1
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001276:	085b      	lsrs	r3, r3, #1
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800127a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127c:	2b00      	cmp	r3, #0
 800127e:	d199      	bne.n	80011b4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f002 ffa4 	bl	80041d2 <USB_ReadInterrupts>
 800128a:	4603      	mov	r3, r0
 800128c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001290:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001294:	f040 80c0 	bne.w	8001418 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4618      	mov	r0, r3
 800129e:	f002 ffc5 	bl	800422c <USB_ReadDevAllInEpInterrupt>
 80012a2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80012a8:	e0b2      	b.n	8001410 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80012aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80a7 	beq.w	8001404 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	4611      	mov	r1, r2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 ffeb 	bl	800429c <USB_ReadDevInEPInterrupt>
 80012c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d057      	beq.n	8001382 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80012d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d4:	f003 030f 	and.w	r3, r3, #15
 80012d8:	2201      	movs	r2, #1
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43db      	mvns	r3, r3
 80012ec:	69f9      	ldr	r1, [r7, #28]
 80012ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80012f2:	4013      	ands	r3, r2
 80012f4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	015a      	lsls	r2, r3, #5
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	4413      	add	r3, r2
 80012fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001302:	461a      	mov	r2, r3
 8001304:	2301      	movs	r3, #1
 8001306:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	691b      	ldr	r3, [r3, #16]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d132      	bne.n	8001376 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001310:	6879      	ldr	r1, [r7, #4]
 8001312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001314:	4613      	mov	r3, r2
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	1a9b      	subs	r3, r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	3348      	adds	r3, #72	; 0x48
 8001320:	6819      	ldr	r1, [r3, #0]
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001326:	4613      	mov	r3, r2
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	1a9b      	subs	r3, r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4403      	add	r3, r0
 8001330:	3344      	adds	r3, #68	; 0x44
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4419      	add	r1, r3
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800133a:	4613      	mov	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4403      	add	r3, r0
 8001344:	3348      	adds	r3, #72	; 0x48
 8001346:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134a:	2b00      	cmp	r3, #0
 800134c:	d113      	bne.n	8001376 <HAL_PCD_IRQHandler+0x31c>
 800134e:	6879      	ldr	r1, [r7, #4]
 8001350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001352:	4613      	mov	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	440b      	add	r3, r1
 800135c:	3350      	adds	r3, #80	; 0x50
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d108      	bne.n	8001376 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800136e:	461a      	mov	r2, r3
 8001370:	2101      	movs	r1, #1
 8001372:	f002 fff3 	bl	800435c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4619      	mov	r1, r3
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f004 ff90 	bl	80062a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	2b00      	cmp	r3, #0
 800138a:	d008      	beq.n	800139e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800138c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138e:	015a      	lsls	r2, r3, #5
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	4413      	add	r3, r2
 8001394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001398:	461a      	mov	r2, r3
 800139a:	2308      	movs	r3, #8
 800139c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	015a      	lsls	r2, r3, #5
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	4413      	add	r3, r2
 80013b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013b4:	461a      	mov	r2, r3
 80013b6:	2310      	movs	r3, #16
 80013b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d008      	beq.n	80013d6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	015a      	lsls	r2, r3, #5
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	4413      	add	r3, r2
 80013cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013d0:	461a      	mov	r2, r3
 80013d2:	2340      	movs	r3, #64	; 0x40
 80013d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	015a      	lsls	r2, r3, #5
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80013ec:	461a      	mov	r2, r3
 80013ee:	2302      	movs	r3, #2
 80013f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d003      	beq.n	8001404 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80013fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fc48 	bl	8001c94 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	3301      	adds	r3, #1
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140c:	085b      	lsrs	r3, r3, #1
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001412:	2b00      	cmp	r3, #0
 8001414:	f47f af49 	bne.w	80012aa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f002 fed8 	bl	80041d2 <USB_ReadInterrupts>
 8001422:	4603      	mov	r3, r0
 8001424:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001428:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800142c:	d122      	bne.n	8001474 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001448:	2b01      	cmp	r3, #1
 800144a:	d108      	bne.n	800145e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001454:	2100      	movs	r1, #0
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f005 f96c 	bl	8006734 <HAL_PCDEx_LPM_Callback>
 800145c:	e002      	b.n	8001464 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f004 ff8c 	bl	800637c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	695a      	ldr	r2, [r3, #20]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f002 feaa 	bl	80041d2 <USB_ReadInterrupts>
 800147e:	4603      	mov	r3, r0
 8001480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001484:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001488:	d112      	bne.n	80014b0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	2b01      	cmp	r3, #1
 8001498:	d102      	bne.n	80014a0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f004 ff48 	bl	8006330 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80014ae:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f002 fe8c 	bl	80041d2 <USB_ReadInterrupts>
 80014ba:	4603      	mov	r3, r0
 80014bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80014c4:	d121      	bne.n	800150a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80014d4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d111      	bne.n	8001504 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	f003 020f 	and.w	r2, r3, #15
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80014fa:	2101      	movs	r1, #1
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f005 f919 	bl	8006734 <HAL_PCDEx_LPM_Callback>
 8001502:	e002      	b.n	800150a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f004 ff13 	bl	8006330 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f002 fe5f 	bl	80041d2 <USB_ReadInterrupts>
 8001514:	4603      	mov	r3, r0
 8001516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800151a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800151e:	f040 80c7 	bne.w	80016b0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2110      	movs	r1, #16
 800153c:	4618      	mov	r0, r3
 800153e:	f001 fef9 	bl	8003334 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001546:	e056      	b.n	80015f6 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154a:	015a      	lsls	r2, r3, #5
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	4413      	add	r3, r2
 8001550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001554:	461a      	mov	r2, r3
 8001556:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800155a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	015a      	lsls	r2, r3, #5
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	4413      	add	r3, r2
 8001564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800156c:	0151      	lsls	r1, r2, #5
 800156e:	69fa      	ldr	r2, [r7, #28]
 8001570:	440a      	add	r2, r1
 8001572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001576:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800157a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157e:	015a      	lsls	r2, r3, #5
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	4413      	add	r3, r2
 8001584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800158c:	0151      	lsls	r1, r2, #5
 800158e:	69fa      	ldr	r2, [r7, #28]
 8001590:	440a      	add	r2, r1
 8001592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001596:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800159a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800159c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159e:	015a      	lsls	r2, r3, #5
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	4413      	add	r3, r2
 80015a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015a8:	461a      	mov	r2, r3
 80015aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80015ae:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80015b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b2:	015a      	lsls	r2, r3, #5
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015c0:	0151      	lsls	r1, r2, #5
 80015c2:	69fa      	ldr	r2, [r7, #28]
 80015c4:	440a      	add	r2, r1
 80015c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80015ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80015d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d2:	015a      	lsls	r2, r3, #5
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	4413      	add	r3, r2
 80015d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015e0:	0151      	lsls	r1, r2, #5
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	440a      	add	r2, r1
 80015e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80015ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80015ee:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f2:	3301      	adds	r3, #1
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d3a3      	bcc.n	8001548 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	69fa      	ldr	r2, [r7, #28]
 800160a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800160e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001612:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001618:	2b00      	cmp	r3, #0
 800161a:	d016      	beq.n	800164a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800161c:	69fb      	ldr	r3, [r7, #28]
 800161e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001622:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001626:	69fa      	ldr	r2, [r7, #28]
 8001628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800162c:	f043 030b 	orr.w	r3, r3, #11
 8001630:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800163a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001642:	f043 030b 	orr.w	r3, r3, #11
 8001646:	6453      	str	r3, [r2, #68]	; 0x44
 8001648:	e015      	b.n	8001676 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001658:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800165c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001660:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	69fa      	ldr	r2, [r7, #28]
 800166c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001670:	f043 030b 	orr.w	r3, r3, #11
 8001674:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001684:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001688:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6818      	ldr	r0, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800169a:	461a      	mov	r2, r3
 800169c:	f002 fe5e 	bl	800435c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f002 fd8c 	bl	80041d2 <USB_ReadInterrupts>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016c4:	d124      	bne.n	8001710 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f002 fe22 	bl	8004314 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 fe8a 	bl	80033ee <USB_GetDevSpeed>
 80016da:	4603      	mov	r3, r0
 80016dc:	461a      	mov	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681c      	ldr	r4, [r3, #0]
 80016e6:	f000 fef7 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 80016ea:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	461a      	mov	r2, r3
 80016f4:	4620      	mov	r0, r4
 80016f6:	f001 fbaf 	bl	8002e58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f004 fdf9 	bl	80062f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800170e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f002 fd5c 	bl	80041d2 <USB_ReadInterrupts>
 800171a:	4603      	mov	r3, r0
 800171c:	f003 0308 	and.w	r3, r3, #8
 8001720:	2b08      	cmp	r3, #8
 8001722:	d10a      	bne.n	800173a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f004 fdd6 	bl	80062d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f002 0208 	and.w	r2, r2, #8
 8001738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f002 fd47 	bl	80041d2 <USB_ReadInterrupts>
 8001744:	4603      	mov	r3, r0
 8001746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800174e:	d10f      	bne.n	8001770 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	b2db      	uxtb	r3, r3
 8001758:	4619      	mov	r1, r3
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f004 fe2e 	bl	80063bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	695a      	ldr	r2, [r3, #20]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800176e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f002 fd2c 	bl	80041d2 <USB_ReadInterrupts>
 800177a:	4603      	mov	r3, r0
 800177c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001780:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001784:	d10f      	bne.n	80017a6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	b2db      	uxtb	r3, r3
 800178e:	4619      	mov	r1, r3
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f004 fe01 	bl	8006398 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80017a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f002 fd11 	bl	80041d2 <USB_ReadInterrupts>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80017b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ba:	d10a      	bne.n	80017d2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f004 fe0f 	bl	80063e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	695a      	ldr	r2, [r3, #20]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80017d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 fcfb 	bl	80041d2 <USB_ReadInterrupts>
 80017dc:	4603      	mov	r3, r0
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d115      	bne.n	8001812 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f004 fdff 	bl	80063fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	430a      	orrs	r2, r1
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	e000      	b.n	8001812 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8001810:	bf00      	nop
    }
  }
}
 8001812:	3734      	adds	r7, #52	; 0x34
 8001814:	46bd      	mov	sp, r7
 8001816:	bd90      	pop	{r4, r7, pc}

08001818 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	460b      	mov	r3, r1
 8001822:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800182a:	2b01      	cmp	r3, #1
 800182c:	d101      	bne.n	8001832 <HAL_PCD_SetAddress+0x1a>
 800182e:	2302      	movs	r3, #2
 8001830:	e013      	b.n	800185a <HAL_PCD_SetAddress+0x42>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	78fa      	ldrb	r2, [r7, #3]
 8001848:	4611      	mov	r1, r2
 800184a:	4618      	mov	r0, r3
 800184c:	f002 fc59 	bl	8004102 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	4608      	mov	r0, r1
 800186c:	4611      	mov	r1, r2
 800186e:	461a      	mov	r2, r3
 8001870:	4603      	mov	r3, r0
 8001872:	70fb      	strb	r3, [r7, #3]
 8001874:	460b      	mov	r3, r1
 8001876:	803b      	strh	r3, [r7, #0]
 8001878:	4613      	mov	r3, r2
 800187a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001880:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001884:	2b00      	cmp	r3, #0
 8001886:	da0f      	bge.n	80018a8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001888:	78fb      	ldrb	r3, [r7, #3]
 800188a:	f003 020f 	and.w	r2, r3, #15
 800188e:	4613      	mov	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	1a9b      	subs	r3, r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	3338      	adds	r3, #56	; 0x38
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	4413      	add	r3, r2
 800189c:	3304      	adds	r3, #4
 800189e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2201      	movs	r2, #1
 80018a4:	705a      	strb	r2, [r3, #1]
 80018a6:	e00f      	b.n	80018c8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018a8:	78fb      	ldrb	r3, [r7, #3]
 80018aa:	f003 020f 	and.w	r2, r3, #15
 80018ae:	4613      	mov	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	1a9b      	subs	r3, r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4413      	add	r3, r2
 80018be:	3304      	adds	r3, #4
 80018c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018d4:	883a      	ldrh	r2, [r7, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	78ba      	ldrb	r2, [r7, #2]
 80018de:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	785b      	ldrb	r3, [r3, #1]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80018f2:	78bb      	ldrb	r3, [r7, #2]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d102      	bne.n	80018fe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001904:	2b01      	cmp	r3, #1
 8001906:	d101      	bne.n	800190c <HAL_PCD_EP_Open+0xaa>
 8001908:	2302      	movs	r3, #2
 800190a:	e00e      	b.n	800192a <HAL_PCD_EP_Open+0xc8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68f9      	ldr	r1, [r7, #12]
 800191a:	4618      	mov	r0, r3
 800191c:	f001 fd8c 	bl	8003438 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001928:	7afb      	ldrb	r3, [r7, #11]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
 800193a:	460b      	mov	r3, r1
 800193c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800193e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001942:	2b00      	cmp	r3, #0
 8001944:	da0f      	bge.n	8001966 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	f003 020f 	and.w	r2, r3, #15
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	1a9b      	subs	r3, r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	3338      	adds	r3, #56	; 0x38
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	3304      	adds	r3, #4
 800195c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2201      	movs	r2, #1
 8001962:	705a      	strb	r2, [r3, #1]
 8001964:	e00f      	b.n	8001986 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	f003 020f 	and.w	r2, r3, #15
 800196c:	4613      	mov	r3, r2
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	1a9b      	subs	r3, r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	4413      	add	r3, r2
 800197c:	3304      	adds	r3, #4
 800197e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2200      	movs	r2, #0
 8001984:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	f003 030f 	and.w	r3, r3, #15
 800198c:	b2da      	uxtb	r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001998:	2b01      	cmp	r3, #1
 800199a:	d101      	bne.n	80019a0 <HAL_PCD_EP_Close+0x6e>
 800199c:	2302      	movs	r3, #2
 800199e:	e00e      	b.n	80019be <HAL_PCD_EP_Close+0x8c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68f9      	ldr	r1, [r7, #12]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f001 fdca 	bl	8003548 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	460b      	mov	r3, r1
 80019d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019d6:	7afb      	ldrb	r3, [r7, #11]
 80019d8:	f003 020f 	and.w	r2, r3, #15
 80019dc:	4613      	mov	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	3304      	adds	r3, #4
 80019ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2200      	movs	r2, #0
 8001a00:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	2200      	movs	r2, #0
 8001a06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a08:	7afb      	ldrb	r3, [r7, #11]
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d102      	bne.n	8001a22 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a22:	7afb      	ldrb	r3, [r7, #11]
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d109      	bne.n	8001a40 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	461a      	mov	r2, r3
 8001a38:	6979      	ldr	r1, [r7, #20]
 8001a3a:	f002 f8a5 	bl	8003b88 <USB_EP0StartXfer>
 8001a3e:	e008      	b.n	8001a52 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	6979      	ldr	r1, [r7, #20]
 8001a4e:	f001 fe57 	bl	8003700 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	460b      	mov	r3, r1
 8001a66:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	f003 020f 	and.w	r2, r3, #15
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	4613      	mov	r3, r2
 8001a72:	00db      	lsls	r3, r3, #3
 8001a74:	1a9b      	subs	r3, r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	440b      	add	r3, r1
 8001a7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
 8001a9e:	f003 020f 	and.w	r2, r3, #15
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	1a9b      	subs	r3, r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	3338      	adds	r3, #56	; 0x38
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001acc:	7afb      	ldrb	r3, [r7, #11]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d102      	bne.n	8001ae6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ae6:	7afb      	ldrb	r3, [r7, #11]
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d109      	bne.n	8001b04 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	6818      	ldr	r0, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	6979      	ldr	r1, [r7, #20]
 8001afe:	f002 f843 	bl	8003b88 <USB_EP0StartXfer>
 8001b02:	e008      	b.n	8001b16 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	461a      	mov	r2, r3
 8001b10:	6979      	ldr	r1, [r7, #20]
 8001b12:	f001 fdf5 	bl	8003700 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b16:	2300      	movs	r3, #0
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	f003 020f 	and.w	r2, r3, #15
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d901      	bls.n	8001b3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e050      	b.n	8001be0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	da0f      	bge.n	8001b66 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	f003 020f 	and.w	r2, r3, #15
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	1a9b      	subs	r3, r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	3338      	adds	r3, #56	; 0x38
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	4413      	add	r3, r2
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2201      	movs	r2, #1
 8001b62:	705a      	strb	r2, [r3, #1]
 8001b64:	e00d      	b.n	8001b82 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b66:	78fa      	ldrb	r2, [r7, #3]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	00db      	lsls	r3, r3, #3
 8001b6c:	1a9b      	subs	r3, r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	4413      	add	r3, r2
 8001b78:	3304      	adds	r3, #4
 8001b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2201      	movs	r2, #1
 8001b86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_PCD_EP_SetStall+0x82>
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	e01e      	b.n	8001be0 <HAL_PCD_EP_SetStall+0xc0>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68f9      	ldr	r1, [r7, #12]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f002 f9d2 	bl	8003f5a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10a      	bne.n	8001bd6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	b2d9      	uxtb	r1, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	f002 fbc3 	bl	800435c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bf4:	78fb      	ldrb	r3, [r7, #3]
 8001bf6:	f003 020f 	and.w	r2, r3, #15
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d901      	bls.n	8001c06 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e042      	b.n	8001c8c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	da0f      	bge.n	8001c2e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 020f 	and.w	r2, r3, #15
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	1a9b      	subs	r3, r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	3338      	adds	r3, #56	; 0x38
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	3304      	adds	r3, #4
 8001c24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	705a      	strb	r2, [r3, #1]
 8001c2c:	e00f      	b.n	8001c4e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	f003 020f 	and.w	r2, r3, #15
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	4413      	add	r3, r2
 8001c44:	3304      	adds	r3, #4
 8001c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_PCD_EP_ClrStall+0x86>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e00e      	b.n	8001c8c <HAL_PCD_EP_ClrStall+0xa4>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68f9      	ldr	r1, [r7, #12]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f002 f9da 	bl	8004036 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08a      	sub	sp, #40	; 0x28
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	4613      	mov	r3, r2
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	1a9b      	subs	r3, r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	3338      	adds	r3, #56	; 0x38
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	699a      	ldr	r2, [r3, #24]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d901      	bls.n	8001ccc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e06c      	b.n	8001da6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	69fa      	ldr	r2, [r7, #28]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d902      	bls.n	8001ce8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	3303      	adds	r3, #3
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001cf0:	e02b      	b.n	8001d4a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	695a      	ldr	r2, [r3, #20]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d902      	bls.n	8001d0e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3303      	adds	r3, #3
 8001d12:	089b      	lsrs	r3, r3, #2
 8001d14:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	68d9      	ldr	r1, [r3, #12]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	6978      	ldr	r0, [r7, #20]
 8001d2e:	f002 f87e 	bl	8003e2e <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	68da      	ldr	r2, [r3, #12]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	441a      	add	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	699a      	ldr	r2, [r3, #24]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	441a      	add	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d809      	bhi.n	8001d74 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	699a      	ldr	r2, [r3, #24]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d203      	bcs.n	8001d74 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	695b      	ldr	r3, [r3, #20]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1be      	bne.n	8001cf2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d811      	bhi.n	8001da4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	2201      	movs	r2, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	6939      	ldr	r1, [r7, #16]
 8001d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001da0:	4013      	ands	r3, r2
 8001da2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	333c      	adds	r3, #60	; 0x3c
 8001dc8:	3304      	adds	r3, #4
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	015a      	lsls	r2, r3, #5
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	f040 80a0 	bne.w	8001f28 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d015      	beq.n	8001e1e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4a72      	ldr	r2, [pc, #456]	; (8001fc0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	f240 80dd 	bls.w	8001fb6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80d7 	beq.w	8001fb6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	015a      	lsls	r2, r3, #5
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4413      	add	r3, r2
 8001e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e14:	461a      	mov	r2, r3
 8001e16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e1a:	6093      	str	r3, [r2, #8]
 8001e1c:	e0cb      	b.n	8001fb6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d009      	beq.n	8001e3c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	015a      	lsls	r2, r3, #5
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4413      	add	r3, r2
 8001e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e34:	461a      	mov	r2, r3
 8001e36:	2320      	movs	r3, #32
 8001e38:	6093      	str	r3, [r2, #8]
 8001e3a:	e0bc      	b.n	8001fb6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 80b7 	bne.w	8001fb6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4a5d      	ldr	r2, [pc, #372]	; (8001fc0 <PCD_EP_OutXfrComplete_int+0x210>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d90f      	bls.n	8001e70 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	015a      	lsls	r2, r3, #5
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	4413      	add	r3, r2
 8001e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e66:	461a      	mov	r2, r3
 8001e68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e6c:	6093      	str	r3, [r2, #8]
 8001e6e:	e0a2      	b.n	8001fb6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001e82:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	0159      	lsls	r1, r3, #5
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001e96:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	1a9b      	subs	r3, r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4403      	add	r3, r0
 8001ea6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001eaa:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ebe:	6819      	ldr	r1, [r3, #0]
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	1a9b      	subs	r3, r3, r2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4403      	add	r3, r0
 8001ece:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4419      	add	r1, r3
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	4613      	mov	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	1a9b      	subs	r3, r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4403      	add	r3, r0
 8001ee4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ee8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d114      	bne.n	8001f1a <PCD_EP_OutXfrComplete_int+0x16a>
 8001ef0:	6879      	ldr	r1, [r7, #4]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	1a9b      	subs	r3, r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	440b      	add	r3, r1
 8001efe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d108      	bne.n	8001f1a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6818      	ldr	r0, [r3, #0]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f12:	461a      	mov	r2, r3
 8001f14:	2101      	movs	r1, #1
 8001f16:	f002 fa21 	bl	800435c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f004 f9a3 	bl	800626c <HAL_PCD_DataOutStageCallback>
 8001f26:	e046      	b.n	8001fb6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4a26      	ldr	r2, [pc, #152]	; (8001fc4 <PCD_EP_OutXfrComplete_int+0x214>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d124      	bne.n	8001f7a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00a      	beq.n	8001f50 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	015a      	lsls	r2, r3, #5
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4413      	add	r3, r2
 8001f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f46:	461a      	mov	r2, r3
 8001f48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f4c:	6093      	str	r3, [r2, #8]
 8001f4e:	e032      	b.n	8001fb6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0320 	and.w	r3, r3, #32
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d008      	beq.n	8001f6c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	015a      	lsls	r2, r3, #5
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	4413      	add	r3, r2
 8001f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f66:	461a      	mov	r2, r3
 8001f68:	2320      	movs	r3, #32
 8001f6a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	4619      	mov	r1, r3
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f004 f97a 	bl	800626c <HAL_PCD_DataOutStageCallback>
 8001f78:	e01d      	b.n	8001fb6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d114      	bne.n	8001faa <PCD_EP_OutXfrComplete_int+0x1fa>
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d108      	bne.n	8001faa <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	f002 f9d9 	bl	800435c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	4619      	mov	r1, r3
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f004 f95b 	bl	800626c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3718      	adds	r7, #24
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	4f54300a 	.word	0x4f54300a
 8001fc4:	4f54310a 	.word	0x4f54310a

08001fc8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	333c      	adds	r3, #60	; 0x3c
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4a15      	ldr	r2, [pc, #84]	; (8002050 <PCD_EP_OutSetupPacket_int+0x88>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d90e      	bls.n	800201c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002004:	2b00      	cmp	r3, #0
 8002006:	d009      	beq.n	800201c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002014:	461a      	mov	r2, r3
 8002016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800201a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f004 f913 	bl	8006248 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <PCD_EP_OutSetupPacket_int+0x88>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d90c      	bls.n	8002044 <PCD_EP_OutSetupPacket_int+0x7c>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d108      	bne.n	8002044 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6818      	ldr	r0, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800203c:	461a      	mov	r2, r3
 800203e:	2101      	movs	r1, #1
 8002040:	f002 f98c 	bl	800435c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	4f54300a 	.word	0x4f54300a

08002054 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	70fb      	strb	r3, [r7, #3]
 8002060:	4613      	mov	r3, r2
 8002062:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800206c:	78fb      	ldrb	r3, [r7, #3]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d107      	bne.n	8002082 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002072:	883b      	ldrh	r3, [r7, #0]
 8002074:	0419      	lsls	r1, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	430a      	orrs	r2, r1
 800207e:	629a      	str	r2, [r3, #40]	; 0x28
 8002080:	e028      	b.n	80020d4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	4413      	add	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002090:	2300      	movs	r3, #0
 8002092:	73fb      	strb	r3, [r7, #15]
 8002094:	e00d      	b.n	80020b2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	3340      	adds	r3, #64	; 0x40
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	0c1b      	lsrs	r3, r3, #16
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	4413      	add	r3, r2
 80020aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	3301      	adds	r3, #1
 80020b0:	73fb      	strb	r3, [r7, #15]
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	78fb      	ldrb	r3, [r7, #3]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d3ec      	bcc.n	8002096 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80020bc:	883b      	ldrh	r3, [r7, #0]
 80020be:	0418      	lsls	r0, r3, #16
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6819      	ldr	r1, [r3, #0]
 80020c4:	78fb      	ldrb	r3, [r7, #3]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	4302      	orrs	r2, r0
 80020cc:	3340      	adds	r3, #64	; 0x40
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3714      	adds	r7, #20
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002136:	f043 0303 	orr.w	r3, r3, #3
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0cc      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002160:	4b68      	ldr	r3, [pc, #416]	; (8002304 <HAL_RCC_ClockConfig+0x1b8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d90c      	bls.n	8002188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b65      	ldr	r3, [pc, #404]	; (8002304 <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b63      	ldr	r3, [pc, #396]	; (8002304 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0b8      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d020      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a0:	4b59      	ldr	r3, [pc, #356]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	4a58      	ldr	r2, [pc, #352]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80021a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b8:	4b53      	ldr	r3, [pc, #332]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4a52      	ldr	r2, [pc, #328]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021c4:	4b50      	ldr	r3, [pc, #320]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	494d      	ldr	r1, [pc, #308]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d044      	beq.n	800226c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d107      	bne.n	80021fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ea:	4b47      	ldr	r3, [pc, #284]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d119      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e07f      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d003      	beq.n	800220a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002206:	2b03      	cmp	r3, #3
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220a:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e06f      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221a:	4b3b      	ldr	r3, [pc, #236]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e067      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222a:	4b37      	ldr	r3, [pc, #220]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f023 0203 	bic.w	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4934      	ldr	r1, [pc, #208]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	4313      	orrs	r3, r2
 800223a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800223c:	f7fe fb00 	bl	8000840 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	e00a      	b.n	800225a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002244:	f7fe fafc 	bl	8000840 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e04f      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 020c 	and.w	r2, r3, #12
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	429a      	cmp	r2, r3
 800226a:	d1eb      	bne.n	8002244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800226c:	4b25      	ldr	r3, [pc, #148]	; (8002304 <HAL_RCC_ClockConfig+0x1b8>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d20c      	bcs.n	8002294 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b22      	ldr	r3, [pc, #136]	; (8002304 <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e032      	b.n	80022fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	2b00      	cmp	r3, #0
 800229e:	d008      	beq.n	80022b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a0:	4b19      	ldr	r3, [pc, #100]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4916      	ldr	r1, [pc, #88]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0308 	and.w	r3, r3, #8
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d009      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	490e      	ldr	r1, [pc, #56]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022d2:	f000 f821 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 80022d6:	4602      	mov	r2, r0
 80022d8:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	490a      	ldr	r1, [pc, #40]	; (800230c <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	5ccb      	ldrb	r3, [r1, r3]
 80022e6:	fa22 f303 	lsr.w	r3, r2, r3
 80022ea:	4a09      	ldr	r2, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022ee:	4b09      	ldr	r3, [pc, #36]	; (8002314 <HAL_RCC_ClockConfig+0x1c8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe fa60 	bl	80007b8 <HAL_InitTick>

  return HAL_OK;
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023c00 	.word	0x40023c00
 8002308:	40023800 	.word	0x40023800
 800230c:	08006910 	.word	0x08006910
 8002310:	20000000 	.word	0x20000000
 8002314:	20000004 	.word	0x20000004

08002318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002318:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	607b      	str	r3, [r7, #4]
 8002324:	2300      	movs	r3, #0
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	2300      	movs	r3, #0
 800232a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002330:	4b67      	ldr	r3, [pc, #412]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b08      	cmp	r3, #8
 800233a:	d00d      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x40>
 800233c:	2b08      	cmp	r3, #8
 800233e:	f200 80bd 	bhi.w	80024bc <HAL_RCC_GetSysClockFreq+0x1a4>
 8002342:	2b00      	cmp	r3, #0
 8002344:	d002      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x34>
 8002346:	2b04      	cmp	r3, #4
 8002348:	d003      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x3a>
 800234a:	e0b7      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800234c:	4b61      	ldr	r3, [pc, #388]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800234e:	60bb      	str	r3, [r7, #8]
       break;
 8002350:	e0b7      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002352:	4b60      	ldr	r3, [pc, #384]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002354:	60bb      	str	r3, [r7, #8]
      break;
 8002356:	e0b4      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002358:	4b5d      	ldr	r3, [pc, #372]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002360:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002362:	4b5b      	ldr	r3, [pc, #364]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d04d      	beq.n	800240a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236e:	4b58      	ldr	r3, [pc, #352]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	099b      	lsrs	r3, r3, #6
 8002374:	461a      	mov	r2, r3
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800237e:	f04f 0100 	mov.w	r1, #0
 8002382:	ea02 0800 	and.w	r8, r2, r0
 8002386:	ea03 0901 	and.w	r9, r3, r1
 800238a:	4640      	mov	r0, r8
 800238c:	4649      	mov	r1, r9
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	014b      	lsls	r3, r1, #5
 8002398:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800239c:	0142      	lsls	r2, r0, #5
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	ebb0 0008 	subs.w	r0, r0, r8
 80023a6:	eb61 0109 	sbc.w	r1, r1, r9
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	f04f 0300 	mov.w	r3, #0
 80023b2:	018b      	lsls	r3, r1, #6
 80023b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023b8:	0182      	lsls	r2, r0, #6
 80023ba:	1a12      	subs	r2, r2, r0
 80023bc:	eb63 0301 	sbc.w	r3, r3, r1
 80023c0:	f04f 0000 	mov.w	r0, #0
 80023c4:	f04f 0100 	mov.w	r1, #0
 80023c8:	00d9      	lsls	r1, r3, #3
 80023ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80023ce:	00d0      	lsls	r0, r2, #3
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	eb12 0208 	adds.w	r2, r2, r8
 80023d8:	eb43 0309 	adc.w	r3, r3, r9
 80023dc:	f04f 0000 	mov.w	r0, #0
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	0299      	lsls	r1, r3, #10
 80023e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80023ea:	0290      	lsls	r0, r2, #10
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	4610      	mov	r0, r2
 80023f2:	4619      	mov	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	461a      	mov	r2, r3
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	f7fd ff02 	bl	8000204 <__aeabi_uldivmod>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4613      	mov	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	e04a      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240a:	4b31      	ldr	r3, [pc, #196]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	099b      	lsrs	r3, r3, #6
 8002410:	461a      	mov	r2, r3
 8002412:	f04f 0300 	mov.w	r3, #0
 8002416:	f240 10ff 	movw	r0, #511	; 0x1ff
 800241a:	f04f 0100 	mov.w	r1, #0
 800241e:	ea02 0400 	and.w	r4, r2, r0
 8002422:	ea03 0501 	and.w	r5, r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	f04f 0300 	mov.w	r3, #0
 8002432:	014b      	lsls	r3, r1, #5
 8002434:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002438:	0142      	lsls	r2, r0, #5
 800243a:	4610      	mov	r0, r2
 800243c:	4619      	mov	r1, r3
 800243e:	1b00      	subs	r0, r0, r4
 8002440:	eb61 0105 	sbc.w	r1, r1, r5
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f04f 0300 	mov.w	r3, #0
 800244c:	018b      	lsls	r3, r1, #6
 800244e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002452:	0182      	lsls	r2, r0, #6
 8002454:	1a12      	subs	r2, r2, r0
 8002456:	eb63 0301 	sbc.w	r3, r3, r1
 800245a:	f04f 0000 	mov.w	r0, #0
 800245e:	f04f 0100 	mov.w	r1, #0
 8002462:	00d9      	lsls	r1, r3, #3
 8002464:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002468:	00d0      	lsls	r0, r2, #3
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	1912      	adds	r2, r2, r4
 8002470:	eb45 0303 	adc.w	r3, r5, r3
 8002474:	f04f 0000 	mov.w	r0, #0
 8002478:	f04f 0100 	mov.w	r1, #0
 800247c:	0299      	lsls	r1, r3, #10
 800247e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002482:	0290      	lsls	r0, r2, #10
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	461a      	mov	r2, r3
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	f7fd feb6 	bl	8000204 <__aeabi_uldivmod>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4613      	mov	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	3301      	adds	r3, #1
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	60bb      	str	r3, [r7, #8]
      break;
 80024ba:	e002      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80024be:	60bb      	str	r3, [r7, #8]
      break;
 80024c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024c2:	68bb      	ldr	r3, [r7, #8]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3710      	adds	r7, #16
 80024c8:	46bd      	mov	sp, r7
 80024ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800
 80024d4:	00f42400 	.word	0x00f42400

080024d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_RCC_GetHCLKFreq+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000000 	.word	0x20000000

080024f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b086      	sub	sp, #24
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0301 	and.w	r3, r3, #1
 800250c:	2b00      	cmp	r3, #0
 800250e:	d010      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002510:	4b87      	ldr	r3, [pc, #540]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002516:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	4984      	ldr	r1, [pc, #528]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 800252e:	2301      	movs	r3, #1
 8002530:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d010      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800253e:	4b7c      	ldr	r3, [pc, #496]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002540:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002544:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	4978      	ldr	r1, [pc, #480]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 800255c:	2301      	movs	r3, #1
 800255e:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 8083 	beq.w	8002674 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b6f      	ldr	r3, [pc, #444]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	4a6e      	ldr	r2, [pc, #440]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257c:	6413      	str	r3, [r2, #64]	; 0x40
 800257e:	4b6c      	ldr	r3, [pc, #432]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800258a:	4b6a      	ldr	r3, [pc, #424]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a69      	ldr	r2, [pc, #420]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002596:	f7fe f953 	bl	8000840 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800259e:	f7fe f94f 	bl	8000840 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e162      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80025b0:	4b60      	ldr	r3, [pc, #384]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025bc:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c4:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d02f      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d028      	beq.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025da:	4b55      	ldr	r3, [pc, #340]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e2:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025e4:	4b54      	ldr	r3, [pc, #336]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025ea:	4b53      	ldr	r3, [pc, #332]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025f0:	4a4f      	ldr	r2, [pc, #316]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025f6:	4b4e      	ldr	r3, [pc, #312]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d114      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002602:	f7fe f91d 	bl	8000840 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002608:	e00a      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f7fe f919 	bl	8000840 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	f241 3288 	movw	r2, #5000	; 0x1388
 8002618:	4293      	cmp	r3, r2
 800261a:	d901      	bls.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e12a      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002620:	4b43      	ldr	r3, [pc, #268]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0ee      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002638:	d10d      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800263a:	4b3d      	ldr	r3, [pc, #244]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800264a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800264e:	4938      	ldr	r1, [pc, #224]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002650:	4313      	orrs	r3, r2
 8002652:	608b      	str	r3, [r1, #8]
 8002654:	e005      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002656:	4b36      	ldr	r3, [pc, #216]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	4a35      	ldr	r2, [pc, #212]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800265c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002660:	6093      	str	r3, [r2, #8]
 8002662:	4b33      	ldr	r3, [pc, #204]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002664:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800266e:	4930      	ldr	r1, [pc, #192]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002670:	4313      	orrs	r3, r2
 8002672:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d004      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002686:	4b2d      	ldr	r3, [pc, #180]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002688:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00a      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002696:	4b26      	ldr	r3, [pc, #152]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	4922      	ldr	r1, [pc, #136]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0320 	and.w	r3, r3, #32
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d011      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026b8:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026be:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	491a      	ldr	r1, [pc, #104]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d6:	d101      	bne.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 80026d8:	2301      	movs	r3, #1
 80026da:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80026e8:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a1b      	ldr	r3, [r3, #32]
 80026f6:	490e      	ldr	r1, [pc, #56]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d004      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b80      	cmp	r3, #128	; 0x80
 800270a:	f040 8091 	bne.w	8002830 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002714:	f7fe f894 	bl	8000840 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800271a:	e013      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800271c:	f7fe f890 	bl	8000840 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d90c      	bls.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e0a3      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800272e:	bf00      	nop
 8002730:	40023800 	.word	0x40023800
 8002734:	40007000 	.word	0x40007000
 8002738:	42470e40 	.word	0x42470e40
 800273c:	424711e0 	.word	0x424711e0
 8002740:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002744:	4b4e      	ldr	r3, [pc, #312]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1e5      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8002750:	4a4c      	ldr	r2, [pc, #304]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002756:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d003      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d023      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d019      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8002788:	2b00      	cmp	r3, #0
 800278a:	d004      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002794:	d00e      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d019      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d115      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027b2:	d110      	bne.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	019b      	lsls	r3, r3, #6
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	061b      	lsls	r3, r3, #24
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	071b      	lsls	r3, r3, #28
 80027ce:	492c      	ldr	r1, [pc, #176]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d010      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	019b      	lsls	r3, r3, #6
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	061b      	lsls	r3, r3, #24
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	071b      	lsls	r3, r3, #28
 80027fc:	4920      	ldr	r1, [pc, #128]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002804:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800280a:	f7fe f819 	bl	8000840 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002812:	f7fe f815 	bl	8000840 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e028      	b.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00a      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800283e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002842:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	490d      	ldr	r1, [pc, #52]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00a      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8002860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002864:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	4904      	ldr	r1, [pc, #16]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40023800 	.word	0x40023800
 8002884:	424710d8 	.word	0x424710d8
 8002888:	42470068 	.word	0x42470068

0800288c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e270      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d075      	beq.n	8002996 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028aa:	4ba3      	ldr	r3, [pc, #652]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	f003 030c 	and.w	r3, r3, #12
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d00c      	beq.n	80028d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028b6:	4ba0      	ldr	r3, [pc, #640]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d112      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c2:	4b9d      	ldr	r3, [pc, #628]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ce:	d10b      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d0:	4b99      	ldr	r3, [pc, #612]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d05b      	beq.n	8002994 <HAL_RCC_OscConfig+0x108>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d157      	bne.n	8002994 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e24b      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f0:	d106      	bne.n	8002900 <HAL_RCC_OscConfig+0x74>
 80028f2:	4b91      	ldr	r3, [pc, #580]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a90      	ldr	r2, [pc, #576]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e01d      	b.n	800293c <HAL_RCC_OscConfig+0xb0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x98>
 800290a:	4b8b      	ldr	r3, [pc, #556]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a8a      	ldr	r2, [pc, #552]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002910:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	4b88      	ldr	r3, [pc, #544]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a87      	ldr	r2, [pc, #540]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0xb0>
 8002924:	4b84      	ldr	r3, [pc, #528]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a83      	ldr	r2, [pc, #524]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 800292a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800292e:	6013      	str	r3, [r2, #0]
 8002930:	4b81      	ldr	r3, [pc, #516]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a80      	ldr	r2, [pc, #512]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d013      	beq.n	800296c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fd ff7c 	bl	8000840 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800294c:	f7fd ff78 	bl	8000840 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b64      	cmp	r3, #100	; 0x64
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e210      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b76      	ldr	r3, [pc, #472]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0xc0>
 800296a:	e014      	b.n	8002996 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296c:	f7fd ff68 	bl	8000840 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002974:	f7fd ff64 	bl	8000840 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1fc      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002986:	4b6c      	ldr	r3, [pc, #432]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0xe8>
 8002992:	e000      	b.n	8002996 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d063      	beq.n	8002a6a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029a2:	4b65      	ldr	r3, [pc, #404]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ae:	4b62      	ldr	r3, [pc, #392]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d11c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ba:	4b5f      	ldr	r3, [pc, #380]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c6:	4b5c      	ldr	r3, [pc, #368]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d005      	beq.n	80029de <HAL_RCC_OscConfig+0x152>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e1d0      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029de:	4b56      	ldr	r3, [pc, #344]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4952      	ldr	r1, [pc, #328]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029f2:	e03a      	b.n	8002a6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fc:	4b4f      	ldr	r3, [pc, #316]	; (8002b3c <HAL_RCC_OscConfig+0x2b0>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a02:	f7fd ff1d 	bl	8000840 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a0a:	f7fd ff19 	bl	8000840 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e1b1      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a1c:	4b46      	ldr	r3, [pc, #280]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d0f0      	beq.n	8002a0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a28:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	4940      	ldr	r1, [pc, #256]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	600b      	str	r3, [r1, #0]
 8002a3c:	e015      	b.n	8002a6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a3e:	4b3f      	ldr	r3, [pc, #252]	; (8002b3c <HAL_RCC_OscConfig+0x2b0>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fd fefc 	bl	8000840 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7fd fef8 	bl	8000840 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e190      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a5e:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0308 	and.w	r3, r3, #8
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d030      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d016      	beq.n	8002aac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7e:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_RCC_OscConfig+0x2b4>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a84:	f7fd fedc 	bl	8000840 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a8c:	f7fd fed8 	bl	8000840 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e170      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a9e:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0f0      	beq.n	8002a8c <HAL_RCC_OscConfig+0x200>
 8002aaa:	e015      	b.n	8002ad8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aac:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <HAL_RCC_OscConfig+0x2b4>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7fd fec5 	bl	8000840 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab8:	e008      	b.n	8002acc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aba:	f7fd fec1 	bl	8000840 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d901      	bls.n	8002acc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	e159      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f0      	bne.n	8002aba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 80a0 	beq.w	8002c26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10f      	bne.n	8002b16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b04:	6413      	str	r3, [r2, #64]	; 0x40
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_RCC_OscConfig+0x2ac>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b12:	2301      	movs	r3, #1
 8002b14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_OscConfig+0x2b8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d121      	bne.n	8002b66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b22:	4b08      	ldr	r3, [pc, #32]	; (8002b44 <HAL_RCC_OscConfig+0x2b8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a07      	ldr	r2, [pc, #28]	; (8002b44 <HAL_RCC_OscConfig+0x2b8>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2e:	f7fd fe87 	bl	8000840 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	e011      	b.n	8002b5a <HAL_RCC_OscConfig+0x2ce>
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	42470000 	.word	0x42470000
 8002b40:	42470e80 	.word	0x42470e80
 8002b44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b48:	f7fd fe7a 	bl	8000840 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e112      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5a:	4b8b      	ldr	r3, [pc, #556]	; (8002d88 <HAL_RCC_OscConfig+0x4fc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d106      	bne.n	8002b7c <HAL_RCC_OscConfig+0x2f0>
 8002b6e:	4b87      	ldr	r3, [pc, #540]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b72:	4a86      	ldr	r2, [pc, #536]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002b74:	f043 0301 	orr.w	r3, r3, #1
 8002b78:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7a:	e01c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x32a>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	2b05      	cmp	r3, #5
 8002b82:	d10c      	bne.n	8002b9e <HAL_RCC_OscConfig+0x312>
 8002b84:	4b81      	ldr	r3, [pc, #516]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a80      	ldr	r2, [pc, #512]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002b8a:	f043 0304 	orr.w	r3, r3, #4
 8002b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b90:	4b7e      	ldr	r3, [pc, #504]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	4a7d      	ldr	r2, [pc, #500]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b9c:	e00b      	b.n	8002bb6 <HAL_RCC_OscConfig+0x32a>
 8002b9e:	4b7b      	ldr	r3, [pc, #492]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba2:	4a7a      	ldr	r2, [pc, #488]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002ba4:	f023 0301 	bic.w	r3, r3, #1
 8002ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8002baa:	4b78      	ldr	r3, [pc, #480]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a77      	ldr	r2, [pc, #476]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002bb0:	f023 0304 	bic.w	r3, r3, #4
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d015      	beq.n	8002bea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbe:	f7fd fe3f 	bl	8000840 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc4:	e00a      	b.n	8002bdc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc6:	f7fd fe3b 	bl	8000840 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e0d1      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bdc:	4b6b      	ldr	r3, [pc, #428]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0ee      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x33a>
 8002be8:	e014      	b.n	8002c14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bea:	f7fd fe29 	bl	8000840 <HAL_GetTick>
 8002bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	e00a      	b.n	8002c08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bf2:	f7fd fe25 	bl	8000840 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e0bb      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c08:	4b60      	ldr	r3, [pc, #384]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1ee      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c14:	7dfb      	ldrb	r3, [r7, #23]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d105      	bne.n	8002c26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c1a:	4b5c      	ldr	r3, [pc, #368]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1e:	4a5b      	ldr	r2, [pc, #364]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 80a7 	beq.w	8002d7e <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c30:	4b56      	ldr	r3, [pc, #344]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 030c 	and.w	r3, r3, #12
 8002c38:	2b08      	cmp	r3, #8
 8002c3a:	d060      	beq.n	8002cfe <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d145      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c44:	4b52      	ldr	r3, [pc, #328]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7fd fdf9 	bl	8000840 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c52:	f7fd fdf5 	bl	8000840 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e08d      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c64:	4b49      	ldr	r3, [pc, #292]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f0      	bne.n	8002c52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69da      	ldr	r2, [r3, #28]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	019b      	lsls	r3, r3, #6
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	041b      	lsls	r3, r3, #16
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c92:	061b      	lsls	r3, r3, #24
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	071b      	lsls	r3, r3, #28
 8002c9c:	493b      	ldr	r1, [pc, #236]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ca2:	4b3b      	ldr	r3, [pc, #236]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7fd fdca 	bl	8000840 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fd fdc6 	bl	8000840 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e05e      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cc2:	4b32      	ldr	r3, [pc, #200]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x424>
 8002cce:	e056      	b.n	8002d7e <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd0:	4b2f      	ldr	r3, [pc, #188]	; (8002d90 <HAL_RCC_OscConfig+0x504>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7fd fdb3 	bl	8000840 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cde:	f7fd fdaf 	bl	8000840 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e047      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf0:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d1f0      	bne.n	8002cde <HAL_RCC_OscConfig+0x452>
 8002cfc:	e03f      	b.n	8002d7e <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699b      	ldr	r3, [r3, #24]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d101      	bne.n	8002d0a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e03a      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d0a:	4b20      	ldr	r3, [pc, #128]	; (8002d8c <HAL_RCC_OscConfig+0x500>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d030      	beq.n	8002d7a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d129      	bne.n	8002d7a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d122      	bne.n	8002d7a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d40:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d119      	bne.n	8002d7a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	085b      	lsrs	r3, r3, #1
 8002d52:	3b01      	subs	r3, #1
 8002d54:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d10f      	bne.n	8002d7a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d107      	bne.n	8002d7a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40007000 	.word	0x40007000
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	42470060 	.word	0x42470060

08002d94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d94:	b084      	sub	sp, #16
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	f107 001c 	add.w	r0, r7, #28
 8002da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d122      	bne.n	8002df2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002dc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d105      	bne.n	8002de6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f001 fb16 	bl	8004418 <USB_CoreReset>
 8002dec:	4603      	mov	r3, r0
 8002dee:	73fb      	strb	r3, [r7, #15]
 8002df0:	e01a      	b.n	8002e28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f001 fb0a 	bl	8004418 <USB_CoreReset>
 8002e04:	4603      	mov	r3, r0
 8002e06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002e08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	639a      	str	r2, [r3, #56]	; 0x38
 8002e1a:	e005      	b.n	8002e28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d10b      	bne.n	8002e46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f043 0206 	orr.w	r2, r3, #6
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f043 0220 	orr.w	r2, r3, #32
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e52:	b004      	add	sp, #16
 8002e54:	4770      	bx	lr
	...

08002e58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002e66:	79fb      	ldrb	r3, [r7, #7]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d165      	bne.n	8002f38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4a41      	ldr	r2, [pc, #260]	; (8002f74 <USB_SetTurnaroundTime+0x11c>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d906      	bls.n	8002e82 <USB_SetTurnaroundTime+0x2a>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4a40      	ldr	r2, [pc, #256]	; (8002f78 <USB_SetTurnaroundTime+0x120>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d202      	bcs.n	8002e82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002e7c:	230f      	movs	r3, #15
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	e062      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	4a3c      	ldr	r2, [pc, #240]	; (8002f78 <USB_SetTurnaroundTime+0x120>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d306      	bcc.n	8002e98 <USB_SetTurnaroundTime+0x40>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4a3b      	ldr	r2, [pc, #236]	; (8002f7c <USB_SetTurnaroundTime+0x124>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d202      	bcs.n	8002e98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002e92:	230e      	movs	r3, #14
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	e057      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	4a38      	ldr	r2, [pc, #224]	; (8002f7c <USB_SetTurnaroundTime+0x124>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d306      	bcc.n	8002eae <USB_SetTurnaroundTime+0x56>
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	4a37      	ldr	r2, [pc, #220]	; (8002f80 <USB_SetTurnaroundTime+0x128>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d202      	bcs.n	8002eae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002ea8:	230d      	movs	r3, #13
 8002eaa:	617b      	str	r3, [r7, #20]
 8002eac:	e04c      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4a33      	ldr	r2, [pc, #204]	; (8002f80 <USB_SetTurnaroundTime+0x128>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d306      	bcc.n	8002ec4 <USB_SetTurnaroundTime+0x6c>
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	4a32      	ldr	r2, [pc, #200]	; (8002f84 <USB_SetTurnaroundTime+0x12c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d802      	bhi.n	8002ec4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002ebe:	230c      	movs	r3, #12
 8002ec0:	617b      	str	r3, [r7, #20]
 8002ec2:	e041      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	4a2f      	ldr	r2, [pc, #188]	; (8002f84 <USB_SetTurnaroundTime+0x12c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d906      	bls.n	8002eda <USB_SetTurnaroundTime+0x82>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	4a2e      	ldr	r2, [pc, #184]	; (8002f88 <USB_SetTurnaroundTime+0x130>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d802      	bhi.n	8002eda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002ed4:	230b      	movs	r3, #11
 8002ed6:	617b      	str	r3, [r7, #20]
 8002ed8:	e036      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4a2a      	ldr	r2, [pc, #168]	; (8002f88 <USB_SetTurnaroundTime+0x130>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d906      	bls.n	8002ef0 <USB_SetTurnaroundTime+0x98>
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4a29      	ldr	r2, [pc, #164]	; (8002f8c <USB_SetTurnaroundTime+0x134>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d802      	bhi.n	8002ef0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002eea:	230a      	movs	r3, #10
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e02b      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4a26      	ldr	r2, [pc, #152]	; (8002f8c <USB_SetTurnaroundTime+0x134>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d906      	bls.n	8002f06 <USB_SetTurnaroundTime+0xae>
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <USB_SetTurnaroundTime+0x138>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d202      	bcs.n	8002f06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002f00:	2309      	movs	r3, #9
 8002f02:	617b      	str	r3, [r7, #20]
 8002f04:	e020      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4a21      	ldr	r2, [pc, #132]	; (8002f90 <USB_SetTurnaroundTime+0x138>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d306      	bcc.n	8002f1c <USB_SetTurnaroundTime+0xc4>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4a20      	ldr	r2, [pc, #128]	; (8002f94 <USB_SetTurnaroundTime+0x13c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d802      	bhi.n	8002f1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002f16:	2308      	movs	r3, #8
 8002f18:	617b      	str	r3, [r7, #20]
 8002f1a:	e015      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <USB_SetTurnaroundTime+0x13c>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d906      	bls.n	8002f32 <USB_SetTurnaroundTime+0xda>
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4a1c      	ldr	r2, [pc, #112]	; (8002f98 <USB_SetTurnaroundTime+0x140>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d202      	bcs.n	8002f32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002f2c:	2307      	movs	r3, #7
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	e00a      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002f32:	2306      	movs	r3, #6
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	e007      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d102      	bne.n	8002f44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002f3e:	2309      	movs	r3, #9
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e001      	b.n	8002f48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002f44:	2309      	movs	r3, #9
 8002f46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	68da      	ldr	r2, [r3, #12]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	029b      	lsls	r3, r3, #10
 8002f5c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002f60:	431a      	orrs	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	00d8acbf 	.word	0x00d8acbf
 8002f78:	00e4e1c0 	.word	0x00e4e1c0
 8002f7c:	00f42400 	.word	0x00f42400
 8002f80:	01067380 	.word	0x01067380
 8002f84:	011a499f 	.word	0x011a499f
 8002f88:	01312cff 	.word	0x01312cff
 8002f8c:	014ca43f 	.word	0x014ca43f
 8002f90:	016e3600 	.word	0x016e3600
 8002f94:	01a6ab1f 	.word	0x01a6ab1f
 8002f98:	01e84800 	.word	0x01e84800

08002f9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f043 0201 	orr.w	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f023 0201 	bic.w	r2, r3, #1
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ffc:	78fb      	ldrb	r3, [r7, #3]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d115      	bne.n	800302e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800300e:	2001      	movs	r0, #1
 8003010:	f7fd fc22 	bl	8000858 <HAL_Delay>
      ms++;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3301      	adds	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f001 f96c 	bl	80042f8 <USB_GetMode>
 8003020:	4603      	mov	r3, r0
 8003022:	2b01      	cmp	r3, #1
 8003024:	d01e      	beq.n	8003064 <USB_SetCurrentMode+0x84>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2b31      	cmp	r3, #49	; 0x31
 800302a:	d9f0      	bls.n	800300e <USB_SetCurrentMode+0x2e>
 800302c:	e01a      	b.n	8003064 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d115      	bne.n	8003060 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003040:	2001      	movs	r0, #1
 8003042:	f7fd fc09 	bl	8000858 <HAL_Delay>
      ms++;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3301      	adds	r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f001 f953 	bl	80042f8 <USB_GetMode>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <USB_SetCurrentMode+0x84>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b31      	cmp	r3, #49	; 0x31
 800305c:	d9f0      	bls.n	8003040 <USB_SetCurrentMode+0x60>
 800305e:	e001      	b.n	8003064 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e005      	b.n	8003070 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b32      	cmp	r3, #50	; 0x32
 8003068:	d101      	bne.n	800306e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	3710      	adds	r7, #16
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003078:	b084      	sub	sp, #16
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
 8003082:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003092:	2300      	movs	r3, #0
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	e009      	b.n	80030ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	3340      	adds	r3, #64	; 0x40
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	2200      	movs	r2, #0
 80030a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	3301      	adds	r3, #1
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	2b0e      	cmp	r3, #14
 80030b0:	d9f2      	bls.n	8003098 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80030b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d11c      	bne.n	80030f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	68fa      	ldr	r2, [r7, #12]
 80030c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030c6:	f043 0302 	orr.w	r3, r3, #2
 80030ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	601a      	str	r2, [r3, #0]
 80030f0:	e005      	b.n	80030fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003104:	461a      	mov	r2, r3
 8003106:	2300      	movs	r3, #0
 8003108:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003110:	4619      	mov	r1, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003118:	461a      	mov	r2, r3
 800311a:	680b      	ldr	r3, [r1, #0]
 800311c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800311e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003120:	2b01      	cmp	r3, #1
 8003122:	d10c      	bne.n	800313e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003126:	2b00      	cmp	r3, #0
 8003128:	d104      	bne.n	8003134 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800312a:	2100      	movs	r1, #0
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f945 	bl	80033bc <USB_SetDevSpeed>
 8003132:	e008      	b.n	8003146 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003134:	2101      	movs	r1, #1
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f940 	bl	80033bc <USB_SetDevSpeed>
 800313c:	e003      	b.n	8003146 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800313e:	2103      	movs	r1, #3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 f93b 	bl	80033bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003146:	2110      	movs	r1, #16
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f8f3 	bl	8003334 <USB_FlushTxFifo>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 f90f 	bl	800337c <USB_FlushRxFifo>
 800315e:	4603      	mov	r3, r0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d001      	beq.n	8003168 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800316e:	461a      	mov	r2, r3
 8003170:	2300      	movs	r3, #0
 8003172:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317a:	461a      	mov	r2, r3
 800317c:	2300      	movs	r3, #0
 800317e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003186:	461a      	mov	r2, r3
 8003188:	2300      	movs	r3, #0
 800318a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800318c:	2300      	movs	r3, #0
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	e043      	b.n	800321a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031a8:	d118      	bne.n	80031dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d10a      	bne.n	80031c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031bc:	461a      	mov	r2, r3
 80031be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	e013      	b.n	80031ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d2:	461a      	mov	r2, r3
 80031d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e008      	b.n	80031ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e8:	461a      	mov	r2, r3
 80031ea:	2300      	movs	r3, #0
 80031ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fa:	461a      	mov	r2, r3
 80031fc:	2300      	movs	r3, #0
 80031fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	015a      	lsls	r2, r3, #5
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4413      	add	r3, r2
 8003208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800320c:	461a      	mov	r2, r3
 800320e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003212:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	3301      	adds	r3, #1
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	429a      	cmp	r2, r3
 8003220:	d3b7      	bcc.n	8003192 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003222:	2300      	movs	r3, #0
 8003224:	613b      	str	r3, [r7, #16]
 8003226:	e043      	b.n	80032b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	015a      	lsls	r2, r3, #5
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	4413      	add	r3, r2
 8003230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800323a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800323e:	d118      	bne.n	8003272 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10a      	bne.n	800325c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	015a      	lsls	r2, r3, #5
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4413      	add	r3, r2
 800324e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003252:	461a      	mov	r2, r3
 8003254:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	e013      	b.n	8003284 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003268:	461a      	mov	r2, r3
 800326a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	e008      	b.n	8003284 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	015a      	lsls	r2, r3, #5
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4413      	add	r3, r2
 800327a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327e:	461a      	mov	r2, r3
 8003280:	2300      	movs	r3, #0
 8003282:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	015a      	lsls	r2, r3, #5
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003290:	461a      	mov	r2, r3
 8003292:	2300      	movs	r3, #0
 8003294:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a2:	461a      	mov	r2, r3
 80032a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	3301      	adds	r3, #1
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d3b7      	bcc.n	8003228 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80032d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80032da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d105      	bne.n	80032ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f043 0210 	orr.w	r2, r3, #16
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	699a      	ldr	r2, [r3, #24]
 80032f0:	4b0f      	ldr	r3, [pc, #60]	; (8003330 <USB_DevInit+0x2b8>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80032f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d005      	beq.n	800330a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f043 0208 	orr.w	r2, r3, #8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800330a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d107      	bne.n	8003320 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003318:	f043 0304 	orr.w	r3, r3, #4
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003320:	7dfb      	ldrb	r3, [r7, #23]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800332c:	b004      	add	sp, #16
 800332e:	4770      	bx	lr
 8003330:	803c3800 	.word	0x803c3800

08003334 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	019b      	lsls	r3, r3, #6
 8003346:	f043 0220 	orr.w	r2, r3, #32
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3301      	adds	r3, #1
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	4a08      	ldr	r2, [pc, #32]	; (8003378 <USB_FlushTxFifo+0x44>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e006      	b.n	800336c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b20      	cmp	r3, #32
 8003368:	d0f1      	beq.n	800334e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr
 8003378:	00030d40 	.word	0x00030d40

0800337c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2210      	movs	r2, #16
 800338c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	3301      	adds	r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	4a08      	ldr	r2, [pc, #32]	; (80033b8 <USB_FlushRxFifo+0x3c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e006      	b.n	80033ac <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f003 0310 	and.w	r3, r3, #16
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d0f1      	beq.n	800338e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	00030d40 	.word	0x00030d40

080033bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	78fb      	ldrb	r3, [r7, #3]
 80033d6:	68f9      	ldr	r1, [r7, #12]
 80033d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b087      	sub	sp, #28
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0306 	and.w	r3, r3, #6
 8003406:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800340e:	2300      	movs	r3, #0
 8003410:	75fb      	strb	r3, [r7, #23]
 8003412:	e00a      	b.n	800342a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d002      	beq.n	8003420 <USB_GetDevSpeed+0x32>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2b06      	cmp	r3, #6
 800341e:	d102      	bne.n	8003426 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003420:	2302      	movs	r3, #2
 8003422:	75fb      	strb	r3, [r7, #23]
 8003424:	e001      	b.n	800342a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003426:	230f      	movs	r3, #15
 8003428:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800342a:	7dfb      	ldrb	r3, [r7, #23]
}
 800342c:	4618      	mov	r0, r3
 800342e:	371c      	adds	r7, #28
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	785b      	ldrb	r3, [r3, #1]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d13a      	bne.n	80034ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	2101      	movs	r1, #1
 8003466:	fa01 f303 	lsl.w	r3, r1, r3
 800346a:	b29b      	uxth	r3, r3
 800346c:	68f9      	ldr	r1, [r7, #12]
 800346e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003472:	4313      	orrs	r3, r2
 8003474:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d155      	bne.n	8003538 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	78db      	ldrb	r3, [r3, #3]
 80034a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	059b      	lsls	r3, r3, #22
 80034ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80034b0:	4313      	orrs	r3, r2
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	0151      	lsls	r1, r2, #5
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	440a      	add	r2, r1
 80034ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	e036      	b.n	8003538 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d0:	69da      	ldr	r2, [r3, #28]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	2101      	movs	r1, #1
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	041b      	lsls	r3, r3, #16
 80034e2:	68f9      	ldr	r1, [r7, #12]
 80034e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	015a      	lsls	r2, r3, #5
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4413      	add	r3, r2
 80034f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d11a      	bne.n	8003538 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	78db      	ldrb	r3, [r3, #3]
 800351c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800351e:	430b      	orrs	r3, r1
 8003520:	4313      	orrs	r3, r2
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	0151      	lsls	r1, r2, #5
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	440a      	add	r2, r1
 800352a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800352e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003536:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	785b      	ldrb	r3, [r3, #1]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d161      	bne.n	8003628 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800357a:	d11f      	bne.n	80035bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	0151      	lsls	r1, r2, #5
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	440a      	add	r2, r1
 8003592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003596:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800359a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	0151      	lsls	r1, r2, #5
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	440a      	add	r2, r1
 80035b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	2101      	movs	r1, #1
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	68f9      	ldr	r1, [r7, #12]
 80035d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035dc:	4013      	ands	r3, r2
 80035de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	43db      	mvns	r3, r3
 80035fa:	68f9      	ldr	r1, [r7, #12]
 80035fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003600:	4013      	ands	r3, r2
 8003602:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	0159      	lsls	r1, r3, #5
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	440b      	add	r3, r1
 800361a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361e:	4619      	mov	r1, r3
 8003620:	4b35      	ldr	r3, [pc, #212]	; (80036f8 <USB_DeactivateEndpoint+0x1b0>)
 8003622:	4013      	ands	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
 8003626:	e060      	b.n	80036ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	4413      	add	r3, r2
 8003630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800363a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800363e:	d11f      	bne.n	8003680 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	0151      	lsls	r1, r2, #5
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	440a      	add	r2, r1
 8003656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800365a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800365e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	0151      	lsls	r1, r2, #5
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	440a      	add	r2, r1
 8003676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800367a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800367e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	2101      	movs	r1, #1
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	041b      	lsls	r3, r3, #16
 8003698:	43db      	mvns	r3, r3
 800369a:	68f9      	ldr	r1, [r7, #12]
 800369c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036a0:	4013      	ands	r3, r2
 80036a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036aa:	69da      	ldr	r2, [r3, #28]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	f003 030f 	and.w	r3, r3, #15
 80036b4:	2101      	movs	r1, #1
 80036b6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ba:	041b      	lsls	r3, r3, #16
 80036bc:	43db      	mvns	r3, r3
 80036be:	68f9      	ldr	r1, [r7, #12]
 80036c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036c4:	4013      	ands	r3, r2
 80036c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	0159      	lsls	r1, r3, #5
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	440b      	add	r3, r1
 80036de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e2:	4619      	mov	r1, r3
 80036e4:	4b05      	ldr	r3, [pc, #20]	; (80036fc <USB_DeactivateEndpoint+0x1b4>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	ec337800 	.word	0xec337800
 80036fc:	eff37800 	.word	0xeff37800

08003700 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	4613      	mov	r3, r2
 800370c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	785b      	ldrb	r3, [r3, #1]
 800371c:	2b01      	cmp	r3, #1
 800371e:	f040 815c 	bne.w	80039da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d132      	bne.n	8003790 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	0151      	lsls	r1, r2, #5
 800373c:	69fa      	ldr	r2, [r7, #28]
 800373e:	440a      	add	r2, r1
 8003740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003744:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003748:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800374c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	015a      	lsls	r2, r3, #5
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	4413      	add	r3, r2
 8003756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	0151      	lsls	r1, r2, #5
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	440a      	add	r2, r1
 8003764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800376c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	015a      	lsls	r2, r3, #5
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	4413      	add	r3, r2
 8003776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	0151      	lsls	r1, r2, #5
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	440a      	add	r2, r1
 8003784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003788:	0cdb      	lsrs	r3, r3, #19
 800378a:	04db      	lsls	r3, r3, #19
 800378c:	6113      	str	r3, [r2, #16]
 800378e:	e074      	b.n	800387a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	0151      	lsls	r1, r2, #5
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	440a      	add	r2, r1
 80037a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037aa:	0cdb      	lsrs	r3, r3, #19
 80037ac:	04db      	lsls	r3, r3, #19
 80037ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	0151      	lsls	r1, r2, #5
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	440a      	add	r2, r1
 80037c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80037ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80037d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	6959      	ldr	r1, [r3, #20]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	440b      	add	r3, r1
 80037ec:	1e59      	subs	r1, r3, #1
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80037f8:	4b9d      	ldr	r3, [pc, #628]	; (8003a70 <USB_EPStartXfer+0x370>)
 80037fa:	400b      	ands	r3, r1
 80037fc:	69b9      	ldr	r1, [r7, #24]
 80037fe:	0148      	lsls	r0, r1, #5
 8003800:	69f9      	ldr	r1, [r7, #28]
 8003802:	4401      	add	r1, r0
 8003804:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003808:	4313      	orrs	r3, r2
 800380a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003822:	69b9      	ldr	r1, [r7, #24]
 8003824:	0148      	lsls	r0, r1, #5
 8003826:	69f9      	ldr	r1, [r7, #28]
 8003828:	4401      	add	r1, r0
 800382a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800382e:	4313      	orrs	r3, r2
 8003830:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	78db      	ldrb	r3, [r3, #3]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d11f      	bne.n	800387a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	0151      	lsls	r1, r2, #5
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	440a      	add	r2, r1
 8003850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003854:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003858:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	0151      	lsls	r1, r2, #5
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	440a      	add	r2, r1
 8003870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003874:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003878:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d14b      	bne.n	8003918 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d009      	beq.n	800389c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003894:	461a      	mov	r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	78db      	ldrb	r3, [r3, #3]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d128      	bne.n	80038f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d110      	bne.n	80038d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	0151      	lsls	r1, r2, #5
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	440a      	add	r2, r1
 80038ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	e00f      	b.n	80038f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	0151      	lsls	r1, r2, #5
 80038e8:	69fa      	ldr	r2, [r7, #28]
 80038ea:	440a      	add	r2, r1
 80038ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	0151      	lsls	r1, r2, #5
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	440a      	add	r2, r1
 800390c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003910:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	e12f      	b.n	8003b78 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	015a      	lsls	r2, r3, #5
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	4413      	add	r3, r2
 8003920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	0151      	lsls	r1, r2, #5
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	440a      	add	r2, r1
 800392e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003932:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003936:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	78db      	ldrb	r3, [r3, #3]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d015      	beq.n	800396c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8117 	beq.w	8003b78 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	f003 030f 	and.w	r3, r3, #15
 800395a:	2101      	movs	r1, #1
 800395c:	fa01 f303 	lsl.w	r3, r1, r3
 8003960:	69f9      	ldr	r1, [r7, #28]
 8003962:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003966:	4313      	orrs	r3, r2
 8003968:	634b      	str	r3, [r1, #52]	; 0x34
 800396a:	e105      	b.n	8003b78 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d110      	bne.n	800399e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	0151      	lsls	r1, r2, #5
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	440a      	add	r2, r1
 8003992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003996:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	e00f      	b.n	80039be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	0151      	lsls	r1, r2, #5
 80039b0:	69fa      	ldr	r2, [r7, #28]
 80039b2:	440a      	add	r2, r1
 80039b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	68d9      	ldr	r1, [r3, #12]
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	b298      	uxth	r0, r3
 80039cc:	79fb      	ldrb	r3, [r7, #7]
 80039ce:	9300      	str	r3, [sp, #0]
 80039d0:	4603      	mov	r3, r0
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 fa2b 	bl	8003e2e <USB_WritePacket>
 80039d8:	e0ce      	b.n	8003b78 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	0151      	lsls	r1, r2, #5
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	440a      	add	r2, r1
 80039f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039f4:	0cdb      	lsrs	r3, r3, #19
 80039f6:	04db      	lsls	r3, r3, #19
 80039f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	0151      	lsls	r1, r2, #5
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	440a      	add	r2, r1
 8003a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d126      	bne.n	8003a74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3c:	69b9      	ldr	r1, [r7, #24]
 8003a3e:	0148      	lsls	r0, r1, #5
 8003a40:	69f9      	ldr	r1, [r7, #28]
 8003a42:	4401      	add	r1, r0
 8003a44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	015a      	lsls	r2, r3, #5
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	4413      	add	r3, r2
 8003a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	69ba      	ldr	r2, [r7, #24]
 8003a5c:	0151      	lsls	r1, r2, #5
 8003a5e:	69fa      	ldr	r2, [r7, #28]
 8003a60:	440a      	add	r2, r1
 8003a62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a6a:	6113      	str	r3, [r2, #16]
 8003a6c:	e036      	b.n	8003adc <USB_EPStartXfer+0x3dc>
 8003a6e:	bf00      	nop
 8003a70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	695a      	ldr	r2, [r3, #20]
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	1e5a      	subs	r2, r3, #1
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a96:	691a      	ldr	r2, [r3, #16]
 8003a98:	8afb      	ldrh	r3, [r7, #22]
 8003a9a:	04d9      	lsls	r1, r3, #19
 8003a9c:	4b39      	ldr	r3, [pc, #228]	; (8003b84 <USB_EPStartXfer+0x484>)
 8003a9e:	400b      	ands	r3, r1
 8003aa0:	69b9      	ldr	r1, [r7, #24]
 8003aa2:	0148      	lsls	r0, r1, #5
 8003aa4:	69f9      	ldr	r1, [r7, #28]
 8003aa6:	4401      	add	r1, r0
 8003aa8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003aac:	4313      	orrs	r3, r2
 8003aae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	8af9      	ldrh	r1, [r7, #22]
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003acc:	69b9      	ldr	r1, [r7, #24]
 8003ace:	0148      	lsls	r0, r1, #5
 8003ad0:	69f9      	ldr	r1, [r7, #28]
 8003ad2:	4401      	add	r1, r0
 8003ad4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d10d      	bne.n	8003afe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d009      	beq.n	8003afe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	68d9      	ldr	r1, [r3, #12]
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	015a      	lsls	r2, r3, #5
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4413      	add	r3, r2
 8003af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afa:	460a      	mov	r2, r1
 8003afc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	78db      	ldrb	r3, [r3, #3]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d128      	bne.n	8003b58 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d110      	bne.n	8003b38 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	015a      	lsls	r2, r3, #5
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	0151      	lsls	r1, r2, #5
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	440a      	add	r2, r1
 8003b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	e00f      	b.n	8003b58 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	0151      	lsls	r1, r2, #5
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	440a      	add	r2, r1
 8003b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	1ff80000 	.word	0x1ff80000

08003b88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	4613      	mov	r3, r2
 8003b94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	785b      	ldrb	r3, [r3, #1]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	f040 80cd 	bne.w	8003d44 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d132      	bne.n	8003c18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	015a      	lsls	r2, r3, #5
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	4413      	add	r3, r2
 8003bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	0151      	lsls	r1, r2, #5
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	440a      	add	r2, r1
 8003bc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003bd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003bd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	0151      	lsls	r1, r2, #5
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	440a      	add	r2, r1
 8003bec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	0151      	lsls	r1, r2, #5
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	440a      	add	r2, r1
 8003c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c10:	0cdb      	lsrs	r3, r3, #19
 8003c12:	04db      	lsls	r3, r3, #19
 8003c14:	6113      	str	r3, [r2, #16]
 8003c16:	e04e      	b.n	8003cb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	0151      	lsls	r1, r2, #5
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	440a      	add	r2, r1
 8003c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c32:	0cdb      	lsrs	r3, r3, #19
 8003c34:	04db      	lsls	r3, r3, #19
 8003c36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	0151      	lsls	r1, r2, #5
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	695a      	ldr	r2, [r3, #20]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d903      	bls.n	8003c70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	0151      	lsls	r1, r2, #5
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	440a      	add	r2, r1
 8003c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9c:	691a      	ldr	r2, [r3, #16]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ca6:	6939      	ldr	r1, [r7, #16]
 8003ca8:	0148      	lsls	r0, r1, #5
 8003caa:	6979      	ldr	r1, [r7, #20]
 8003cac:	4401      	add	r1, r0
 8003cae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d11e      	bne.n	8003cfa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d009      	beq.n	8003cd8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	0151      	lsls	r1, r2, #5
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	440a      	add	r2, r1
 8003cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cf6:	6013      	str	r3, [r2, #0]
 8003cf8:	e092      	b.n	8003e20 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	015a      	lsls	r2, r3, #5
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	4413      	add	r3, r2
 8003d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	0151      	lsls	r1, r2, #5
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	440a      	add	r2, r1
 8003d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d07e      	beq.n	8003e20 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	f003 030f 	and.w	r3, r3, #15
 8003d32:	2101      	movs	r1, #1
 8003d34:	fa01 f303 	lsl.w	r3, r1, r3
 8003d38:	6979      	ldr	r1, [r7, #20]
 8003d3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	634b      	str	r3, [r1, #52]	; 0x34
 8003d42:	e06d      	b.n	8003e20 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d5e:	0cdb      	lsrs	r3, r3, #19
 8003d60:	04db      	lsls	r3, r3, #19
 8003d62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	0151      	lsls	r1, r2, #5
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	440a      	add	r2, r1
 8003d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d86:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	0151      	lsls	r1, r2, #5
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	440a      	add	r2, r1
 8003dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003db2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003db6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dc4:	691a      	ldr	r2, [r3, #16]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dce:	6939      	ldr	r1, [r7, #16]
 8003dd0:	0148      	lsls	r0, r1, #5
 8003dd2:	6979      	ldr	r1, [r7, #20]
 8003dd4:	4401      	add	r1, r0
 8003dd6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d10d      	bne.n	8003e00 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d009      	beq.n	8003e00 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	68d9      	ldr	r1, [r3, #12]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dfc:	460a      	mov	r2, r1
 8003dfe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	0151      	lsls	r1, r2, #5
 8003e12:	697a      	ldr	r2, [r7, #20]
 8003e14:	440a      	add	r2, r1
 8003e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	371c      	adds	r7, #28
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b089      	sub	sp, #36	; 0x24
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	60f8      	str	r0, [r7, #12]
 8003e36:	60b9      	str	r1, [r7, #8]
 8003e38:	4611      	mov	r1, r2
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	71fb      	strb	r3, [r7, #7]
 8003e40:	4613      	mov	r3, r2
 8003e42:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003e4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d123      	bne.n	8003e9c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003e54:	88bb      	ldrh	r3, [r7, #4]
 8003e56:	3303      	adds	r3, #3
 8003e58:	089b      	lsrs	r3, r3, #2
 8003e5a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	e018      	b.n	8003e94 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	031a      	lsls	r2, r3, #12
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e6e:	461a      	mov	r2, r3
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3301      	adds	r3, #1
 8003e86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	3301      	adds	r3, #1
 8003e92:	61bb      	str	r3, [r7, #24]
 8003e94:	69ba      	ldr	r2, [r7, #24]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d3e2      	bcc.n	8003e62 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3724      	adds	r7, #36	; 0x24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b08b      	sub	sp, #44	; 0x2c
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	60f8      	str	r0, [r7, #12]
 8003eb2:	60b9      	str	r1, [r7, #8]
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003ec0:	88fb      	ldrh	r3, [r7, #6]
 8003ec2:	089b      	lsrs	r3, r3, #2
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003ec8:	88fb      	ldrh	r3, [r7, #6]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	623b      	str	r3, [r7, #32]
 8003ed4:	e014      	b.n	8003f00 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	3301      	adds	r3, #1
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	3301      	adds	r3, #1
 8003efe:	623b      	str	r3, [r7, #32]
 8003f00:	6a3a      	ldr	r2, [r7, #32]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d3e6      	bcc.n	8003ed6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003f08:	8bfb      	ldrh	r3, [r7, #30]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01e      	beq.n	8003f4c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f107 0310 	add.w	r3, r7, #16
 8003f1e:	6812      	ldr	r2, [r2, #0]
 8003f20:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003f22:	693a      	ldr	r2, [r7, #16]
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	00db      	lsls	r3, r3, #3
 8003f2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	701a      	strb	r2, [r3, #0]
      i++;
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	3301      	adds	r3, #1
 8003f38:	623b      	str	r3, [r7, #32]
      pDest++;
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003f40:	8bfb      	ldrh	r3, [r7, #30]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003f46:	8bfb      	ldrh	r3, [r7, #30]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1ea      	bne.n	8003f22 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	372c      	adds	r7, #44	; 0x2c
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	785b      	ldrb	r3, [r3, #1]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d12c      	bne.n	8003fd0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	db12      	blt.n	8003fae <USB_EPSetStall+0x54>
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00f      	beq.n	8003fae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	0151      	lsls	r1, r2, #5
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	440a      	add	r2, r1
 8003fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68ba      	ldr	r2, [r7, #8]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fcc:	6013      	str	r3, [r2, #0]
 8003fce:	e02b      	b.n	8004028 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	db12      	blt.n	8004008 <USB_EPSetStall+0xae>
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00f      	beq.n	8004008 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	0151      	lsls	r1, r2, #5
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	440a      	add	r2, r1
 8003ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004002:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004006:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	0151      	lsls	r1, r2, #5
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	440a      	add	r2, r1
 800401e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004022:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004026:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	785b      	ldrb	r3, [r3, #1]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d128      	bne.n	80040a4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	0151      	lsls	r1, r2, #5
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	440a      	add	r2, r1
 8004068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800406c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004070:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	78db      	ldrb	r3, [r3, #3]
 8004076:	2b03      	cmp	r3, #3
 8004078:	d003      	beq.n	8004082 <USB_EPClearStall+0x4c>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	78db      	ldrb	r3, [r3, #3]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d138      	bne.n	80040f4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	015a      	lsls	r2, r3, #5
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4413      	add	r3, r2
 800408a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	0151      	lsls	r1, r2, #5
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	440a      	add	r2, r1
 8004098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800409c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a0:	6013      	str	r3, [r2, #0]
 80040a2:	e027      	b.n	80040f4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	0151      	lsls	r1, r2, #5
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	440a      	add	r2, r1
 80040ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	78db      	ldrb	r3, [r3, #3]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d003      	beq.n	80040d4 <USB_EPClearStall+0x9e>
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	78db      	ldrb	r3, [r3, #3]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d10f      	bne.n	80040f4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	015a      	lsls	r2, r3, #5
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	0151      	lsls	r1, r2, #5
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	440a      	add	r2, r1
 80040ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004102:	b480      	push	{r7}
 8004104:	b085      	sub	sp, #20
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004120:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004124:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	78fb      	ldrb	r3, [r7, #3]
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800413c:	4313      	orrs	r3, r2
 800413e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004168:	f023 0303 	bic.w	r3, r3, #3
 800416c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800417c:	f023 0302 	bic.w	r3, r3, #2
 8004180:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80041aa:	f023 0303 	bic.w	r3, r3, #3
 80041ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041be:	f043 0302 	orr.w	r3, r3, #2
 80041c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	4013      	ands	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80041ea:	68fb      	ldr	r3, [r7, #12]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	4013      	ands	r3, r2
 800421a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	0c1b      	lsrs	r3, r3, #16
}
 8004220:	4618      	mov	r0, r3
 8004222:	3714      	adds	r7, #20
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	4013      	ands	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	b29b      	uxth	r3, r3
}
 8004254:	4618      	mov	r0, r3
 8004256:	3714      	adds	r7, #20
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	4013      	ands	r3, r2
 800428c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800428e:	68bb      	ldr	r3, [r7, #8]
}
 8004290:	4618      	mov	r0, r3
 8004292:	3714      	adds	r7, #20
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042be:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	f003 030f 	and.w	r3, r3, #15
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	fa22 f303 	lsr.w	r3, r2, r3
 80042cc:	01db      	lsls	r3, r3, #7
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	015a      	lsls	r2, r3, #5
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	4013      	ands	r3, r2
 80042e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042ea:	68bb      	ldr	r3, [r7, #8]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	371c      	adds	r7, #28
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	f003 0301 	and.w	r3, r3, #1
}
 8004308:	4618      	mov	r0, r3
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800432e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004332:	f023 0307 	bic.w	r3, r3, #7
 8004336:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800434a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
	...

0800435c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	460b      	mov	r3, r1
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	333c      	adds	r3, #60	; 0x3c
 8004372:	3304      	adds	r3, #4
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4a26      	ldr	r2, [pc, #152]	; (8004414 <USB_EP0_OutStart+0xb8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d90a      	bls.n	8004396 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800438c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004390:	d101      	bne.n	8004396 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e037      	b.n	8004406 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439c:	461a      	mov	r2, r3
 800439e:	2300      	movs	r3, #0
 80043a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043c4:	f043 0318 	orr.w	r3, r3, #24
 80043c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80043dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80043de:	7afb      	ldrb	r3, [r7, #11]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d10f      	bne.n	8004404 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ea:	461a      	mov	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	4f54300a 	.word	0x4f54300a

08004418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	3301      	adds	r3, #1
 8004428:	60fb      	str	r3, [r7, #12]
 800442a:	4a13      	ldr	r2, [pc, #76]	; (8004478 <USB_CoreReset+0x60>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d901      	bls.n	8004434 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e01a      	b.n	800446a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	daf3      	bge.n	8004424 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800443c:	2300      	movs	r3, #0
 800443e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f043 0201 	orr.w	r2, r3, #1
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	3301      	adds	r3, #1
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	4a09      	ldr	r2, [pc, #36]	; (8004478 <USB_CoreReset+0x60>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d901      	bls.n	800445c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e006      	b.n	800446a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d0f1      	beq.n	800444c <USB_CoreReset+0x34>

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	00030d40 	.word	0x00030d40

0800447c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004488:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800448c:	f002 f9a0 	bl	80067d0 <USBD_static_malloc>
 8004490:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80044a0:	2302      	movs	r3, #2
 80044a2:	e066      	b.n	8004572 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	7c1b      	ldrb	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d119      	bne.n	80044e8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80044b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044b8:	2202      	movs	r2, #2
 80044ba:	2181      	movs	r1, #129	; 0x81
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f002 f816 	bl	80064ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80044c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044cc:	2202      	movs	r2, #2
 80044ce:	2101      	movs	r1, #1
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f002 f80c 	bl	80064ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2210      	movs	r2, #16
 80044e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80044e6:	e016      	b.n	8004516 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80044e8:	2340      	movs	r3, #64	; 0x40
 80044ea:	2202      	movs	r2, #2
 80044ec:	2181      	movs	r1, #129	; 0x81
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f001 fffd 	bl	80064ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80044fa:	2340      	movs	r3, #64	; 0x40
 80044fc:	2202      	movs	r2, #2
 80044fe:	2101      	movs	r1, #1
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f001 fff4 	bl	80064ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2210      	movs	r2, #16
 8004512:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004516:	2308      	movs	r3, #8
 8004518:	2203      	movs	r2, #3
 800451a:	2182      	movs	r1, #130	; 0x82
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f001 ffe6 	bl	80064ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	7c1b      	ldrb	r3, [r3, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d109      	bne.n	8004560 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004556:	2101      	movs	r1, #1
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f002 f8b7 	bl	80066cc <USBD_LL_PrepareReceive>
 800455e:	e007      	b.n	8004570 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004566:	2340      	movs	r3, #64	; 0x40
 8004568:	2101      	movs	r1, #1
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f002 f8ae 	bl	80066cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b082      	sub	sp, #8
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	460b      	mov	r3, r1
 8004584:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004586:	2181      	movs	r1, #129	; 0x81
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f001 ffd6 	bl	800653a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004594:	2101      	movs	r1, #1
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f001 ffcf 	bl	800653a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80045a4:	2182      	movs	r1, #130	; 0x82
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f001 ffc7 	bl	800653a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00e      	beq.n	80045e4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80045d6:	4618      	mov	r0, r3
 80045d8:	f002 f908 	bl	80067ec <USBD_static_free>
    pdev->pClassData = NULL;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3708      	adds	r7, #8
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
	...

080045f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004600:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004602:	2300      	movs	r3, #0
 8004604:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004614:	2303      	movs	r3, #3
 8004616:	e0af      	b.n	8004778 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004620:	2b00      	cmp	r3, #0
 8004622:	d03f      	beq.n	80046a4 <USBD_CDC_Setup+0xb4>
 8004624:	2b20      	cmp	r3, #32
 8004626:	f040 809f 	bne.w	8004768 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	88db      	ldrh	r3, [r3, #6]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d02e      	beq.n	8004690 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	b25b      	sxtb	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	da16      	bge.n	800466a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004648:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	88d2      	ldrh	r2, [r2, #6]
 800464e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	88db      	ldrh	r3, [r3, #6]
 8004654:	2b07      	cmp	r3, #7
 8004656:	bf28      	it	cs
 8004658:	2307      	movcs	r3, #7
 800465a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	89fa      	ldrh	r2, [r7, #14]
 8004660:	4619      	mov	r1, r3
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f001 fb13 	bl	8005c8e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004668:	e085      	b.n	8004776 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	785a      	ldrb	r2, [r3, #1]
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	88db      	ldrh	r3, [r3, #6]
 8004678:	b2da      	uxtb	r2, r3
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004680:	6939      	ldr	r1, [r7, #16]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	88db      	ldrh	r3, [r3, #6]
 8004686:	461a      	mov	r2, r3
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f001 fb2c 	bl	8005ce6 <USBD_CtlPrepareRx>
      break;
 800468e:	e072      	b.n	8004776 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	7850      	ldrb	r0, [r2, #1]
 800469c:	2200      	movs	r2, #0
 800469e:	6839      	ldr	r1, [r7, #0]
 80046a0:	4798      	blx	r3
      break;
 80046a2:	e068      	b.n	8004776 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	785b      	ldrb	r3, [r3, #1]
 80046a8:	2b0b      	cmp	r3, #11
 80046aa:	d852      	bhi.n	8004752 <USBD_CDC_Setup+0x162>
 80046ac:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <USBD_CDC_Setup+0xc4>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046e5 	.word	0x080046e5
 80046b8:	08004761 	.word	0x08004761
 80046bc:	08004753 	.word	0x08004753
 80046c0:	08004753 	.word	0x08004753
 80046c4:	08004753 	.word	0x08004753
 80046c8:	08004753 	.word	0x08004753
 80046cc:	08004753 	.word	0x08004753
 80046d0:	08004753 	.word	0x08004753
 80046d4:	08004753 	.word	0x08004753
 80046d8:	08004753 	.word	0x08004753
 80046dc:	0800470f 	.word	0x0800470f
 80046e0:	08004739 	.word	0x08004739
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d107      	bne.n	8004700 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80046f0:	f107 030a 	add.w	r3, r7, #10
 80046f4:	2202      	movs	r2, #2
 80046f6:	4619      	mov	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f001 fac8 	bl	8005c8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80046fe:	e032      	b.n	8004766 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004700:	6839      	ldr	r1, [r7, #0]
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f001 fa52 	bl	8005bac <USBD_CtlError>
            ret = USBD_FAIL;
 8004708:	2303      	movs	r3, #3
 800470a:	75fb      	strb	r3, [r7, #23]
          break;
 800470c:	e02b      	b.n	8004766 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b03      	cmp	r3, #3
 8004718:	d107      	bne.n	800472a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800471a:	f107 030d 	add.w	r3, r7, #13
 800471e:	2201      	movs	r2, #1
 8004720:	4619      	mov	r1, r3
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f001 fab3 	bl	8005c8e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004728:	e01d      	b.n	8004766 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800472a:	6839      	ldr	r1, [r7, #0]
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f001 fa3d 	bl	8005bac <USBD_CtlError>
            ret = USBD_FAIL;
 8004732:	2303      	movs	r3, #3
 8004734:	75fb      	strb	r3, [r7, #23]
          break;
 8004736:	e016      	b.n	8004766 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b03      	cmp	r3, #3
 8004742:	d00f      	beq.n	8004764 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004744:	6839      	ldr	r1, [r7, #0]
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f001 fa30 	bl	8005bac <USBD_CtlError>
            ret = USBD_FAIL;
 800474c:	2303      	movs	r3, #3
 800474e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004750:	e008      	b.n	8004764 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004752:	6839      	ldr	r1, [r7, #0]
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f001 fa29 	bl	8005bac <USBD_CtlError>
          ret = USBD_FAIL;
 800475a:	2303      	movs	r3, #3
 800475c:	75fb      	strb	r3, [r7, #23]
          break;
 800475e:	e002      	b.n	8004766 <USBD_CDC_Setup+0x176>
          break;
 8004760:	bf00      	nop
 8004762:	e008      	b.n	8004776 <USBD_CDC_Setup+0x186>
          break;
 8004764:	bf00      	nop
      }
      break;
 8004766:	e006      	b.n	8004776 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004768:	6839      	ldr	r1, [r7, #0]
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f001 fa1e 	bl	8005bac <USBD_CtlError>
      ret = USBD_FAIL;
 8004770:	2303      	movs	r3, #3
 8004772:	75fb      	strb	r3, [r7, #23]
      break;
 8004774:	bf00      	nop
  }

  return (uint8_t)ret;
 8004776:	7dfb      	ldrb	r3, [r7, #23]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3718      	adds	r7, #24
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	460b      	mov	r3, r1
 800478a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004792:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800479e:	2303      	movs	r3, #3
 80047a0:	e04f      	b.n	8004842 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80047a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80047aa:	78fa      	ldrb	r2, [r7, #3]
 80047ac:	6879      	ldr	r1, [r7, #4]
 80047ae:	4613      	mov	r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4413      	add	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	3318      	adds	r3, #24
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d029      	beq.n	8004814 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80047c0:	78fa      	ldrb	r2, [r7, #3]
 80047c2:	6879      	ldr	r1, [r7, #4]
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	3318      	adds	r3, #24
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	78f9      	ldrb	r1, [r7, #3]
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	460b      	mov	r3, r1
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	1a5b      	subs	r3, r3, r1
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4403      	add	r3, r0
 80047e0:	3344      	adds	r3, #68	; 0x44
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80047e8:	fb03 f301 	mul.w	r3, r3, r1
 80047ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d110      	bne.n	8004814 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	3318      	adds	r3, #24
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004806:	78f9      	ldrb	r1, [r7, #3]
 8004808:	2300      	movs	r3, #0
 800480a:	2200      	movs	r2, #0
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f001 ff3c 	bl	800668a <USBD_LL_Transmit>
 8004812:	e015      	b.n	8004840 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2200      	movs	r2, #0
 8004818:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00b      	beq.n	8004840 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800483c:	78fa      	ldrb	r2, [r7, #3]
 800483e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	460b      	mov	r3, r1
 8004854:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800485c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004868:	2303      	movs	r3, #3
 800486a:	e015      	b.n	8004898 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800486c:	78fb      	ldrb	r3, [r7, #3]
 800486e:	4619      	mov	r1, r3
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f001 ff4c 	bl	800670e <USBD_LL_GetRxDataSize>
 8004876:	4602      	mov	r2, r0
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004892:	4611      	mov	r1, r2
 8004894:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e01b      	b.n	80048f2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d015      	beq.n	80048f0 <USBD_CDC_EP0_RxReady+0x50>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80048ca:	2bff      	cmp	r3, #255	; 0xff
 80048cc:	d010      	beq.n	80048f0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80048dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80048e4:	b292      	uxth	r2, r2
 80048e6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	22ff      	movs	r2, #255	; 0xff
 80048ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2243      	movs	r2, #67	; 0x43
 8004908:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800490a:	4b03      	ldr	r3, [pc, #12]	; (8004918 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800490c:	4618      	mov	r0, r3
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	20000094 	.word	0x20000094

0800491c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2243      	movs	r2, #67	; 0x43
 8004928:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800492a:	4b03      	ldr	r3, [pc, #12]	; (8004938 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	20000050 	.word	0x20000050

0800493c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2243      	movs	r2, #67	; 0x43
 8004948:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800494a:	4b03      	ldr	r3, [pc, #12]	; (8004958 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800494c:	4618      	mov	r0, r3
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr
 8004958:	200000d8 	.word	0x200000d8

0800495c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	220a      	movs	r2, #10
 8004968:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800496a:	4b03      	ldr	r3, [pc, #12]	; (8004978 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800496c:	4618      	mov	r0, r3
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	2000000c 	.word	0x2000000c

0800497c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d101      	bne.n	8004990 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800498c:	2303      	movs	r3, #3
 800498e:	e004      	b.n	800499a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	370c      	adds	r7, #12
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b087      	sub	sp, #28
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049b8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e008      	b.n	80049d6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	68ba      	ldr	r2, [r7, #8]
 80049c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	371c      	adds	r7, #28
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr

080049e2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b085      	sub	sp, #20
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
 80049ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80049f2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e004      	b.n	8004a08 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e016      	b.n	8004a60 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	7c1b      	ldrb	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d109      	bne.n	8004a4e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a44:	2101      	movs	r1, #1
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f001 fe40 	bl	80066cc <USBD_LL_PrepareReceive>
 8004a4c:	e007      	b.n	8004a5e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a54:	2340      	movs	r3, #64	; 0x40
 8004a56:	2101      	movs	r1, #1
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f001 fe37 	bl	80066cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	4613      	mov	r3, r2
 8004a74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e01f      	b.n	8004ac0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	79fa      	ldrb	r2, [r7, #7]
 8004ab2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f001 fcaf 	bl	8006418 <USBD_LL_Init>
 8004aba:	4603      	mov	r3, r0
 8004abc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3718      	adds	r7, #24
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d101      	bne.n	8004ae0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e016      	b.n	8004b0e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d00b      	beq.n	8004b0c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	f107 020e 	add.w	r2, r7, #14
 8004b00:	4610      	mov	r0, r2
 8004b02:	4798      	blx	r3
 8004b04:	4602      	mov	r2, r0
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f001 fcca 	bl	80064b8 <USBD_LL_Start>
 8004b24:	4603      	mov	r3, r0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3708      	adds	r7, #8
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}

08004b2e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004b50:	2303      	movs	r3, #3
 8004b52:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d009      	beq.n	8004b72 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	78fa      	ldrb	r2, [r7, #3]
 8004b68:	4611      	mov	r1, r2
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
 8004b6e:	4603      	mov	r3, r0
 8004b70:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	460b      	mov	r3, r1
 8004b86:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d007      	beq.n	8004ba2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	78fa      	ldrb	r2, [r7, #3]
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	4798      	blx	r3
  }

  return USBD_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004bbc:	6839      	ldr	r1, [r7, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f000 ffba 	bl	8005b38 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d01a      	beq.n	8004c1e <USBD_LL_SetupStage+0x72>
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d822      	bhi.n	8004c32 <USBD_LL_SetupStage+0x86>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <USBD_LL_SetupStage+0x4a>
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d00a      	beq.n	8004c0a <USBD_LL_SetupStage+0x5e>
 8004bf4:	e01d      	b.n	8004c32 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa62 	bl	80050c8 <USBD_StdDevReq>
 8004c04:	4603      	mov	r3, r0
 8004c06:	73fb      	strb	r3, [r7, #15]
      break;
 8004c08:	e020      	b.n	8004c4c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c10:	4619      	mov	r1, r3
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fac6 	bl	80051a4 <USBD_StdItfReq>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c1c:	e016      	b.n	8004c4c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c24:	4619      	mov	r1, r3
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 fb05 	bl	8005236 <USBD_StdEPReq>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c30:	e00c      	b.n	8004c4c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004c38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f001 fc99 	bl	8006578 <USBD_LL_StallEP>
 8004c46:	4603      	mov	r3, r0
 8004c48:	73fb      	strb	r3, [r7, #15]
      break;
 8004c4a:	bf00      	nop
  }

  return ret;
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b086      	sub	sp, #24
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	607a      	str	r2, [r7, #4]
 8004c62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004c64:	7afb      	ldrb	r3, [r7, #11]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d138      	bne.n	8004cdc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004c70:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d14a      	bne.n	8004d12 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	689a      	ldr	r2, [r3, #8]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d913      	bls.n	8004cb0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	1ad2      	subs	r2, r2, r3
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	68da      	ldr	r2, [r3, #12]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	bf28      	it	cs
 8004ca2:	4613      	movcs	r3, r2
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f001 f839 	bl	8005d20 <USBD_CtlContinueRx>
 8004cae:	e030      	b.n	8004d12 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b03      	cmp	r3, #3
 8004cba:	d10b      	bne.n	8004cd4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d005      	beq.n	8004cd4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f001 f834 	bl	8005d42 <USBD_CtlSendStatus>
 8004cda:	e01a      	b.n	8004d12 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d114      	bne.n	8004d12 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00e      	beq.n	8004d12 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	7afa      	ldrb	r2, [r7, #11]
 8004cfe:	4611      	mov	r1, r2
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	4798      	blx	r3
 8004d04:	4603      	mov	r3, r0
 8004d06:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
 8004d10:	e000      	b.n	8004d14 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	460b      	mov	r3, r1
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004d2a:	7afb      	ldrb	r3, [r7, #11]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d16b      	bne.n	8004e08 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	3314      	adds	r3, #20
 8004d34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d156      	bne.n	8004dee <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d914      	bls.n	8004d76 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	1ad2      	subs	r2, r2, r3
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	6879      	ldr	r1, [r7, #4]
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f000 ffae 	bl	8005cc4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f001 fcac 	bl	80066cc <USBD_LL_PrepareReceive>
 8004d74:	e03b      	b.n	8004dee <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d11c      	bne.n	8004dbc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d316      	bcc.n	8004dbc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d20f      	bcs.n	8004dbc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2100      	movs	r1, #0
 8004da0:	68f8      	ldr	r0, [r7, #12]
 8004da2:	f000 ff8f 	bl	8005cc4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004dae:	2300      	movs	r3, #0
 8004db0:	2200      	movs	r2, #0
 8004db2:	2100      	movs	r1, #0
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f001 fc89 	bl	80066cc <USBD_LL_PrepareReceive>
 8004dba:	e018      	b.n	8004dee <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d10b      	bne.n	8004de0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004de0:	2180      	movs	r1, #128	; 0x80
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f001 fbc8 	bl	8006578 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f000 ffbd 	bl	8005d68 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d122      	bne.n	8004e3e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004df8:	68f8      	ldr	r0, [r7, #12]
 8004dfa:	f7ff fe98 	bl	8004b2e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004e06:	e01a      	b.n	8004e3e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d114      	bne.n	8004e3e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00e      	beq.n	8004e3e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	7afa      	ldrb	r2, [r7, #11]
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	4798      	blx	r3
 8004e30:	4603      	mov	r3, r0
 8004e32:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8004e3a:	7dfb      	ldrb	r3, [r7, #23]
 8004e3c:	e000      	b.n	8004e40 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	e02f      	b.n	8004edc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00f      	beq.n	8004ea6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6852      	ldr	r2, [r2, #4]
 8004e9e:	b2d2      	uxtb	r2, r2
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ea6:	2340      	movs	r3, #64	; 0x40
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2100      	movs	r1, #0
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f001 fb1e 	bl	80064ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2240      	movs	r2, #64	; 0x40
 8004ebe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ec2:	2340      	movs	r3, #64	; 0x40
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	2180      	movs	r1, #128	; 0x80
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f001 fb10 	bl	80064ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2240      	movs	r2, #64	; 0x40
 8004ed8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	78fa      	ldrb	r2, [r7, #3]
 8004ef4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f12:	b2da      	uxtb	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2204      	movs	r2, #4
 8004f1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d106      	bne.n	8004f52 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d101      	bne.n	8004f76 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e012      	b.n	8004f9c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d10b      	bne.n	8004f9a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f88:	69db      	ldr	r3, [r3, #28]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	460b      	mov	r3, r1
 8004fae:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e014      	b.n	8004fe8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b03      	cmp	r3, #3
 8004fc8:	d10d      	bne.n	8004fe6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	78fa      	ldrb	r2, [r7, #3]
 8004fe0:	4611      	mov	r1, r2
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}

08004ff0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005006:	2303      	movs	r3, #3
 8005008:	e014      	b.n	8005034 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b03      	cmp	r3, #3
 8005014:	d10d      	bne.n	8005032 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	d007      	beq.n	8005032 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	78fa      	ldrb	r2, [r7, #3]
 800502c:	4611      	mov	r1, r2
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b082      	sub	sp, #8
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005068:	2b00      	cmp	r3, #0
 800506a:	d009      	beq.n	8005080 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6852      	ldr	r2, [r2, #4]
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	4611      	mov	r1, r2
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	4798      	blx	r3
  }

  return USBD_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800508a:	b480      	push	{r7}
 800508c:	b087      	sub	sp, #28
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	3301      	adds	r3, #1
 80050a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80050a8:	8a3b      	ldrh	r3, [r7, #16]
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	b21a      	sxth	r2, r3
 80050ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	b21b      	sxth	r3, r3
 80050b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80050b8:	89fb      	ldrh	r3, [r7, #14]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	371c      	adds	r7, #28
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
	...

080050c8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050de:	2b40      	cmp	r3, #64	; 0x40
 80050e0:	d005      	beq.n	80050ee <USBD_StdDevReq+0x26>
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	d853      	bhi.n	800518e <USBD_StdDevReq+0xc6>
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00b      	beq.n	8005102 <USBD_StdDevReq+0x3a>
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	d14f      	bne.n	800518e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	6839      	ldr	r1, [r7, #0]
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	4798      	blx	r3
 80050fc:	4603      	mov	r3, r0
 80050fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005100:	e04a      	b.n	8005198 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	785b      	ldrb	r3, [r3, #1]
 8005106:	2b09      	cmp	r3, #9
 8005108:	d83b      	bhi.n	8005182 <USBD_StdDevReq+0xba>
 800510a:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <USBD_StdDevReq+0x48>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	08005165 	.word	0x08005165
 8005114:	08005179 	.word	0x08005179
 8005118:	08005183 	.word	0x08005183
 800511c:	0800516f 	.word	0x0800516f
 8005120:	08005183 	.word	0x08005183
 8005124:	08005143 	.word	0x08005143
 8005128:	08005139 	.word	0x08005139
 800512c:	08005183 	.word	0x08005183
 8005130:	0800515b 	.word	0x0800515b
 8005134:	0800514d 	.word	0x0800514d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005138:	6839      	ldr	r1, [r7, #0]
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f9de 	bl	80054fc <USBD_GetDescriptor>
          break;
 8005140:	e024      	b.n	800518c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 fb6d 	bl	8005824 <USBD_SetAddress>
          break;
 800514a:	e01f      	b.n	800518c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800514c:	6839      	ldr	r1, [r7, #0]
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fbac 	bl	80058ac <USBD_SetConfig>
 8005154:	4603      	mov	r3, r0
 8005156:	73fb      	strb	r3, [r7, #15]
          break;
 8005158:	e018      	b.n	800518c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800515a:	6839      	ldr	r1, [r7, #0]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fc4b 	bl	80059f8 <USBD_GetConfig>
          break;
 8005162:	e013      	b.n	800518c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005164:	6839      	ldr	r1, [r7, #0]
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fc7c 	bl	8005a64 <USBD_GetStatus>
          break;
 800516c:	e00e      	b.n	800518c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800516e:	6839      	ldr	r1, [r7, #0]
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 fcab 	bl	8005acc <USBD_SetFeature>
          break;
 8005176:	e009      	b.n	800518c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005178:	6839      	ldr	r1, [r7, #0]
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fcba 	bl	8005af4 <USBD_ClrFeature>
          break;
 8005180:	e004      	b.n	800518c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005182:	6839      	ldr	r1, [r7, #0]
 8005184:	6878      	ldr	r0, [r7, #4]
 8005186:	f000 fd11 	bl	8005bac <USBD_CtlError>
          break;
 800518a:	bf00      	nop
      }
      break;
 800518c:	e004      	b.n	8005198 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800518e:	6839      	ldr	r1, [r7, #0]
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fd0b 	bl	8005bac <USBD_CtlError>
      break;
 8005196:	bf00      	nop
  }

  return ret;
 8005198:	7bfb      	ldrb	r3, [r7, #15]
}
 800519a:	4618      	mov	r0, r3
 800519c:	3710      	adds	r7, #16
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop

080051a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b084      	sub	sp, #16
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051ba:	2b40      	cmp	r3, #64	; 0x40
 80051bc:	d005      	beq.n	80051ca <USBD_StdItfReq+0x26>
 80051be:	2b40      	cmp	r3, #64	; 0x40
 80051c0:	d82f      	bhi.n	8005222 <USBD_StdItfReq+0x7e>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <USBD_StdItfReq+0x26>
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d12b      	bne.n	8005222 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	3b01      	subs	r3, #1
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d81d      	bhi.n	8005214 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	889b      	ldrh	r3, [r3, #4]
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d813      	bhi.n	800520a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	4798      	blx	r3
 80051f0:	4603      	mov	r3, r0
 80051f2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	88db      	ldrh	r3, [r3, #6]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d110      	bne.n	800521e <USBD_StdItfReq+0x7a>
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10d      	bne.n	800521e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 fd9d 	bl	8005d42 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005208:	e009      	b.n	800521e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 fccd 	bl	8005bac <USBD_CtlError>
          break;
 8005212:	e004      	b.n	800521e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fcc8 	bl	8005bac <USBD_CtlError>
          break;
 800521c:	e000      	b.n	8005220 <USBD_StdItfReq+0x7c>
          break;
 800521e:	bf00      	nop
      }
      break;
 8005220:	e004      	b.n	800522c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005222:	6839      	ldr	r1, [r7, #0]
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fcc1 	bl	8005bac <USBD_CtlError>
      break;
 800522a:	bf00      	nop
  }

  return ret;
 800522c:	7bfb      	ldrb	r3, [r7, #15]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b084      	sub	sp, #16
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	889b      	ldrh	r3, [r3, #4]
 8005248:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005252:	2b40      	cmp	r3, #64	; 0x40
 8005254:	d007      	beq.n	8005266 <USBD_StdEPReq+0x30>
 8005256:	2b40      	cmp	r3, #64	; 0x40
 8005258:	f200 8145 	bhi.w	80054e6 <USBD_StdEPReq+0x2b0>
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00c      	beq.n	800527a <USBD_StdEPReq+0x44>
 8005260:	2b20      	cmp	r3, #32
 8005262:	f040 8140 	bne.w	80054e6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	6839      	ldr	r1, [r7, #0]
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	4798      	blx	r3
 8005274:	4603      	mov	r3, r0
 8005276:	73fb      	strb	r3, [r7, #15]
      break;
 8005278:	e13a      	b.n	80054f0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	785b      	ldrb	r3, [r3, #1]
 800527e:	2b03      	cmp	r3, #3
 8005280:	d007      	beq.n	8005292 <USBD_StdEPReq+0x5c>
 8005282:	2b03      	cmp	r3, #3
 8005284:	f300 8129 	bgt.w	80054da <USBD_StdEPReq+0x2a4>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d07f      	beq.n	800538c <USBD_StdEPReq+0x156>
 800528c:	2b01      	cmp	r3, #1
 800528e:	d03c      	beq.n	800530a <USBD_StdEPReq+0xd4>
 8005290:	e123      	b.n	80054da <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b02      	cmp	r3, #2
 800529c:	d002      	beq.n	80052a4 <USBD_StdEPReq+0x6e>
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d016      	beq.n	80052d0 <USBD_StdEPReq+0x9a>
 80052a2:	e02c      	b.n	80052fe <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052a4:	7bbb      	ldrb	r3, [r7, #14]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00d      	beq.n	80052c6 <USBD_StdEPReq+0x90>
 80052aa:	7bbb      	ldrb	r3, [r7, #14]
 80052ac:	2b80      	cmp	r3, #128	; 0x80
 80052ae:	d00a      	beq.n	80052c6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80052b0:	7bbb      	ldrb	r3, [r7, #14]
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f001 f95f 	bl	8006578 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80052ba:	2180      	movs	r1, #128	; 0x80
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f001 f95b 	bl	8006578 <USBD_LL_StallEP>
 80052c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80052c4:	e020      	b.n	8005308 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80052c6:	6839      	ldr	r1, [r7, #0]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fc6f 	bl	8005bac <USBD_CtlError>
              break;
 80052ce:	e01b      	b.n	8005308 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	885b      	ldrh	r3, [r3, #2]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10e      	bne.n	80052f6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80052d8:	7bbb      	ldrb	r3, [r7, #14]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <USBD_StdEPReq+0xc0>
 80052de:	7bbb      	ldrb	r3, [r7, #14]
 80052e0:	2b80      	cmp	r3, #128	; 0x80
 80052e2:	d008      	beq.n	80052f6 <USBD_StdEPReq+0xc0>
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	88db      	ldrh	r3, [r3, #6]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80052ec:	7bbb      	ldrb	r3, [r7, #14]
 80052ee:	4619      	mov	r1, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 f941 	bl	8006578 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fd23 	bl	8005d42 <USBD_CtlSendStatus>

              break;
 80052fc:	e004      	b.n	8005308 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fc53 	bl	8005bac <USBD_CtlError>
              break;
 8005306:	bf00      	nop
          }
          break;
 8005308:	e0ec      	b.n	80054e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d002      	beq.n	800531c <USBD_StdEPReq+0xe6>
 8005316:	2b03      	cmp	r3, #3
 8005318:	d016      	beq.n	8005348 <USBD_StdEPReq+0x112>
 800531a:	e030      	b.n	800537e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800531c:	7bbb      	ldrb	r3, [r7, #14]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00d      	beq.n	800533e <USBD_StdEPReq+0x108>
 8005322:	7bbb      	ldrb	r3, [r7, #14]
 8005324:	2b80      	cmp	r3, #128	; 0x80
 8005326:	d00a      	beq.n	800533e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005328:	7bbb      	ldrb	r3, [r7, #14]
 800532a:	4619      	mov	r1, r3
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f001 f923 	bl	8006578 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005332:	2180      	movs	r1, #128	; 0x80
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f001 f91f 	bl	8006578 <USBD_LL_StallEP>
 800533a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800533c:	e025      	b.n	800538a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fc33 	bl	8005bac <USBD_CtlError>
              break;
 8005346:	e020      	b.n	800538a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	885b      	ldrh	r3, [r3, #2]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d11b      	bne.n	8005388 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005350:	7bbb      	ldrb	r3, [r7, #14]
 8005352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005356:	2b00      	cmp	r3, #0
 8005358:	d004      	beq.n	8005364 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800535a:	7bbb      	ldrb	r3, [r7, #14]
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f001 f929 	bl	80065b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fcec 	bl	8005d42 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	6839      	ldr	r1, [r7, #0]
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	4798      	blx	r3
 8005378:	4603      	mov	r3, r0
 800537a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800537c:	e004      	b.n	8005388 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800537e:	6839      	ldr	r1, [r7, #0]
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fc13 	bl	8005bac <USBD_CtlError>
              break;
 8005386:	e000      	b.n	800538a <USBD_StdEPReq+0x154>
              break;
 8005388:	bf00      	nop
          }
          break;
 800538a:	e0ab      	b.n	80054e4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d002      	beq.n	800539e <USBD_StdEPReq+0x168>
 8005398:	2b03      	cmp	r3, #3
 800539a:	d032      	beq.n	8005402 <USBD_StdEPReq+0x1cc>
 800539c:	e097      	b.n	80054ce <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800539e:	7bbb      	ldrb	r3, [r7, #14]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <USBD_StdEPReq+0x17e>
 80053a4:	7bbb      	ldrb	r3, [r7, #14]
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	d004      	beq.n	80053b4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80053aa:	6839      	ldr	r1, [r7, #0]
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 fbfd 	bl	8005bac <USBD_CtlError>
                break;
 80053b2:	e091      	b.n	80054d8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	da0b      	bge.n	80053d4 <USBD_StdEPReq+0x19e>
 80053bc:	7bbb      	ldrb	r3, [r7, #14]
 80053be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	3310      	adds	r3, #16
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	4413      	add	r3, r2
 80053d0:	3304      	adds	r3, #4
 80053d2:	e00b      	b.n	80053ec <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80053d4:	7bbb      	ldrb	r3, [r7, #14]
 80053d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053da:	4613      	mov	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	4413      	add	r3, r2
 80053ea:	3304      	adds	r3, #4
 80053ec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2202      	movs	r2, #2
 80053f8:	4619      	mov	r1, r3
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fc47 	bl	8005c8e <USBD_CtlSendData>
              break;
 8005400:	e06a      	b.n	80054d8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005402:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005406:	2b00      	cmp	r3, #0
 8005408:	da11      	bge.n	800542e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800540a:	7bbb      	ldrb	r3, [r7, #14]
 800540c:	f003 020f 	and.w	r2, r3, #15
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	3324      	adds	r3, #36	; 0x24
 800541e:	881b      	ldrh	r3, [r3, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d117      	bne.n	8005454 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005424:	6839      	ldr	r1, [r7, #0]
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fbc0 	bl	8005bac <USBD_CtlError>
                  break;
 800542c:	e054      	b.n	80054d8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800542e:	7bbb      	ldrb	r3, [r7, #14]
 8005430:	f003 020f 	and.w	r2, r3, #15
 8005434:	6879      	ldr	r1, [r7, #4]
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	440b      	add	r3, r1
 8005440:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005444:	881b      	ldrh	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800544a:	6839      	ldr	r1, [r7, #0]
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 fbad 	bl	8005bac <USBD_CtlError>
                  break;
 8005452:	e041      	b.n	80054d8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005458:	2b00      	cmp	r3, #0
 800545a:	da0b      	bge.n	8005474 <USBD_StdEPReq+0x23e>
 800545c:	7bbb      	ldrb	r3, [r7, #14]
 800545e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	3310      	adds	r3, #16
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	4413      	add	r3, r2
 8005470:	3304      	adds	r3, #4
 8005472:	e00b      	b.n	800548c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005474:	7bbb      	ldrb	r3, [r7, #14]
 8005476:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005486:	687a      	ldr	r2, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	3304      	adds	r3, #4
 800548c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800548e:	7bbb      	ldrb	r3, [r7, #14]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <USBD_StdEPReq+0x264>
 8005494:	7bbb      	ldrb	r3, [r7, #14]
 8005496:	2b80      	cmp	r3, #128	; 0x80
 8005498:	d103      	bne.n	80054a2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	e00e      	b.n	80054c0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80054a2:	7bbb      	ldrb	r3, [r7, #14]
 80054a4:	4619      	mov	r1, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f001 f8a4 	bl	80065f4 <USBD_LL_IsStallEP>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	2201      	movs	r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e002      	b.n	80054c0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2202      	movs	r2, #2
 80054c4:	4619      	mov	r1, r3
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fbe1 	bl	8005c8e <USBD_CtlSendData>
              break;
 80054cc:	e004      	b.n	80054d8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fb6b 	bl	8005bac <USBD_CtlError>
              break;
 80054d6:	bf00      	nop
          }
          break;
 80054d8:	e004      	b.n	80054e4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fb65 	bl	8005bac <USBD_CtlError>
          break;
 80054e2:	bf00      	nop
      }
      break;
 80054e4:	e004      	b.n	80054f0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80054e6:	6839      	ldr	r1, [r7, #0]
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fb5f 	bl	8005bac <USBD_CtlError>
      break;
 80054ee:	bf00      	nop
  }

  return ret;
 80054f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005506:	2300      	movs	r3, #0
 8005508:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	885b      	ldrh	r3, [r3, #2]
 8005516:	0a1b      	lsrs	r3, r3, #8
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	2b0e      	cmp	r3, #14
 800551e:	f200 8152 	bhi.w	80057c6 <USBD_GetDescriptor+0x2ca>
 8005522:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <USBD_GetDescriptor+0x2c>)
 8005524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005528:	08005599 	.word	0x08005599
 800552c:	080055b1 	.word	0x080055b1
 8005530:	080055f1 	.word	0x080055f1
 8005534:	080057c7 	.word	0x080057c7
 8005538:	080057c7 	.word	0x080057c7
 800553c:	08005767 	.word	0x08005767
 8005540:	08005793 	.word	0x08005793
 8005544:	080057c7 	.word	0x080057c7
 8005548:	080057c7 	.word	0x080057c7
 800554c:	080057c7 	.word	0x080057c7
 8005550:	080057c7 	.word	0x080057c7
 8005554:	080057c7 	.word	0x080057c7
 8005558:	080057c7 	.word	0x080057c7
 800555c:	080057c7 	.word	0x080057c7
 8005560:	08005565 	.word	0x08005565
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800556a:	69db      	ldr	r3, [r3, #28]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00b      	beq.n	8005588 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	7c12      	ldrb	r2, [r2, #16]
 800557c:	f107 0108 	add.w	r1, r7, #8
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
 8005584:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005586:	e126      	b.n	80057d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005588:	6839      	ldr	r1, [r7, #0]
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fb0e 	bl	8005bac <USBD_CtlError>
        err++;
 8005590:	7afb      	ldrb	r3, [r7, #11]
 8005592:	3301      	adds	r3, #1
 8005594:	72fb      	strb	r3, [r7, #11]
      break;
 8005596:	e11e      	b.n	80057d6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	7c12      	ldrb	r2, [r2, #16]
 80055a4:	f107 0108 	add.w	r1, r7, #8
 80055a8:	4610      	mov	r0, r2
 80055aa:	4798      	blx	r3
 80055ac:	60f8      	str	r0, [r7, #12]
      break;
 80055ae:	e112      	b.n	80057d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	7c1b      	ldrb	r3, [r3, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10d      	bne.n	80055d4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c0:	f107 0208 	add.w	r2, r7, #8
 80055c4:	4610      	mov	r0, r2
 80055c6:	4798      	blx	r3
 80055c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	3301      	adds	r3, #1
 80055ce:	2202      	movs	r2, #2
 80055d0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80055d2:	e100      	b.n	80057d6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055dc:	f107 0208 	add.w	r2, r7, #8
 80055e0:	4610      	mov	r0, r2
 80055e2:	4798      	blx	r3
 80055e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	3301      	adds	r3, #1
 80055ea:	2202      	movs	r2, #2
 80055ec:	701a      	strb	r2, [r3, #0]
      break;
 80055ee:	e0f2      	b.n	80057d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	885b      	ldrh	r3, [r3, #2]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b05      	cmp	r3, #5
 80055f8:	f200 80ac 	bhi.w	8005754 <USBD_GetDescriptor+0x258>
 80055fc:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <USBD_GetDescriptor+0x108>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	0800561d 	.word	0x0800561d
 8005608:	08005651 	.word	0x08005651
 800560c:	08005685 	.word	0x08005685
 8005610:	080056b9 	.word	0x080056b9
 8005614:	080056ed 	.word	0x080056ed
 8005618:	08005721 	.word	0x08005721
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	7c12      	ldrb	r2, [r2, #16]
 8005634:	f107 0108 	add.w	r1, r7, #8
 8005638:	4610      	mov	r0, r2
 800563a:	4798      	blx	r3
 800563c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800563e:	e091      	b.n	8005764 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005640:	6839      	ldr	r1, [r7, #0]
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fab2 	bl	8005bac <USBD_CtlError>
            err++;
 8005648:	7afb      	ldrb	r3, [r7, #11]
 800564a:	3301      	adds	r3, #1
 800564c:	72fb      	strb	r3, [r7, #11]
          break;
 800564e:	e089      	b.n	8005764 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00b      	beq.n	8005674 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	7c12      	ldrb	r2, [r2, #16]
 8005668:	f107 0108 	add.w	r1, r7, #8
 800566c:	4610      	mov	r0, r2
 800566e:	4798      	blx	r3
 8005670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005672:	e077      	b.n	8005764 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005674:	6839      	ldr	r1, [r7, #0]
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fa98 	bl	8005bac <USBD_CtlError>
            err++;
 800567c:	7afb      	ldrb	r3, [r7, #11]
 800567e:	3301      	adds	r3, #1
 8005680:	72fb      	strb	r3, [r7, #11]
          break;
 8005682:	e06f      	b.n	8005764 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00b      	beq.n	80056a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	7c12      	ldrb	r2, [r2, #16]
 800569c:	f107 0108 	add.w	r1, r7, #8
 80056a0:	4610      	mov	r0, r2
 80056a2:	4798      	blx	r3
 80056a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056a6:	e05d      	b.n	8005764 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80056a8:	6839      	ldr	r1, [r7, #0]
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fa7e 	bl	8005bac <USBD_CtlError>
            err++;
 80056b0:	7afb      	ldrb	r3, [r7, #11]
 80056b2:	3301      	adds	r3, #1
 80056b4:	72fb      	strb	r3, [r7, #11]
          break;
 80056b6:	e055      	b.n	8005764 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00b      	beq.n	80056dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	7c12      	ldrb	r2, [r2, #16]
 80056d0:	f107 0108 	add.w	r1, r7, #8
 80056d4:	4610      	mov	r0, r2
 80056d6:	4798      	blx	r3
 80056d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80056da:	e043      	b.n	8005764 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fa64 	bl	8005bac <USBD_CtlError>
            err++;
 80056e4:	7afb      	ldrb	r3, [r7, #11]
 80056e6:	3301      	adds	r3, #1
 80056e8:	72fb      	strb	r3, [r7, #11]
          break;
 80056ea:	e03b      	b.n	8005764 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00b      	beq.n	8005710 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	7c12      	ldrb	r2, [r2, #16]
 8005704:	f107 0108 	add.w	r1, r7, #8
 8005708:	4610      	mov	r0, r2
 800570a:	4798      	blx	r3
 800570c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800570e:	e029      	b.n	8005764 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005710:	6839      	ldr	r1, [r7, #0]
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 fa4a 	bl	8005bac <USBD_CtlError>
            err++;
 8005718:	7afb      	ldrb	r3, [r7, #11]
 800571a:	3301      	adds	r3, #1
 800571c:	72fb      	strb	r3, [r7, #11]
          break;
 800571e:	e021      	b.n	8005764 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00b      	beq.n	8005744 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	7c12      	ldrb	r2, [r2, #16]
 8005738:	f107 0108 	add.w	r1, r7, #8
 800573c:	4610      	mov	r0, r2
 800573e:	4798      	blx	r3
 8005740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005742:	e00f      	b.n	8005764 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005744:	6839      	ldr	r1, [r7, #0]
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fa30 	bl	8005bac <USBD_CtlError>
            err++;
 800574c:	7afb      	ldrb	r3, [r7, #11]
 800574e:	3301      	adds	r3, #1
 8005750:	72fb      	strb	r3, [r7, #11]
          break;
 8005752:	e007      	b.n	8005764 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005754:	6839      	ldr	r1, [r7, #0]
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fa28 	bl	8005bac <USBD_CtlError>
          err++;
 800575c:	7afb      	ldrb	r3, [r7, #11]
 800575e:	3301      	adds	r3, #1
 8005760:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005762:	bf00      	nop
      }
      break;
 8005764:	e037      	b.n	80057d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7c1b      	ldrb	r3, [r3, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d109      	bne.n	8005782 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005776:	f107 0208 	add.w	r2, r7, #8
 800577a:	4610      	mov	r0, r2
 800577c:	4798      	blx	r3
 800577e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005780:	e029      	b.n	80057d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005782:	6839      	ldr	r1, [r7, #0]
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 fa11 	bl	8005bac <USBD_CtlError>
        err++;
 800578a:	7afb      	ldrb	r3, [r7, #11]
 800578c:	3301      	adds	r3, #1
 800578e:	72fb      	strb	r3, [r7, #11]
      break;
 8005790:	e021      	b.n	80057d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	7c1b      	ldrb	r3, [r3, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10d      	bne.n	80057b6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a2:	f107 0208 	add.w	r2, r7, #8
 80057a6:	4610      	mov	r0, r2
 80057a8:	4798      	blx	r3
 80057aa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3301      	adds	r3, #1
 80057b0:	2207      	movs	r2, #7
 80057b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80057b4:	e00f      	b.n	80057d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80057b6:	6839      	ldr	r1, [r7, #0]
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f9f7 	bl	8005bac <USBD_CtlError>
        err++;
 80057be:	7afb      	ldrb	r3, [r7, #11]
 80057c0:	3301      	adds	r3, #1
 80057c2:	72fb      	strb	r3, [r7, #11]
      break;
 80057c4:	e007      	b.n	80057d6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f9ef 	bl	8005bac <USBD_CtlError>
      err++;
 80057ce:	7afb      	ldrb	r3, [r7, #11]
 80057d0:	3301      	adds	r3, #1
 80057d2:	72fb      	strb	r3, [r7, #11]
      break;
 80057d4:	bf00      	nop
  }

  if (err != 0U)
 80057d6:	7afb      	ldrb	r3, [r7, #11]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d11e      	bne.n	800581a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	88db      	ldrh	r3, [r3, #6]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d016      	beq.n	8005812 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80057e4:	893b      	ldrh	r3, [r7, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00e      	beq.n	8005808 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	88da      	ldrh	r2, [r3, #6]
 80057ee:	893b      	ldrh	r3, [r7, #8]
 80057f0:	4293      	cmp	r3, r2
 80057f2:	bf28      	it	cs
 80057f4:	4613      	movcs	r3, r2
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80057fa:	893b      	ldrh	r3, [r7, #8]
 80057fc:	461a      	mov	r2, r3
 80057fe:	68f9      	ldr	r1, [r7, #12]
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fa44 	bl	8005c8e <USBD_CtlSendData>
 8005806:	e009      	b.n	800581c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005808:	6839      	ldr	r1, [r7, #0]
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f9ce 	bl	8005bac <USBD_CtlError>
 8005810:	e004      	b.n	800581c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa95 	bl	8005d42 <USBD_CtlSendStatus>
 8005818:	e000      	b.n	800581c <USBD_GetDescriptor+0x320>
    return;
 800581a:	bf00      	nop
  }
}
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop

08005824 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	889b      	ldrh	r3, [r3, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d131      	bne.n	800589a <USBD_SetAddress+0x76>
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	88db      	ldrh	r3, [r3, #6]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d12d      	bne.n	800589a <USBD_SetAddress+0x76>
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	885b      	ldrh	r3, [r3, #2]
 8005842:	2b7f      	cmp	r3, #127	; 0x7f
 8005844:	d829      	bhi.n	800589a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	885b      	ldrh	r3, [r3, #2]
 800584a:	b2db      	uxtb	r3, r3
 800584c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005850:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b03      	cmp	r3, #3
 800585c:	d104      	bne.n	8005868 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800585e:	6839      	ldr	r1, [r7, #0]
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f9a3 	bl	8005bac <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005866:	e01d      	b.n	80058a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	7bfa      	ldrb	r2, [r7, #15]
 800586c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	4619      	mov	r1, r3
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 fee9 	bl	800664c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fa61 	bl	8005d42 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d004      	beq.n	8005890 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2202      	movs	r2, #2
 800588a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800588e:	e009      	b.n	80058a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005898:	e004      	b.n	80058a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800589a:	6839      	ldr	r1, [r7, #0]
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f985 	bl	8005bac <USBD_CtlError>
  }
}
 80058a2:	bf00      	nop
 80058a4:	bf00      	nop
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	885b      	ldrh	r3, [r3, #2]
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	4b4c      	ldr	r3, [pc, #304]	; (80059f4 <USBD_SetConfig+0x148>)
 80058c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80058c4:	4b4b      	ldr	r3, [pc, #300]	; (80059f4 <USBD_SetConfig+0x148>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d905      	bls.n	80058d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80058cc:	6839      	ldr	r1, [r7, #0]
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f96c 	bl	8005bac <USBD_CtlError>
    return USBD_FAIL;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e088      	b.n	80059ea <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d002      	beq.n	80058ea <USBD_SetConfig+0x3e>
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d025      	beq.n	8005934 <USBD_SetConfig+0x88>
 80058e8:	e071      	b.n	80059ce <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80058ea:	4b42      	ldr	r3, [pc, #264]	; (80059f4 <USBD_SetConfig+0x148>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d01c      	beq.n	800592c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80058f2:	4b40      	ldr	r3, [pc, #256]	; (80059f4 <USBD_SetConfig+0x148>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80058fc:	4b3d      	ldr	r3, [pc, #244]	; (80059f4 <USBD_SetConfig+0x148>)
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff f91e 	bl	8004b44 <USBD_SetClassConfig>
 8005908:	4603      	mov	r3, r0
 800590a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800590c:	7bfb      	ldrb	r3, [r7, #15]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d004      	beq.n	800591c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f949 	bl	8005bac <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800591a:	e065      	b.n	80059e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fa10 	bl	8005d42 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2203      	movs	r2, #3
 8005926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800592a:	e05d      	b.n	80059e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fa08 	bl	8005d42 <USBD_CtlSendStatus>
      break;
 8005932:	e059      	b.n	80059e8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005934:	4b2f      	ldr	r3, [pc, #188]	; (80059f4 <USBD_SetConfig+0x148>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d112      	bne.n	8005962 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005944:	4b2b      	ldr	r3, [pc, #172]	; (80059f4 <USBD_SetConfig+0x148>)
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800594e:	4b29      	ldr	r3, [pc, #164]	; (80059f4 <USBD_SetConfig+0x148>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	4619      	mov	r1, r3
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7ff f911 	bl	8004b7c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f9f1 	bl	8005d42 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005960:	e042      	b.n	80059e8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8005962:	4b24      	ldr	r3, [pc, #144]	; (80059f4 <USBD_SetConfig+0x148>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	429a      	cmp	r2, r3
 800596e:	d02a      	beq.n	80059c6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff f8ff 	bl	8004b7c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800597e:	4b1d      	ldr	r3, [pc, #116]	; (80059f4 <USBD_SetConfig+0x148>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005988:	4b1a      	ldr	r3, [pc, #104]	; (80059f4 <USBD_SetConfig+0x148>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff f8d8 	bl	8004b44 <USBD_SetClassConfig>
 8005994:	4603      	mov	r3, r0
 8005996:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00f      	beq.n	80059be <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 f903 	bl	8005bac <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff f8e4 	bl	8004b7c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80059bc:	e014      	b.n	80059e8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f9bf 	bl	8005d42 <USBD_CtlSendStatus>
      break;
 80059c4:	e010      	b.n	80059e8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 f9bb 	bl	8005d42 <USBD_CtlSendStatus>
      break;
 80059cc:	e00c      	b.n	80059e8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80059ce:	6839      	ldr	r1, [r7, #0]
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f8eb 	bl	8005bac <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80059d6:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <USBD_SetConfig+0x148>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff f8cd 	bl	8004b7c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80059e2:	2303      	movs	r3, #3
 80059e4:	73fb      	strb	r3, [r7, #15]
      break;
 80059e6:	bf00      	nop
  }

  return ret;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	200001ac 	.word	0x200001ac

080059f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	88db      	ldrh	r3, [r3, #6]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d004      	beq.n	8005a14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 f8cd 	bl	8005bac <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005a12:	e023      	b.n	8005a5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	dc02      	bgt.n	8005a26 <USBD_GetConfig+0x2e>
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	dc03      	bgt.n	8005a2c <USBD_GetConfig+0x34>
 8005a24:	e015      	b.n	8005a52 <USBD_GetConfig+0x5a>
 8005a26:	2b03      	cmp	r3, #3
 8005a28:	d00b      	beq.n	8005a42 <USBD_GetConfig+0x4a>
 8005a2a:	e012      	b.n	8005a52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	3308      	adds	r3, #8
 8005a36:	2201      	movs	r2, #1
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f927 	bl	8005c8e <USBD_CtlSendData>
        break;
 8005a40:	e00c      	b.n	8005a5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3304      	adds	r3, #4
 8005a46:	2201      	movs	r2, #1
 8005a48:	4619      	mov	r1, r3
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 f91f 	bl	8005c8e <USBD_CtlSendData>
        break;
 8005a50:	e004      	b.n	8005a5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f8a9 	bl	8005bac <USBD_CtlError>
        break;
 8005a5a:	bf00      	nop
}
 8005a5c:	bf00      	nop
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b082      	sub	sp, #8
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	3b01      	subs	r3, #1
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d81e      	bhi.n	8005aba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	88db      	ldrh	r3, [r3, #6]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d004      	beq.n	8005a8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f890 	bl	8005bac <USBD_CtlError>
        break;
 8005a8c:	e01a      	b.n	8005ac4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f043 0202 	orr.w	r2, r3, #2
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	330c      	adds	r3, #12
 8005aae:	2202      	movs	r2, #2
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f8eb 	bl	8005c8e <USBD_CtlSendData>
      break;
 8005ab8:	e004      	b.n	8005ac4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005aba:	6839      	ldr	r1, [r7, #0]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f875 	bl	8005bac <USBD_CtlError>
      break;
 8005ac2:	bf00      	nop
  }
}
 8005ac4:	bf00      	nop
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	885b      	ldrh	r3, [r3, #2]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d106      	bne.n	8005aec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f92b 	bl	8005d42 <USBD_CtlSendStatus>
  }
}
 8005aec:	bf00      	nop
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	3b01      	subs	r3, #1
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d80b      	bhi.n	8005b24 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	885b      	ldrh	r3, [r3, #2]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d10c      	bne.n	8005b2e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f910 	bl	8005d42 <USBD_CtlSendStatus>
      }
      break;
 8005b22:	e004      	b.n	8005b2e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005b24:	6839      	ldr	r1, [r7, #0]
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f840 	bl	8005bac <USBD_CtlError>
      break;
 8005b2c:	e000      	b.n	8005b30 <USBD_ClrFeature+0x3c>
      break;
 8005b2e:	bf00      	nop
  }
}
 8005b30:	bf00      	nop
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	781a      	ldrb	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3301      	adds	r3, #1
 8005b52:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	781a      	ldrb	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	3301      	adds	r3, #1
 8005b60:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f7ff fa91 	bl	800508a <SWAPBYTE>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3301      	adds	r3, #1
 8005b74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f7ff fa84 	bl	800508a <SWAPBYTE>
 8005b82:	4603      	mov	r3, r0
 8005b84:	461a      	mov	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	3301      	adds	r3, #1
 8005b94:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff fa77 	bl	800508a <SWAPBYTE>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	80da      	strh	r2, [r3, #6]
}
 8005ba4:	bf00      	nop
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bb6:	2180      	movs	r1, #128	; 0x80
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fcdd 	bl	8006578 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fcd9 	bl	8006578 <USBD_LL_StallEP>
}
 8005bc6:	bf00      	nop
 8005bc8:	3708      	adds	r7, #8
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b086      	sub	sp, #24
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	60f8      	str	r0, [r7, #12]
 8005bd6:	60b9      	str	r1, [r7, #8]
 8005bd8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d036      	beq.n	8005c52 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005be8:	6938      	ldr	r0, [r7, #16]
 8005bea:	f000 f836 	bl	8005c5a <USBD_GetLen>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005bfc:	7dfb      	ldrb	r3, [r7, #23]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	4413      	add	r3, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	7812      	ldrb	r2, [r2, #0]
 8005c06:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c08:	7dfb      	ldrb	r3, [r7, #23]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
 8005c10:	68ba      	ldr	r2, [r7, #8]
 8005c12:	4413      	add	r3, r2
 8005c14:	2203      	movs	r2, #3
 8005c16:	701a      	strb	r2, [r3, #0]
  idx++;
 8005c18:	7dfb      	ldrb	r3, [r7, #23]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005c1e:	e013      	b.n	8005c48 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	4413      	add	r3, r2
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	7812      	ldrb	r2, [r2, #0]
 8005c2a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	613b      	str	r3, [r7, #16]
    idx++;
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
 8005c34:	3301      	adds	r3, #1
 8005c36:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	2200      	movs	r2, #0
 8005c40:	701a      	strb	r2, [r3, #0]
    idx++;
 8005c42:	7dfb      	ldrb	r3, [r7, #23]
 8005c44:	3301      	adds	r3, #1
 8005c46:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e7      	bne.n	8005c20 <USBD_GetString+0x52>
 8005c50:	e000      	b.n	8005c54 <USBD_GetString+0x86>
    return;
 8005c52:	bf00      	nop
  }
}
 8005c54:	3718      	adds	r7, #24
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b085      	sub	sp, #20
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005c6a:	e005      	b.n	8005c78 <USBD_GetLen+0x1e>
  {
    len++;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	3301      	adds	r3, #1
 8005c76:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1f5      	bne.n	8005c6c <USBD_GetLen+0x12>
  }

  return len;
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b084      	sub	sp, #16
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	60f8      	str	r0, [r7, #12]
 8005c96:	60b9      	str	r1, [r7, #8]
 8005c98:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f000 fce8 	bl	800668a <USBD_LL_Transmit>

  return USBD_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3710      	adds	r7, #16
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f000 fcd7 	bl	800668a <USBD_LL_Transmit>

  return USBD_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	2100      	movs	r1, #0
 8005d10:	68f8      	ldr	r0, [r7, #12]
 8005d12:	f000 fcdb 	bl	80066cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	2100      	movs	r1, #0
 8005d32:	68f8      	ldr	r0, [r7, #12]
 8005d34:	f000 fcca 	bl	80066cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2204      	movs	r2, #4
 8005d4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005d52:	2300      	movs	r3, #0
 8005d54:	2200      	movs	r2, #0
 8005d56:	2100      	movs	r1, #0
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 fc96 	bl	800668a <USBD_LL_Transmit>

  return USBD_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2205      	movs	r2, #5
 8005d74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d78:	2300      	movs	r3, #0
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fca4 	bl	80066cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005d94:	2200      	movs	r2, #0
 8005d96:	4912      	ldr	r1, [pc, #72]	; (8005de0 <MX_USB_DEVICE_Init+0x50>)
 8005d98:	4812      	ldr	r0, [pc, #72]	; (8005de4 <MX_USB_DEVICE_Init+0x54>)
 8005d9a:	f7fe fe65 	bl	8004a68 <USBD_Init>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005da4:	f7fa fc48 	bl	8000638 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005da8:	490f      	ldr	r1, [pc, #60]	; (8005de8 <MX_USB_DEVICE_Init+0x58>)
 8005daa:	480e      	ldr	r0, [pc, #56]	; (8005de4 <MX_USB_DEVICE_Init+0x54>)
 8005dac:	f7fe fe8c 	bl	8004ac8 <USBD_RegisterClass>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005db6:	f7fa fc3f 	bl	8000638 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005dba:	490c      	ldr	r1, [pc, #48]	; (8005dec <MX_USB_DEVICE_Init+0x5c>)
 8005dbc:	4809      	ldr	r0, [pc, #36]	; (8005de4 <MX_USB_DEVICE_Init+0x54>)
 8005dbe:	f7fe fddd 	bl	800497c <USBD_CDC_RegisterInterface>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005dc8:	f7fa fc36 	bl	8000638 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005dcc:	4805      	ldr	r0, [pc, #20]	; (8005de4 <MX_USB_DEVICE_Init+0x54>)
 8005dce:	f7fe fea2 	bl	8004b16 <USBD_Start>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d001      	beq.n	8005ddc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005dd8:	f7fa fc2e 	bl	8000638 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005ddc:	bf00      	nop
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20000130 	.word	0x20000130
 8005de4:	200003d4 	.word	0x200003d4
 8005de8:	20000018 	.word	0x20000018
 8005dec:	2000011c 	.word	0x2000011c

08005df0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005df4:	2200      	movs	r2, #0
 8005df6:	4905      	ldr	r1, [pc, #20]	; (8005e0c <CDC_Init_FS+0x1c>)
 8005df8:	4805      	ldr	r0, [pc, #20]	; (8005e10 <CDC_Init_FS+0x20>)
 8005dfa:	f7fe fdd4 	bl	80049a6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005dfe:	4905      	ldr	r1, [pc, #20]	; (8005e14 <CDC_Init_FS+0x24>)
 8005e00:	4803      	ldr	r0, [pc, #12]	; (8005e10 <CDC_Init_FS+0x20>)
 8005e02:	f7fe fdee 	bl	80049e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005e06:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20000ea4 	.word	0x20000ea4
 8005e10:	200003d4 	.word	0x200003d4
 8005e14:	200006a4 	.word	0x200006a4

08005e18 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005e1c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	6039      	str	r1, [r7, #0]
 8005e32:	71fb      	strb	r3, [r7, #7]
 8005e34:	4613      	mov	r3, r2
 8005e36:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	2b23      	cmp	r3, #35	; 0x23
 8005e3c:	d84a      	bhi.n	8005ed4 <CDC_Control_FS+0xac>
 8005e3e:	a201      	add	r2, pc, #4	; (adr r2, 8005e44 <CDC_Control_FS+0x1c>)
 8005e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e44:	08005ed5 	.word	0x08005ed5
 8005e48:	08005ed5 	.word	0x08005ed5
 8005e4c:	08005ed5 	.word	0x08005ed5
 8005e50:	08005ed5 	.word	0x08005ed5
 8005e54:	08005ed5 	.word	0x08005ed5
 8005e58:	08005ed5 	.word	0x08005ed5
 8005e5c:	08005ed5 	.word	0x08005ed5
 8005e60:	08005ed5 	.word	0x08005ed5
 8005e64:	08005ed5 	.word	0x08005ed5
 8005e68:	08005ed5 	.word	0x08005ed5
 8005e6c:	08005ed5 	.word	0x08005ed5
 8005e70:	08005ed5 	.word	0x08005ed5
 8005e74:	08005ed5 	.word	0x08005ed5
 8005e78:	08005ed5 	.word	0x08005ed5
 8005e7c:	08005ed5 	.word	0x08005ed5
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	08005ed5 	.word	0x08005ed5
 8005e88:	08005ed5 	.word	0x08005ed5
 8005e8c:	08005ed5 	.word	0x08005ed5
 8005e90:	08005ed5 	.word	0x08005ed5
 8005e94:	08005ed5 	.word	0x08005ed5
 8005e98:	08005ed5 	.word	0x08005ed5
 8005e9c:	08005ed5 	.word	0x08005ed5
 8005ea0:	08005ed5 	.word	0x08005ed5
 8005ea4:	08005ed5 	.word	0x08005ed5
 8005ea8:	08005ed5 	.word	0x08005ed5
 8005eac:	08005ed5 	.word	0x08005ed5
 8005eb0:	08005ed5 	.word	0x08005ed5
 8005eb4:	08005ed5 	.word	0x08005ed5
 8005eb8:	08005ed5 	.word	0x08005ed5
 8005ebc:	08005ed5 	.word	0x08005ed5
 8005ec0:	08005ed5 	.word	0x08005ed5
 8005ec4:	08005ed5 	.word	0x08005ed5
 8005ec8:	08005ed5 	.word	0x08005ed5
 8005ecc:	08005ed5 	.word	0x08005ed5
 8005ed0:	08005ed5 	.word	0x08005ed5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005ed4:	bf00      	nop
  }

  return (USBD_OK);
 8005ed6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4805      	ldr	r0, [pc, #20]	; (8005f08 <CDC_Receive_FS+0x24>)
 8005ef2:	f7fe fd76 	bl	80049e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005ef6:	4804      	ldr	r0, [pc, #16]	; (8005f08 <CDC_Receive_FS+0x24>)
 8005ef8:	f7fe fd8c 	bl	8004a14 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005efc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	200003d4 	.word	0x200003d4

08005f0c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b087      	sub	sp, #28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	4613      	mov	r3, r2
 8005f18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005f1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
	...

08005f30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	4603      	mov	r3, r0
 8005f38:	6039      	str	r1, [r7, #0]
 8005f3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2212      	movs	r2, #18
 8005f40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005f42:	4b03      	ldr	r3, [pc, #12]	; (8005f50 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr
 8005f50:	20000150 	.word	0x20000150

08005f54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	6039      	str	r1, [r7, #0]
 8005f5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2204      	movs	r2, #4
 8005f64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005f66:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	20000170 	.word	0x20000170

08005f78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	4603      	mov	r3, r0
 8005f80:	6039      	str	r1, [r7, #0]
 8005f82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005f84:	79fb      	ldrb	r3, [r7, #7]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d105      	bne.n	8005f96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	4907      	ldr	r1, [pc, #28]	; (8005fac <USBD_FS_ProductStrDescriptor+0x34>)
 8005f8e:	4808      	ldr	r0, [pc, #32]	; (8005fb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f90:	f7ff fe1d 	bl	8005bce <USBD_GetString>
 8005f94:	e004      	b.n	8005fa0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	4904      	ldr	r1, [pc, #16]	; (8005fac <USBD_FS_ProductStrDescriptor+0x34>)
 8005f9a:	4805      	ldr	r0, [pc, #20]	; (8005fb0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005f9c:	f7ff fe17 	bl	8005bce <USBD_GetString>
  }
  return USBD_StrDesc;
 8005fa0:	4b02      	ldr	r3, [pc, #8]	; (8005fac <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	200016a4 	.word	0x200016a4
 8005fb0:	080068c8 	.word	0x080068c8

08005fb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	4603      	mov	r3, r0
 8005fbc:	6039      	str	r1, [r7, #0]
 8005fbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	4904      	ldr	r1, [pc, #16]	; (8005fd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005fc4:	4804      	ldr	r0, [pc, #16]	; (8005fd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005fc6:	f7ff fe02 	bl	8005bce <USBD_GetString>
  return USBD_StrDesc;
 8005fca:	4b02      	ldr	r3, [pc, #8]	; (8005fd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	200016a4 	.word	0x200016a4
 8005fd8:	080068e0 	.word	0x080068e0

08005fdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	6039      	str	r1, [r7, #0]
 8005fe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	221a      	movs	r2, #26
 8005fec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005fee:	f000 f855 	bl	800609c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005ff2:	4b02      	ldr	r3, [pc, #8]	; (8005ffc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	20000174 	.word	0x20000174

08006000 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	4603      	mov	r3, r0
 8006008:	6039      	str	r1, [r7, #0]
 800600a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800600c:	79fb      	ldrb	r3, [r7, #7]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d105      	bne.n	800601e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006012:	683a      	ldr	r2, [r7, #0]
 8006014:	4907      	ldr	r1, [pc, #28]	; (8006034 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006016:	4808      	ldr	r0, [pc, #32]	; (8006038 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006018:	f7ff fdd9 	bl	8005bce <USBD_GetString>
 800601c:	e004      	b.n	8006028 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	4904      	ldr	r1, [pc, #16]	; (8006034 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006022:	4805      	ldr	r0, [pc, #20]	; (8006038 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006024:	f7ff fdd3 	bl	8005bce <USBD_GetString>
  }
  return USBD_StrDesc;
 8006028:	4b02      	ldr	r3, [pc, #8]	; (8006034 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	200016a4 	.word	0x200016a4
 8006038:	080068f4 	.word	0x080068f4

0800603c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b082      	sub	sp, #8
 8006040:	af00      	add	r7, sp, #0
 8006042:	4603      	mov	r3, r0
 8006044:	6039      	str	r1, [r7, #0]
 8006046:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006048:	79fb      	ldrb	r3, [r7, #7]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d105      	bne.n	800605a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	4907      	ldr	r1, [pc, #28]	; (8006070 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006052:	4808      	ldr	r0, [pc, #32]	; (8006074 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006054:	f7ff fdbb 	bl	8005bce <USBD_GetString>
 8006058:	e004      	b.n	8006064 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	4904      	ldr	r1, [pc, #16]	; (8006070 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800605e:	4805      	ldr	r0, [pc, #20]	; (8006074 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006060:	f7ff fdb5 	bl	8005bce <USBD_GetString>
  }
  return USBD_StrDesc;
 8006064:	4b02      	ldr	r3, [pc, #8]	; (8006070 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	200016a4 	.word	0x200016a4
 8006074:	08006900 	.word	0x08006900

08006078 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	6039      	str	r1, [r7, #0]
 8006082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	220c      	movs	r2, #12
 8006088:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800608a:	4b03      	ldr	r3, [pc, #12]	; (8006098 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	20000164 	.word	0x20000164

0800609c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80060a2:	4b0f      	ldr	r3, [pc, #60]	; (80060e0 <Get_SerialNum+0x44>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80060a8:	4b0e      	ldr	r3, [pc, #56]	; (80060e4 <Get_SerialNum+0x48>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80060ae:	4b0e      	ldr	r3, [pc, #56]	; (80060e8 <Get_SerialNum+0x4c>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4413      	add	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d009      	beq.n	80060d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80060c2:	2208      	movs	r2, #8
 80060c4:	4909      	ldr	r1, [pc, #36]	; (80060ec <Get_SerialNum+0x50>)
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 f814 	bl	80060f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80060cc:	2204      	movs	r2, #4
 80060ce:	4908      	ldr	r1, [pc, #32]	; (80060f0 <Get_SerialNum+0x54>)
 80060d0:	68b8      	ldr	r0, [r7, #8]
 80060d2:	f000 f80f 	bl	80060f4 <IntToUnicode>
  }
}
 80060d6:	bf00      	nop
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	1fff7a10 	.word	0x1fff7a10
 80060e4:	1fff7a14 	.word	0x1fff7a14
 80060e8:	1fff7a18 	.word	0x1fff7a18
 80060ec:	20000176 	.word	0x20000176
 80060f0:	20000186 	.word	0x20000186

080060f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	4613      	mov	r3, r2
 8006100:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006102:	2300      	movs	r3, #0
 8006104:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006106:	2300      	movs	r3, #0
 8006108:	75fb      	strb	r3, [r7, #23]
 800610a:	e027      	b.n	800615c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	0f1b      	lsrs	r3, r3, #28
 8006110:	2b09      	cmp	r3, #9
 8006112:	d80b      	bhi.n	800612c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	0f1b      	lsrs	r3, r3, #28
 8006118:	b2da      	uxtb	r2, r3
 800611a:	7dfb      	ldrb	r3, [r7, #23]
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	4619      	mov	r1, r3
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	440b      	add	r3, r1
 8006124:	3230      	adds	r2, #48	; 0x30
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	e00a      	b.n	8006142 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	0f1b      	lsrs	r3, r3, #28
 8006130:	b2da      	uxtb	r2, r3
 8006132:	7dfb      	ldrb	r3, [r7, #23]
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	4619      	mov	r1, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	440b      	add	r3, r1
 800613c:	3237      	adds	r2, #55	; 0x37
 800613e:	b2d2      	uxtb	r2, r2
 8006140:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006148:	7dfb      	ldrb	r3, [r7, #23]
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	3301      	adds	r3, #1
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	4413      	add	r3, r2
 8006152:	2200      	movs	r2, #0
 8006154:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006156:	7dfb      	ldrb	r3, [r7, #23]
 8006158:	3301      	adds	r3, #1
 800615a:	75fb      	strb	r3, [r7, #23]
 800615c:	7dfa      	ldrb	r2, [r7, #23]
 800615e:	79fb      	ldrb	r3, [r7, #7]
 8006160:	429a      	cmp	r2, r3
 8006162:	d3d3      	bcc.n	800610c <IntToUnicode+0x18>
  }
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop
 8006168:	371c      	adds	r7, #28
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
	...

08006174 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b098      	sub	sp, #96	; 0x60
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800617c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	605a      	str	r2, [r3, #4]
 8006186:	609a      	str	r2, [r3, #8]
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800618c:	f107 0310 	add.w	r3, r7, #16
 8006190:	223c      	movs	r2, #60	; 0x3c
 8006192:	2100      	movs	r1, #0
 8006194:	4618      	mov	r0, r3
 8006196:	f000 fb83 	bl	80068a0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80061a2:	d148      	bne.n	8006236 <HAL_PCD_MspInit+0xc2>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80061a4:	2320      	movs	r3, #32
 80061a6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80061a8:	2300      	movs	r3, #0
 80061aa:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80061ac:	f107 0310 	add.w	r3, r7, #16
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fc f99d 	bl	80024f0 <HAL_RCCEx_PeriphCLKConfig>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 80061bc:	f7fa fa3c 	bl	8000638 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061c0:	2300      	movs	r3, #0
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	4b1e      	ldr	r3, [pc, #120]	; (8006240 <HAL_PCD_MspInit+0xcc>)
 80061c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c8:	4a1d      	ldr	r2, [pc, #116]	; (8006240 <HAL_PCD_MspInit+0xcc>)
 80061ca:	f043 0301 	orr.w	r3, r3, #1
 80061ce:	6313      	str	r3, [r2, #48]	; 0x30
 80061d0:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <HAL_PCD_MspInit+0xcc>)
 80061d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d4:	f003 0301 	and.w	r3, r3, #1
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80061dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80061e0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e2:	2302      	movs	r3, #2
 80061e4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80061ea:	2303      	movs	r3, #3
 80061ec:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80061ee:	230a      	movs	r3, #10
 80061f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061f2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80061f6:	4619      	mov	r1, r3
 80061f8:	4812      	ldr	r0, [pc, #72]	; (8006244 <HAL_PCD_MspInit+0xd0>)
 80061fa:	f7fa fc63 	bl	8000ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80061fe:	4b10      	ldr	r3, [pc, #64]	; (8006240 <HAL_PCD_MspInit+0xcc>)
 8006200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006202:	4a0f      	ldr	r2, [pc, #60]	; (8006240 <HAL_PCD_MspInit+0xcc>)
 8006204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006208:	6353      	str	r3, [r2, #52]	; 0x34
 800620a:	2300      	movs	r3, #0
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	4b0c      	ldr	r3, [pc, #48]	; (8006240 <HAL_PCD_MspInit+0xcc>)
 8006210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006212:	4a0b      	ldr	r2, [pc, #44]	; (8006240 <HAL_PCD_MspInit+0xcc>)
 8006214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006218:	6453      	str	r3, [r2, #68]	; 0x44
 800621a:	4b09      	ldr	r3, [pc, #36]	; (8006240 <HAL_PCD_MspInit+0xcc>)
 800621c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800621e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006222:	60bb      	str	r3, [r7, #8]
 8006224:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006226:	2200      	movs	r2, #0
 8006228:	2100      	movs	r1, #0
 800622a:	2043      	movs	r0, #67	; 0x43
 800622c:	f7fa fc13 	bl	8000a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006230:	2043      	movs	r0, #67	; 0x43
 8006232:	f7fa fc2c 	bl	8000a8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006236:	bf00      	nop
 8006238:	3760      	adds	r7, #96	; 0x60
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40023800 	.word	0x40023800
 8006244:	40020000 	.word	0x40020000

08006248 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800625c:	4619      	mov	r1, r3
 800625e:	4610      	mov	r0, r2
 8006260:	f7fe fca4 	bl	8004bac <USBD_LL_SetupStage>
}
 8006264:	bf00      	nop
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800627e:	78fa      	ldrb	r2, [r7, #3]
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	4613      	mov	r3, r2
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	1a9b      	subs	r3, r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	440b      	add	r3, r1
 800628c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	4619      	mov	r1, r3
 8006296:	f7fe fcde 	bl	8004c56 <USBD_LL_DataOutStage>
}
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b082      	sub	sp, #8
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	460b      	mov	r3, r1
 80062ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80062b4:	78fa      	ldrb	r2, [r7, #3]
 80062b6:	6879      	ldr	r1, [r7, #4]
 80062b8:	4613      	mov	r3, r2
 80062ba:	00db      	lsls	r3, r3, #3
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	3348      	adds	r3, #72	; 0x48
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	78fb      	ldrb	r3, [r7, #3]
 80062c8:	4619      	mov	r1, r3
 80062ca:	f7fe fd27 	bl	8004d1c <USBD_LL_DataInStage>
}
 80062ce:	bf00      	nop
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b082      	sub	sp, #8
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fe fe3b 	bl	8004f60 <USBD_LL_SOF>
}
 80062ea:	bf00      	nop
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80062fa:	2301      	movs	r3, #1
 80062fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	2b02      	cmp	r3, #2
 8006304:	d001      	beq.n	800630a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006306:	f7fa f997 	bl	8000638 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006310:	7bfa      	ldrb	r2, [r7, #15]
 8006312:	4611      	mov	r1, r2
 8006314:	4618      	mov	r0, r3
 8006316:	f7fe fde5 	bl	8004ee4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006320:	4618      	mov	r0, r3
 8006322:	f7fe fd91 	bl	8004e48 <USBD_LL_Reset>
}
 8006326:	bf00      	nop
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800633e:	4618      	mov	r0, r3
 8006340:	f7fe fde0 	bl	8004f04 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	6812      	ldr	r2, [r2, #0]
 8006352:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006356:	f043 0301 	orr.w	r3, r3, #1
 800635a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d005      	beq.n	8006370 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006364:	4b04      	ldr	r3, [pc, #16]	; (8006378 <HAL_PCD_SuspendCallback+0x48>)
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	4a03      	ldr	r2, [pc, #12]	; (8006378 <HAL_PCD_SuspendCallback+0x48>)
 800636a:	f043 0306 	orr.w	r3, r3, #6
 800636e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	e000ed00 	.word	0xe000ed00

0800637c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fdd0 	bl	8004f30 <USBD_LL_Resume>
}
 8006390:	bf00      	nop
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	460b      	mov	r3, r1
 80063a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063aa:	78fa      	ldrb	r2, [r7, #3]
 80063ac:	4611      	mov	r1, r2
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe fe1e 	bl	8004ff0 <USBD_LL_IsoOUTIncomplete>
}
 80063b4:	bf00      	nop
 80063b6:	3708      	adds	r7, #8
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063ce:	78fa      	ldrb	r2, [r7, #3]
 80063d0:	4611      	mov	r1, r2
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fe fde6 	bl	8004fa4 <USBD_LL_IsoINIncomplete>
}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe fe24 	bl	800503c <USBD_LL_DevConnected>
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800640a:	4618      	mov	r0, r3
 800640c:	f7fe fe21 	bl	8005052 <USBD_LL_DevDisconnected>
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d13f      	bne.n	80064a8 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006428:	4a22      	ldr	r2, [pc, #136]	; (80064b4 <USBD_LL_Init+0x9c>)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a20      	ldr	r2, [pc, #128]	; (80064b4 <USBD_LL_Init+0x9c>)
 8006434:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006438:	4b1e      	ldr	r3, [pc, #120]	; (80064b4 <USBD_LL_Init+0x9c>)
 800643a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800643e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006440:	4b1c      	ldr	r3, [pc, #112]	; (80064b4 <USBD_LL_Init+0x9c>)
 8006442:	2206      	movs	r2, #6
 8006444:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006446:	4b1b      	ldr	r3, [pc, #108]	; (80064b4 <USBD_LL_Init+0x9c>)
 8006448:	2202      	movs	r2, #2
 800644a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800644c:	4b19      	ldr	r3, [pc, #100]	; (80064b4 <USBD_LL_Init+0x9c>)
 800644e:	2200      	movs	r2, #0
 8006450:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006452:	4b18      	ldr	r3, [pc, #96]	; (80064b4 <USBD_LL_Init+0x9c>)
 8006454:	2202      	movs	r2, #2
 8006456:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006458:	4b16      	ldr	r3, [pc, #88]	; (80064b4 <USBD_LL_Init+0x9c>)
 800645a:	2200      	movs	r2, #0
 800645c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800645e:	4b15      	ldr	r3, [pc, #84]	; (80064b4 <USBD_LL_Init+0x9c>)
 8006460:	2200      	movs	r2, #0
 8006462:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006464:	4b13      	ldr	r3, [pc, #76]	; (80064b4 <USBD_LL_Init+0x9c>)
 8006466:	2200      	movs	r2, #0
 8006468:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800646a:	4b12      	ldr	r3, [pc, #72]	; (80064b4 <USBD_LL_Init+0x9c>)
 800646c:	2200      	movs	r2, #0
 800646e:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006470:	4b10      	ldr	r3, [pc, #64]	; (80064b4 <USBD_LL_Init+0x9c>)
 8006472:	2200      	movs	r2, #0
 8006474:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006476:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <USBD_LL_Init+0x9c>)
 8006478:	2200      	movs	r2, #0
 800647a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800647c:	480d      	ldr	r0, [pc, #52]	; (80064b4 <USBD_LL_Init+0x9c>)
 800647e:	f7fa fc95 	bl	8000dac <HAL_PCD_Init>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d001      	beq.n	800648c <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8006488:	f7fa f8d6 	bl	8000638 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800648c:	2180      	movs	r1, #128	; 0x80
 800648e:	4809      	ldr	r0, [pc, #36]	; (80064b4 <USBD_LL_Init+0x9c>)
 8006490:	f7fb fe27 	bl	80020e2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006494:	2240      	movs	r2, #64	; 0x40
 8006496:	2100      	movs	r1, #0
 8006498:	4806      	ldr	r0, [pc, #24]	; (80064b4 <USBD_LL_Init+0x9c>)
 800649a:	f7fb fddb 	bl	8002054 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800649e:	2280      	movs	r2, #128	; 0x80
 80064a0:	2101      	movs	r1, #1
 80064a2:	4804      	ldr	r0, [pc, #16]	; (80064b4 <USBD_LL_Init+0x9c>)
 80064a4:	f7fb fdd6 	bl	8002054 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	200018a4 	.word	0x200018a4

080064b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064c4:	2300      	movs	r3, #0
 80064c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fa fd90 	bl	8000ff4 <HAL_PCD_Start>
 80064d4:	4603      	mov	r3, r0
 80064d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 f990 	bl	8006800 <USBD_Get_USB_Status>
 80064e0:	4603      	mov	r3, r0
 80064e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80064e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	4608      	mov	r0, r1
 80064f8:	4611      	mov	r1, r2
 80064fa:	461a      	mov	r2, r3
 80064fc:	4603      	mov	r3, r0
 80064fe:	70fb      	strb	r3, [r7, #3]
 8006500:	460b      	mov	r3, r1
 8006502:	70bb      	strb	r3, [r7, #2]
 8006504:	4613      	mov	r3, r2
 8006506:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800650c:	2300      	movs	r3, #0
 800650e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006516:	78bb      	ldrb	r3, [r7, #2]
 8006518:	883a      	ldrh	r2, [r7, #0]
 800651a:	78f9      	ldrb	r1, [r7, #3]
 800651c:	f7fb f9a1 	bl	8001862 <HAL_PCD_EP_Open>
 8006520:	4603      	mov	r3, r0
 8006522:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f96a 	bl	8006800 <USBD_Get_USB_Status>
 800652c:	4603      	mov	r3, r0
 800652e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006530:	7bbb      	ldrb	r3, [r7, #14]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	460b      	mov	r3, r1
 8006544:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006554:	78fa      	ldrb	r2, [r7, #3]
 8006556:	4611      	mov	r1, r2
 8006558:	4618      	mov	r0, r3
 800655a:	f7fb f9ea 	bl	8001932 <HAL_PCD_EP_Close>
 800655e:	4603      	mov	r3, r0
 8006560:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006562:	7bfb      	ldrb	r3, [r7, #15]
 8006564:	4618      	mov	r0, r3
 8006566:	f000 f94b 	bl	8006800 <USBD_Get_USB_Status>
 800656a:	4603      	mov	r3, r0
 800656c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800656e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	460b      	mov	r3, r1
 8006582:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006588:	2300      	movs	r3, #0
 800658a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006592:	78fa      	ldrb	r2, [r7, #3]
 8006594:	4611      	mov	r1, r2
 8006596:	4618      	mov	r0, r3
 8006598:	f7fb fac2 	bl	8001b20 <HAL_PCD_EP_SetStall>
 800659c:	4603      	mov	r3, r0
 800659e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065a0:	7bfb      	ldrb	r3, [r7, #15]
 80065a2:	4618      	mov	r0, r3
 80065a4:	f000 f92c 	bl	8006800 <USBD_Get_USB_Status>
 80065a8:	4603      	mov	r3, r0
 80065aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	460b      	mov	r3, r1
 80065c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065c2:	2300      	movs	r3, #0
 80065c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065c6:	2300      	movs	r3, #0
 80065c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80065d0:	78fa      	ldrb	r2, [r7, #3]
 80065d2:	4611      	mov	r1, r2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fb fb07 	bl	8001be8 <HAL_PCD_EP_ClrStall>
 80065da:	4603      	mov	r3, r0
 80065dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 f90d 	bl	8006800 <USBD_Get_USB_Status>
 80065e6:	4603      	mov	r3, r0
 80065e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006606:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800660c:	2b00      	cmp	r3, #0
 800660e:	da0b      	bge.n	8006628 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006616:	68f9      	ldr	r1, [r7, #12]
 8006618:	4613      	mov	r3, r2
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	1a9b      	subs	r3, r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	333e      	adds	r3, #62	; 0x3e
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	e00b      	b.n	8006640 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006628:	78fb      	ldrb	r3, [r7, #3]
 800662a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800662e:	68f9      	ldr	r1, [r7, #12]
 8006630:	4613      	mov	r3, r2
 8006632:	00db      	lsls	r3, r3, #3
 8006634:	1a9b      	subs	r3, r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	440b      	add	r3, r1
 800663a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800663e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800665c:	2300      	movs	r3, #0
 800665e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006666:	78fa      	ldrb	r2, [r7, #3]
 8006668:	4611      	mov	r1, r2
 800666a:	4618      	mov	r0, r3
 800666c:	f7fb f8d4 	bl	8001818 <HAL_PCD_SetAddress>
 8006670:	4603      	mov	r3, r0
 8006672:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	4618      	mov	r0, r3
 8006678:	f000 f8c2 	bl	8006800 <USBD_Get_USB_Status>
 800667c:	4603      	mov	r3, r0
 800667e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006680:	7bbb      	ldrb	r3, [r7, #14]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b086      	sub	sp, #24
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
 8006696:	460b      	mov	r3, r1
 8006698:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80066a8:	7af9      	ldrb	r1, [r7, #11]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	f7fb f9ed 	bl	8001a8c <HAL_PCD_EP_Transmit>
 80066b2:	4603      	mov	r3, r0
 80066b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 f8a1 	bl	8006800 <USBD_Get_USB_Status>
 80066be:	4603      	mov	r3, r0
 80066c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80066c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	607a      	str	r2, [r7, #4]
 80066d6:	603b      	str	r3, [r7, #0]
 80066d8:	460b      	mov	r3, r1
 80066da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066dc:	2300      	movs	r3, #0
 80066de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80066ea:	7af9      	ldrb	r1, [r7, #11]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	f7fb f969 	bl	80019c6 <HAL_PCD_EP_Receive>
 80066f4:	4603      	mov	r3, r0
 80066f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f000 f880 	bl	8006800 <USBD_Get_USB_Status>
 8006700:	4603      	mov	r3, r0
 8006702:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006704:	7dbb      	ldrb	r3, [r7, #22]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b082      	sub	sp, #8
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006720:	78fa      	ldrb	r2, [r7, #3]
 8006722:	4611      	mov	r1, r2
 8006724:	4618      	mov	r0, r3
 8006726:	f7fb f999 	bl	8001a5c <HAL_PCD_EP_GetRxCount>
 800672a:	4603      	mov	r3, r0
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8006740:	78fb      	ldrb	r3, [r7, #3]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d002      	beq.n	800674c <HAL_PCDEx_LPM_Callback+0x18>
 8006746:	2b01      	cmp	r3, #1
 8006748:	d01f      	beq.n	800678a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800674a:	e03b      	b.n	80067c4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d007      	beq.n	8006764 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8006754:	f7f9 fede 	bl	8000514 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006758:	4b1c      	ldr	r3, [pc, #112]	; (80067cc <HAL_PCDEx_LPM_Callback+0x98>)
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	4a1b      	ldr	r2, [pc, #108]	; (80067cc <HAL_PCDEx_LPM_Callback+0x98>)
 800675e:	f023 0306 	bic.w	r3, r3, #6
 8006762:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6812      	ldr	r2, [r2, #0]
 8006772:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006776:	f023 0301 	bic.w	r3, r3, #1
 800677a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006782:	4618      	mov	r0, r3
 8006784:	f7fe fbd4 	bl	8004f30 <USBD_LL_Resume>
    break;
 8006788:	e01c      	b.n	80067c4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	6812      	ldr	r2, [r2, #0]
 8006798:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800679c:	f043 0301 	orr.w	r3, r3, #1
 80067a0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fe fbab 	bl	8004f04 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d005      	beq.n	80067c2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80067b6:	4b05      	ldr	r3, [pc, #20]	; (80067cc <HAL_PCDEx_LPM_Callback+0x98>)
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	4a04      	ldr	r2, [pc, #16]	; (80067cc <HAL_PCDEx_LPM_Callback+0x98>)
 80067bc:	f043 0306 	orr.w	r3, r3, #6
 80067c0:	6113      	str	r3, [r2, #16]
    break;
 80067c2:	bf00      	nop
}
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	e000ed00 	.word	0xe000ed00

080067d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80067d8:	4b03      	ldr	r3, [pc, #12]	; (80067e8 <USBD_static_malloc+0x18>)
}
 80067da:	4618      	mov	r0, r3
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	200001b0 	.word	0x200001b0

080067ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]

}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	4603      	mov	r3, r0
 8006808:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800680a:	2300      	movs	r3, #0
 800680c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	2b03      	cmp	r3, #3
 8006812:	d817      	bhi.n	8006844 <USBD_Get_USB_Status+0x44>
 8006814:	a201      	add	r2, pc, #4	; (adr r2, 800681c <USBD_Get_USB_Status+0x1c>)
 8006816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681a:	bf00      	nop
 800681c:	0800682d 	.word	0x0800682d
 8006820:	08006833 	.word	0x08006833
 8006824:	08006839 	.word	0x08006839
 8006828:	0800683f 	.word	0x0800683f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800682c:	2300      	movs	r3, #0
 800682e:	73fb      	strb	r3, [r7, #15]
    break;
 8006830:	e00b      	b.n	800684a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006832:	2303      	movs	r3, #3
 8006834:	73fb      	strb	r3, [r7, #15]
    break;
 8006836:	e008      	b.n	800684a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006838:	2301      	movs	r3, #1
 800683a:	73fb      	strb	r3, [r7, #15]
    break;
 800683c:	e005      	b.n	800684a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800683e:	2303      	movs	r3, #3
 8006840:	73fb      	strb	r3, [r7, #15]
    break;
 8006842:	e002      	b.n	800684a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006844:	2303      	movs	r3, #3
 8006846:	73fb      	strb	r3, [r7, #15]
    break;
 8006848:	bf00      	nop
  }
  return usb_status;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <__libc_init_array>:
 8006858:	b570      	push	{r4, r5, r6, lr}
 800685a:	4d0d      	ldr	r5, [pc, #52]	; (8006890 <__libc_init_array+0x38>)
 800685c:	4c0d      	ldr	r4, [pc, #52]	; (8006894 <__libc_init_array+0x3c>)
 800685e:	1b64      	subs	r4, r4, r5
 8006860:	10a4      	asrs	r4, r4, #2
 8006862:	2600      	movs	r6, #0
 8006864:	42a6      	cmp	r6, r4
 8006866:	d109      	bne.n	800687c <__libc_init_array+0x24>
 8006868:	4d0b      	ldr	r5, [pc, #44]	; (8006898 <__libc_init_array+0x40>)
 800686a:	4c0c      	ldr	r4, [pc, #48]	; (800689c <__libc_init_array+0x44>)
 800686c:	f000 f820 	bl	80068b0 <_init>
 8006870:	1b64      	subs	r4, r4, r5
 8006872:	10a4      	asrs	r4, r4, #2
 8006874:	2600      	movs	r6, #0
 8006876:	42a6      	cmp	r6, r4
 8006878:	d105      	bne.n	8006886 <__libc_init_array+0x2e>
 800687a:	bd70      	pop	{r4, r5, r6, pc}
 800687c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006880:	4798      	blx	r3
 8006882:	3601      	adds	r6, #1
 8006884:	e7ee      	b.n	8006864 <__libc_init_array+0xc>
 8006886:	f855 3b04 	ldr.w	r3, [r5], #4
 800688a:	4798      	blx	r3
 800688c:	3601      	adds	r6, #1
 800688e:	e7f2      	b.n	8006876 <__libc_init_array+0x1e>
 8006890:	08006928 	.word	0x08006928
 8006894:	08006928 	.word	0x08006928
 8006898:	08006928 	.word	0x08006928
 800689c:	0800692c 	.word	0x0800692c

080068a0 <memset>:
 80068a0:	4402      	add	r2, r0
 80068a2:	4603      	mov	r3, r0
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d100      	bne.n	80068aa <memset+0xa>
 80068a8:	4770      	bx	lr
 80068aa:	f803 1b01 	strb.w	r1, [r3], #1
 80068ae:	e7f9      	b.n	80068a4 <memset+0x4>

080068b0 <_init>:
 80068b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b2:	bf00      	nop
 80068b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068b6:	bc08      	pop	{r3}
 80068b8:	469e      	mov	lr, r3
 80068ba:	4770      	bx	lr

080068bc <_fini>:
 80068bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068be:	bf00      	nop
 80068c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068c2:	bc08      	pop	{r3}
 80068c4:	469e      	mov	lr, r3
 80068c6:	4770      	bx	lr
