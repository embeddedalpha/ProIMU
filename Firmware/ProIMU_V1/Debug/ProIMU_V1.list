
ProIMU_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800188c  0800188c  0001188c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080019d4  080019d4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080019d4  080019d4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080019d4  080019d4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080019d4  080019d4  000119d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080019d8  080019d8  000119d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080019dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000068  08001a44  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  08001a44  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006352  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fa1  00000000  00000000  000263ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  00027390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00027598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001966  00000000  00000000  00027728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000035f6  00000000  00000000  0002908e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005751c  00000000  00000000  0002c684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00083ba0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b88  00000000  00000000  00083bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001874 	.word	0x08001874

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08001874 	.word	0x08001874

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <Console_Init>:

#include "Console.h"


  void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	6039      	str	r1, [r7, #0]

	if(port == USART1)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a4a      	ldr	r2, [pc, #296]	; (80003c8 <Console_Init+0x138>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d12e      	bne.n	8000300 <Console_Init+0x70>
	{
		RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80002a2:	4b4a      	ldr	r3, [pc, #296]	; (80003cc <Console_Init+0x13c>)
 80002a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002a6:	4a49      	ldr	r2, [pc, #292]	; (80003cc <Console_Init+0x13c>)
 80002a8:	f043 0310 	orr.w	r3, r3, #16
 80002ac:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup(GPIOA, 9, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART1_TX);
 80002ae:	2307      	movs	r3, #7
 80002b0:	228c      	movs	r2, #140	; 0x8c
 80002b2:	2109      	movs	r1, #9
 80002b4:	4846      	ldr	r0, [pc, #280]	; (80003d0 <Console_Init+0x140>)
 80002b6:	f000 f8c9 	bl	800044c <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 10, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART1_RX);
 80002ba:	2307      	movs	r3, #7
 80002bc:	228c      	movs	r2, #140	; 0x8c
 80002be:	210a      	movs	r1, #10
 80002c0:	4843      	ldr	r0, [pc, #268]	; (80003d0 <Console_Init+0x140>)
 80002c2:	f000 f8c3 	bl	800044c <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(SystemCoreClock / (16 * baudrate)) << 4;
 80002d2:	4b40      	ldr	r3, [pc, #256]	; (80003d4 <Console_Init+0x144>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	683a      	ldr	r2, [r7, #0]
 80002d8:	0112      	lsls	r2, r2, #4
 80002da:	fbb3 f3f2 	udiv	r3, r3, r2
 80002de:	011b      	lsls	r3, r3, #4
 80002e0:	461a      	mov	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	68db      	ldr	r3, [r3, #12]
 80002ea:	f043 0208 	orr.w	r2, r3, #8
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	68db      	ldr	r3, [r3, #12]
 80002f6:	f043 0204 	orr.w	r2, r3, #4
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	60da      	str	r2, [r3, #12]
	}




}
 80002fe:	e05e      	b.n	80003be <Console_Init+0x12e>
	else if(port == USART2)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	4a35      	ldr	r2, [pc, #212]	; (80003d8 <Console_Init+0x148>)
 8000304:	4293      	cmp	r3, r2
 8000306:	d128      	bne.n	800035a <Console_Init+0xca>
		RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8000308:	4b30      	ldr	r3, [pc, #192]	; (80003cc <Console_Init+0x13c>)
 800030a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030c:	4a2f      	ldr	r2, [pc, #188]	; (80003cc <Console_Init+0x13c>)
 800030e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000312:	6413      	str	r3, [r2, #64]	; 0x40
		GPIO_Pin_Setup(GPIOA, 2, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART2_TX);
 8000314:	2307      	movs	r3, #7
 8000316:	228c      	movs	r2, #140	; 0x8c
 8000318:	2102      	movs	r1, #2
 800031a:	482d      	ldr	r0, [pc, #180]	; (80003d0 <Console_Init+0x140>)
 800031c:	f000 f896 	bl	800044c <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 3, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART2_RX);
 8000320:	2307      	movs	r3, #7
 8000322:	228c      	movs	r2, #140	; 0x8c
 8000324:	2103      	movs	r1, #3
 8000326:	482a      	ldr	r0, [pc, #168]	; (80003d0 <Console_Init+0x140>)
 8000328:	f000 f890 	bl	800044c <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	68db      	ldr	r3, [r3, #12]
 8000330:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	60da      	str	r2, [r3, #12]
		port -> BRR = 0x1388;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	f241 3288 	movw	r2, #5000	; 0x1388
 800033e:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	f043 0208 	orr.w	r2, r3, #8
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	f043 0204 	orr.w	r2, r3, #4
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	60da      	str	r2, [r3, #12]
}
 8000358:	e031      	b.n	80003be <Console_Init+0x12e>
	else if(port == USART6)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a1f      	ldr	r2, [pc, #124]	; (80003dc <Console_Init+0x14c>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d12d      	bne.n	80003be <Console_Init+0x12e>
		RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8000362:	4b1a      	ldr	r3, [pc, #104]	; (80003cc <Console_Init+0x13c>)
 8000364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000366:	4a19      	ldr	r2, [pc, #100]	; (80003cc <Console_Init+0x13c>)
 8000368:	f043 0320 	orr.w	r3, r3, #32
 800036c:	6453      	str	r3, [r2, #68]	; 0x44
		GPIO_Pin_Setup(GPIOA, 11, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_TX);
 800036e:	2308      	movs	r3, #8
 8000370:	228c      	movs	r2, #140	; 0x8c
 8000372:	210b      	movs	r1, #11
 8000374:	4816      	ldr	r0, [pc, #88]	; (80003d0 <Console_Init+0x140>)
 8000376:	f000 f869 	bl	800044c <GPIO_Pin_Setup>
		GPIO_Pin_Setup(GPIOA, 12, ALTERNATE_FUNCTION_OUTPUT_PUSHPULL, USART6_RX);
 800037a:	2308      	movs	r3, #8
 800037c:	228c      	movs	r2, #140	; 0x8c
 800037e:	210c      	movs	r1, #12
 8000380:	4813      	ldr	r0, [pc, #76]	; (80003d0 <Console_Init+0x140>)
 8000382:	f000 f863 	bl	800044c <GPIO_Pin_Setup>
		port ->CR1 |= USART_CR1_UE;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	60da      	str	r2, [r3, #12]
		port->BRR = (int)(SystemCoreClock / (16 * baudrate)) << 4;
 8000392:	4b10      	ldr	r3, [pc, #64]	; (80003d4 <Console_Init+0x144>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	683a      	ldr	r2, [r7, #0]
 8000398:	0112      	lsls	r2, r2, #4
 800039a:	fbb3 f3f2 	udiv	r3, r3, r2
 800039e:	011b      	lsls	r3, r3, #4
 80003a0:	461a      	mov	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	609a      	str	r2, [r3, #8]
		port ->CR1 |= USART_CR1_TE ;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	68db      	ldr	r3, [r3, #12]
 80003aa:	f043 0208 	orr.w	r2, r3, #8
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	60da      	str	r2, [r3, #12]
		port ->CR1 |=  USART_CR1_RE  ;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	68db      	ldr	r3, [r3, #12]
 80003b6:	f043 0204 	orr.w	r2, r3, #4
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	60da      	str	r2, [r3, #12]
}
 80003be:	bf00      	nop
 80003c0:	3708      	adds	r7, #8
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40011000 	.word	0x40011000
 80003cc:	40023800 	.word	0x40023800
 80003d0:	40020000 	.word	0x40020000
 80003d4:	20000000 	.word	0x20000000
 80003d8:	40004400 	.word	0x40004400
 80003dc:	40011400 	.word	0x40011400

080003e0 <printConsole>:

  void printConsole(USART_TypeDef *port,char *msg, ...)
{
 80003e0:	b40e      	push	{r1, r2, r3}
 80003e2:	b580      	push	{r7, lr}
 80003e4:	b09f      	sub	sp, #124	; 0x7c
 80003e6:	af00      	add	r7, sp, #0
 80003e8:	6078      	str	r0, [r7, #4]
	char buff[100];
//	#ifdef DEBUG_UART
	va_list args;
	va_start(args, msg);
 80003ea:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80003ee:	60fb      	str	r3, [r7, #12]
	vsprintf(buff, msg, args);
 80003f0:	f107 0310 	add.w	r3, r7, #16
 80003f4:	68fa      	ldr	r2, [r7, #12]
 80003f6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80003fa:	4618      	mov	r0, r3
 80003fc:	f000 fe22 	bl	8001044 <vsiprintf>
	for(int i = 0; i< strlen(buff); i++)
 8000400:	2300      	movs	r3, #0
 8000402:	677b      	str	r3, [r7, #116]	; 0x74
 8000404:	e011      	b.n	800042a <printConsole+0x4a>
	{
		port -> DR = buff[i];
 8000406:	f107 0210 	add.w	r2, r7, #16
 800040a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800040c:	4413      	add	r3, r2
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	461a      	mov	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	605a      	str	r2, [r3, #4]
		while (!(port->SR & USART_SR_TXE));
 8000416:	bf00      	nop
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000420:	2b00      	cmp	r3, #0
 8000422:	d0f9      	beq.n	8000418 <printConsole+0x38>
	for(int i = 0; i< strlen(buff); i++)
 8000424:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000426:	3301      	adds	r3, #1
 8000428:	677b      	str	r3, [r7, #116]	; 0x74
 800042a:	f107 0310 	add.w	r3, r7, #16
 800042e:	4618      	mov	r0, r3
 8000430:	f7ff fed6 	bl	80001e0 <strlen>
 8000434:	4602      	mov	r2, r0
 8000436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000438:	429a      	cmp	r2, r3
 800043a:	d8e4      	bhi.n	8000406 <printConsole+0x26>
	}
}
 800043c:	bf00      	nop
 800043e:	bf00      	nop
 8000440:	377c      	adds	r7, #124	; 0x7c
 8000442:	46bd      	mov	sp, r7
 8000444:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000448:	b003      	add	sp, #12
 800044a:	4770      	bx	lr

0800044c <GPIO_Pin_Setup>:

#include "GPIO.h"


void GPIO_Pin_Setup(GPIO_TypeDef *Port, uint8_t pin, uint8_t function, uint8_t alternate_function)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	4608      	mov	r0, r1
 8000456:	4611      	mov	r1, r2
 8000458:	461a      	mov	r2, r3
 800045a:	4603      	mov	r3, r0
 800045c:	70fb      	strb	r3, [r7, #3]
 800045e:	460b      	mov	r3, r1
 8000460:	70bb      	strb	r3, [r7, #2]
 8000462:	4613      	mov	r3, r2
 8000464:	707b      	strb	r3, [r7, #1]
	if(Port == GPIOA)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a43      	ldr	r2, [pc, #268]	; (8000578 <GPIO_Pin_Setup+0x12c>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_Pin_Setup+0x30>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOAEN;
 800046e:	4b43      	ldr	r3, [pc, #268]	; (800057c <GPIO_Pin_Setup+0x130>)
 8000470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000472:	4a42      	ldr	r2, [pc, #264]	; (800057c <GPIO_Pin_Setup+0x130>)
 8000474:	f043 0301 	orr.w	r3, r3, #1
 8000478:	6313      	str	r3, [r2, #48]	; 0x30
 800047a:	e02a      	b.n	80004d2 <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOB)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a40      	ldr	r2, [pc, #256]	; (8000580 <GPIO_Pin_Setup+0x134>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d106      	bne.n	8000492 <GPIO_Pin_Setup+0x46>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
 8000484:	4b3d      	ldr	r3, [pc, #244]	; (800057c <GPIO_Pin_Setup+0x130>)
 8000486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000488:	4a3c      	ldr	r2, [pc, #240]	; (800057c <GPIO_Pin_Setup+0x130>)
 800048a:	f043 0302 	orr.w	r3, r3, #2
 800048e:	6313      	str	r3, [r2, #48]	; 0x30
 8000490:	e01f      	b.n	80004d2 <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOC)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a3b      	ldr	r2, [pc, #236]	; (8000584 <GPIO_Pin_Setup+0x138>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d106      	bne.n	80004a8 <GPIO_Pin_Setup+0x5c>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOCEN;
 800049a:	4b38      	ldr	r3, [pc, #224]	; (800057c <GPIO_Pin_Setup+0x130>)
 800049c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049e:	4a37      	ldr	r2, [pc, #220]	; (800057c <GPIO_Pin_Setup+0x130>)
 80004a0:	f043 0304 	orr.w	r3, r3, #4
 80004a4:	6313      	str	r3, [r2, #48]	; 0x30
 80004a6:	e014      	b.n	80004d2 <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOD)
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a37      	ldr	r2, [pc, #220]	; (8000588 <GPIO_Pin_Setup+0x13c>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d106      	bne.n	80004be <GPIO_Pin_Setup+0x72>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIODEN;
 80004b0:	4b32      	ldr	r3, [pc, #200]	; (800057c <GPIO_Pin_Setup+0x130>)
 80004b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b4:	4a31      	ldr	r2, [pc, #196]	; (800057c <GPIO_Pin_Setup+0x130>)
 80004b6:	f043 0308 	orr.w	r3, r3, #8
 80004ba:	6313      	str	r3, [r2, #48]	; 0x30
 80004bc:	e009      	b.n	80004d2 <GPIO_Pin_Setup+0x86>
	}else if(Port == GPIOE)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4a32      	ldr	r2, [pc, #200]	; (800058c <GPIO_Pin_Setup+0x140>)
 80004c2:	4293      	cmp	r3, r2
 80004c4:	d105      	bne.n	80004d2 <GPIO_Pin_Setup+0x86>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOEEN;
 80004c6:	4b2d      	ldr	r3, [pc, #180]	; (800057c <GPIO_Pin_Setup+0x130>)
 80004c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ca:	4a2c      	ldr	r2, [pc, #176]	; (800057c <GPIO_Pin_Setup+0x130>)
 80004cc:	f043 0310 	orr.w	r3, r3, #16
 80004d0:	6313      	str	r3, [r2, #48]	; 0x30
	}

	Port -> MODER   |= ((0xC0  & function)>>6) << (2 * pin);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	78ba      	ldrb	r2, [r7, #2]
 80004d8:	0992      	lsrs	r2, r2, #6
 80004da:	b2d2      	uxtb	r2, r2
 80004dc:	4611      	mov	r1, r2
 80004de:	78fa      	ldrb	r2, [r7, #3]
 80004e0:	0052      	lsls	r2, r2, #1
 80004e2:	fa01 f202 	lsl.w	r2, r1, r2
 80004e6:	431a      	orrs	r2, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	601a      	str	r2, [r3, #0]
	Port -> OTYPER  |= ((0x30  & function)>>4) << (1 * pin);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	78ba      	ldrb	r2, [r7, #2]
 80004f2:	0912      	lsrs	r2, r2, #4
 80004f4:	b2d2      	uxtb	r2, r2
 80004f6:	f002 0103 	and.w	r1, r2, #3
 80004fa:	78fa      	ldrb	r2, [r7, #3]
 80004fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000500:	431a      	orrs	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= ((0x0C  & function)>>2) << (2 * pin);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	78ba      	ldrb	r2, [r7, #2]
 800050c:	0892      	lsrs	r2, r2, #2
 800050e:	b2d2      	uxtb	r2, r2
 8000510:	f002 0103 	and.w	r1, r2, #3
 8000514:	78fa      	ldrb	r2, [r7, #3]
 8000516:	0052      	lsls	r2, r2, #1
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	431a      	orrs	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	609a      	str	r2, [r3, #8]
	Port -> PUPDR   |= ((0x03  & function)>>0) << (2 * pin);
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	68db      	ldr	r3, [r3, #12]
 8000526:	78ba      	ldrb	r2, [r7, #2]
 8000528:	f002 0103 	and.w	r1, r2, #3
 800052c:	78fa      	ldrb	r2, [r7, #3]
 800052e:	0052      	lsls	r2, r2, #1
 8000530:	fa01 f202 	lsl.w	r2, r1, r2
 8000534:	431a      	orrs	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60da      	str	r2, [r3, #12]

	if(pin < 8)Port -> AFR[0] |= ( alternate_function << (4 * (pin)));
 800053a:	78fb      	ldrb	r3, [r7, #3]
 800053c:	2b07      	cmp	r3, #7
 800053e:	d80a      	bhi.n	8000556 <GPIO_Pin_Setup+0x10a>
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	6a1b      	ldr	r3, [r3, #32]
 8000544:	7879      	ldrb	r1, [r7, #1]
 8000546:	78fa      	ldrb	r2, [r7, #3]
 8000548:	0092      	lsls	r2, r2, #2
 800054a:	fa01 f202 	lsl.w	r2, r1, r2
 800054e:	431a      	orrs	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	621a      	str	r2, [r3, #32]
	else	   Port -> AFR[1] |= ( alternate_function << (4 * (pin - 8)));

	if (alternate_function == NONE) {}
}
 8000554:	e00a      	b.n	800056c <GPIO_Pin_Setup+0x120>
	else	   Port -> AFR[1] |= ( alternate_function << (4 * (pin - 8)));
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800055a:	7879      	ldrb	r1, [r7, #1]
 800055c:	78fa      	ldrb	r2, [r7, #3]
 800055e:	3a08      	subs	r2, #8
 8000560:	0092      	lsls	r2, r2, #2
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	431a      	orrs	r2, r3
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800056c:	bf00      	nop
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000576:	4770      	bx	lr
 8000578:	40020000 	.word	0x40020000
 800057c:	40023800 	.word	0x40023800
 8000580:	40020400 	.word	0x40020400
 8000584:	40020800 	.word	0x40020800
 8000588:	40020c00 	.word	0x40020c00
 800058c:	40021000 	.word	0x40021000

08000590 <I2C_Master_Init>:

#include "I2C.h"


void I2C_Master_Init(I2C_Config I2C)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	463b      	mov	r3, r7
 8000598:	e883 0003 	stmia.w	r3, {r0, r1}
	if (I2C.I2C == I2C1)
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	4a46      	ldr	r2, [pc, #280]	; (80006b8 <I2C_Master_Init+0x128>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d111      	bne.n	80005c8 <I2C_Master_Init+0x38>
		{
			RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 80005a4:	4b45      	ldr	r3, [pc, #276]	; (80006bc <I2C_Master_Init+0x12c>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a44      	ldr	r2, [pc, #272]	; (80006bc <I2C_Master_Init+0x12c>)
 80005aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
			GPIO_Pin_Setup(GPIOB, 6, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN_PULLUP, I2C1_SCL);
 80005b0:	2304      	movs	r3, #4
 80005b2:	229d      	movs	r2, #157	; 0x9d
 80005b4:	2106      	movs	r1, #6
 80005b6:	4842      	ldr	r0, [pc, #264]	; (80006c0 <I2C_Master_Init+0x130>)
 80005b8:	f7ff ff48 	bl	800044c <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 7, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN_PULLUP, I2C1_SDA);
 80005bc:	2304      	movs	r3, #4
 80005be:	229d      	movs	r2, #157	; 0x9d
 80005c0:	2107      	movs	r1, #7
 80005c2:	483f      	ldr	r0, [pc, #252]	; (80006c0 <I2C_Master_Init+0x130>)
 80005c4:	f7ff ff42 	bl	800044c <GPIO_Pin_Setup>

		}
		if (I2C.I2C == I2C2) //PB3 -> SDA	PB4 -> SDA
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	4a3e      	ldr	r2, [pc, #248]	; (80006c4 <I2C_Master_Init+0x134>)
 80005cc:	4293      	cmp	r3, r2
 80005ce:	d111      	bne.n	80005f4 <I2C_Master_Init+0x64>
		{
			//PB3 -> SDA
			//PB4 -> SDA
			RCC -> APB1ENR |= RCC_APB1ENR_I2C2EN;
 80005d0:	4b3a      	ldr	r3, [pc, #232]	; (80006bc <I2C_Master_Init+0x12c>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a39      	ldr	r2, [pc, #228]	; (80006bc <I2C_Master_Init+0x12c>)
 80005d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
			GPIO_Pin_Setup('B', 3, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN_PULLUP, I2C2_SCL);
 80005dc:	2304      	movs	r3, #4
 80005de:	229d      	movs	r2, #157	; 0x9d
 80005e0:	2103      	movs	r1, #3
 80005e2:	2042      	movs	r0, #66	; 0x42
 80005e4:	f7ff ff32 	bl	800044c <GPIO_Pin_Setup>
			GPIO_Pin_Setup('B', 4, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN_PULLUP, I2C2_SDA);
 80005e8:	2304      	movs	r3, #4
 80005ea:	229d      	movs	r2, #157	; 0x9d
 80005ec:	2104      	movs	r1, #4
 80005ee:	2042      	movs	r0, #66	; 0x42
 80005f0:	f7ff ff2c 	bl	800044c <GPIO_Pin_Setup>

		}
		if (I2C.I2C == I2C3)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	4a34      	ldr	r2, [pc, #208]	; (80006c8 <I2C_Master_Init+0x138>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d117      	bne.n	800062c <I2C_Master_Init+0x9c>
		{
			RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 80005fc:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <I2C_Master_Init+0x12c>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a2e      	ldr	r2, [pc, #184]	; (80006bc <I2C_Master_Init+0x12c>)
 8000602:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
			RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000608:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <I2C_Master_Init+0x12c>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	4a2b      	ldr	r2, [pc, #172]	; (80006bc <I2C_Master_Init+0x12c>)
 800060e:	f043 0303 	orr.w	r3, r3, #3
 8000612:	6313      	str	r3, [r2, #48]	; 0x30
			//PA8 -> SDA
			//PB10 -> SCL
			GPIO_Pin_Setup('A', 8, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN_PULLUP, I2C3_SCL);
 8000614:	2304      	movs	r3, #4
 8000616:	229d      	movs	r2, #157	; 0x9d
 8000618:	2108      	movs	r1, #8
 800061a:	2041      	movs	r0, #65	; 0x41
 800061c:	f7ff ff16 	bl	800044c <GPIO_Pin_Setup>
			GPIO_Pin_Setup('B', 10, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN_PULLUP, I2C3_SDA);
 8000620:	2309      	movs	r3, #9
 8000622:	229d      	movs	r2, #157	; 0x9d
 8000624:	210a      	movs	r1, #10
 8000626:	2042      	movs	r0, #66	; 0x42
 8000628:	f7ff ff10 	bl	800044c <GPIO_Pin_Setup>
		}

		if (I2C.mode)
 800062c:	793b      	ldrb	r3, [r7, #4]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d028      	beq.n	8000684 <I2C_Master_Init+0xf4>
		{
			I2C.I2C -> CR1 &= ~I2C_CR1_PE;
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	f022 0201 	bic.w	r2, r2, #1
 800063c:	601a      	str	r2, [r3, #0]
			I2C.I2C -> CR1 |= I2C_CR1_SWRST;
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000648:	601a      	str	r2, [r3, #0]
			I2C.I2C -> CR1 &= ~I2C_CR1_SWRST;
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000654:	601a      	str	r2, [r3, #0]
			I2C.I2C -> CR2 = 0x30; //48MHz
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2230      	movs	r2, #48	; 0x30
 800065a:	605a      	str	r2, [r3, #4]
			I2C.I2C -> CCR = 0x8028; //FS mode | 40
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	f248 0228 	movw	r2, #32808	; 0x8028
 8000662:	61da      	str	r2, [r3, #28]
			I2C.I2C -> TRISE = 0xf;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	220f      	movs	r2, #15
 8000668:	621a      	str	r2, [r3, #32]
			I2C.I2C -> CR1 |= I2C_CR1_NOSTRETCH;
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000674:	601a      	str	r2, [r3, #0]
			I2C.I2C -> CR1 |= I2C_CR1_PE;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	683b      	ldr	r3, [r7, #0]
 800067c:	f042 0201 	orr.w	r2, r2, #1
 8000680:	601a      	str	r2, [r3, #0]
			I2C.I2C -> TRISE = 0x8;
			I2C.I2C -> CR1 |= I2C_CR1_PE;
			I2C.I2C -> CR1 &= ~I2C_CR1_POS;
		}

}
 8000682:	e014      	b.n	80006ae <I2C_Master_Init+0x11e>
			I2C.I2C -> CR2 = 0x8;
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	2208      	movs	r2, #8
 8000688:	605a      	str	r2, [r3, #4]
			I2C.I2C -> CCR = 0x28;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	2228      	movs	r2, #40	; 0x28
 800068e:	61da      	str	r2, [r3, #28]
			I2C.I2C -> TRISE = 0x8;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	2208      	movs	r2, #8
 8000694:	621a      	str	r2, [r3, #32]
			I2C.I2C -> CR1 |= I2C_CR1_PE;
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	f042 0201 	orr.w	r2, r2, #1
 80006a0:	601a      	str	r2, [r3, #0]
			I2C.I2C -> CR1 &= ~I2C_CR1_POS;
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006ac:	601a      	str	r2, [r3, #0]
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40005400 	.word	0x40005400
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020400 	.word	0x40020400
 80006c4:	40005800 	.word	0x40005800
 80006c8:	40005c00 	.word	0x40005c00

080006cc <I2C_Master_Start>:
void I2C_Master_Start(I2C_Config I2C)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	463b      	mov	r3, r7
 80006d4:	e883 0003 	stmia.w	r3, {r0, r1}
//	temp = I2C.I2C -> SR1 | I2C.I2C -> SR2;
	I2C.I2C -> CR1 |= I2C_CR1_START;
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006e2:	601a      	str	r2, [r3, #0]
	while(!(I2C.I2C -> SR1 & I2C_SR1_SB)){}
 80006e4:	bf00      	nop
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f9      	beq.n	80006e6 <I2C_Master_Start+0x1a>
}
 80006f2:	bf00      	nop
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr

08000700 <I2C_Master_Address>:

void I2C_Master_Address(I2C_Config I2C, uint8_t address, uint8_t read_write)
{
 8000700:	b490      	push	{r4, r7}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
 8000706:	f107 0408 	add.w	r4, r7, #8
 800070a:	e884 0003 	stmia.w	r4, {r0, r1}
 800070e:	4611      	mov	r1, r2
 8000710:	461a      	mov	r2, r3
 8000712:	460b      	mov	r3, r1
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	4613      	mov	r3, r2
 8000718:	71bb      	strb	r3, [r7, #6]
	volatile int temp;
	I2C.I2C -> DR = address << 1  | read_write;
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	005a      	lsls	r2, r3, #1
 800071e:	79bb      	ldrb	r3, [r7, #6]
 8000720:	431a      	orrs	r2, r3
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	611a      	str	r2, [r3, #16]
	while((I2C.I2C -> SR1 & 2) == 0){}
 8000726:	bf00      	nop
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	2b00      	cmp	r3, #0
 8000732:	d0f9      	beq.n	8000728 <I2C_Master_Address+0x28>
	while((I2C.I2C -> SR1 & 2))
 8000734:	e00b      	b.n	800074e <I2C_Master_Address+0x4e>
	{
		temp = I2C.I2C -> SR1;
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	617b      	str	r3, [r7, #20]
		temp = I2C.I2C -> SR2;
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	617b      	str	r3, [r7, #20]
		if((I2C.I2C -> SR1 & 2) == 0)
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	2b00      	cmp	r3, #0
 800074c:	d006      	beq.n	800075c <I2C_Master_Address+0x5c>
	while((I2C.I2C -> SR1 & 2))
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	f003 0302 	and.w	r3, r3, #2
 8000756:	2b00      	cmp	r3, #0
 8000758:	d1ed      	bne.n	8000736 <I2C_Master_Address+0x36>
		{
			break;
		}
	}
}
 800075a:	e000      	b.n	800075e <I2C_Master_Address+0x5e>
			break;
 800075c:	bf00      	nop
}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bc90      	pop	{r4, r7}
 8000766:	4770      	bx	lr

08000768 <I2C_Master_Send_Byte>:

void I2C_Master_Send_Byte(I2C_Config I2C, uint8_t data)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	f107 0308 	add.w	r3, r7, #8
 8000772:	e883 0003 	stmia.w	r3, {r0, r1}
 8000776:	4613      	mov	r3, r2
 8000778:	71fb      	strb	r3, [r7, #7]
	while((I2C.I2C -> SR1 & 0x80) == 0){}
 800077a:	bf00      	nop
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	695b      	ldr	r3, [r3, #20]
 8000780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000784:	2b00      	cmp	r3, #0
 8000786:	d0f9      	beq.n	800077c <I2C_Master_Send_Byte+0x14>
	I2C.I2C -> DR = data;
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	79fa      	ldrb	r2, [r7, #7]
 800078c:	611a      	str	r2, [r3, #16]
	while((I2C.I2C -> SR1 & 0x80) == 0){}
 800078e:	bf00      	nop
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	695b      	ldr	r3, [r3, #20]
 8000794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0f9      	beq.n	8000790 <I2C_Master_Send_Byte+0x28>
}
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	3714      	adds	r7, #20
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <I2C_Master_Receive_Byte>:
		while((I2C.I2C -> SR1 & 0x80) == 0){}
	}
}

int I2C_Master_Receive_Byte(I2C_Config I2C)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b085      	sub	sp, #20
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	463b      	mov	r3, r7
 80007b2:	e883 0003 	stmia.w	r3, {r0, r1}
	volatile int temp;
	I2C.I2C -> CR1 |= I2C_CR1_ACK;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80007c0:	601a      	str	r2, [r3, #0]
	while((I2C.I2C -> SR1 & I2C_SR1_RXNE) == 0){}
 80007c2:	bf00      	nop
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0f9      	beq.n	80007c4 <I2C_Master_Receive_Byte+0x1a>
	temp = I2C.I2C -> DR;
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	60fb      	str	r3, [r7, #12]
	I2C.I2C -> CR1 &= ~I2C_CR1_ACK;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80007e0:	601a      	str	r2, [r3, #0]
	return temp;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <I2C_Master_Stop>:
{
	I2C.I2C -> CR1 |= I2C_CR1_ACK;
}

void I2C_Master_Stop(I2C_Config I2C)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	463b      	mov	r3, r7
 80007f8:	e883 0003 	stmia.w	r3, {r0, r1}
//	volatile int temp;
//	temp = I2C.I2C -> SR1 | I2C.I2C -> SR2;
	I2C.I2C -> CR1 |= I2C_CR1_STOP;
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000806:	601a      	str	r2, [r3, #0]
}
 8000808:	bf00      	nop
 800080a:	370c      	adds	r7, #12
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <I2C_Master_Write_Register>:

/*****************************************************************************************/

void I2C_Master_Write_Register(I2C_Config I2C, uint8_t device_address, uint8_t reg_address, uint8_t data)
{
 8000814:	b590      	push	{r4, r7, lr}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	f107 0408 	add.w	r4, r7, #8
 800081e:	e884 0003 	stmia.w	r4, {r0, r1}
 8000822:	4611      	mov	r1, r2
 8000824:	461a      	mov	r2, r3
 8000826:	460b      	mov	r3, r1
 8000828:	71fb      	strb	r3, [r7, #7]
 800082a:	4613      	mov	r3, r2
 800082c:	71bb      	strb	r3, [r7, #6]
	I2C_Master_Start(I2C);
 800082e:	f107 0308 	add.w	r3, r7, #8
 8000832:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000836:	f7ff ff49 	bl	80006cc <I2C_Master_Start>
	I2C_Master_Address(I2C, device_address,0);
 800083a:	79fa      	ldrb	r2, [r7, #7]
 800083c:	2300      	movs	r3, #0
 800083e:	f107 0108 	add.w	r1, r7, #8
 8000842:	c903      	ldmia	r1, {r0, r1}
 8000844:	f7ff ff5c 	bl	8000700 <I2C_Master_Address>
	I2C_Master_Send_Byte(I2C, reg_address);
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	461a      	mov	r2, r3
 800084c:	f107 0308 	add.w	r3, r7, #8
 8000850:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000854:	f7ff ff88 	bl	8000768 <I2C_Master_Send_Byte>
	I2C_Master_Send_Byte(I2C, data);
 8000858:	f897 3020 	ldrb.w	r3, [r7, #32]
 800085c:	461a      	mov	r2, r3
 800085e:	f107 0308 	add.w	r3, r7, #8
 8000862:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000866:	f7ff ff7f 	bl	8000768 <I2C_Master_Send_Byte>
	I2C_Master_Stop(I2C);
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000872:	f7ff ffbd 	bl	80007f0 <I2C_Master_Stop>
}
 8000876:	bf00      	nop
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	bd90      	pop	{r4, r7, pc}

0800087e <I2C_Master_Read_Register>:

int I2C_Master_Read_Register(I2C_Config I2C, uint8_t device_address, uint8_t reg_address)
{
 800087e:	b590      	push	{r4, r7, lr}
 8000880:	b087      	sub	sp, #28
 8000882:	af00      	add	r7, sp, #0
 8000884:	f107 0408 	add.w	r4, r7, #8
 8000888:	e884 0003 	stmia.w	r4, {r0, r1}
 800088c:	4611      	mov	r1, r2
 800088e:	461a      	mov	r2, r3
 8000890:	460b      	mov	r3, r1
 8000892:	71fb      	strb	r3, [r7, #7]
 8000894:	4613      	mov	r3, r2
 8000896:	71bb      	strb	r3, [r7, #6]
	volatile int temp;
	I2C_Master_Start(I2C);
 8000898:	f107 0308 	add.w	r3, r7, #8
 800089c:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008a0:	f7ff ff14 	bl	80006cc <I2C_Master_Start>
	I2C_Master_Address(I2C, device_address, 0);
 80008a4:	79fa      	ldrb	r2, [r7, #7]
 80008a6:	2300      	movs	r3, #0
 80008a8:	f107 0108 	add.w	r1, r7, #8
 80008ac:	c903      	ldmia	r1, {r0, r1}
 80008ae:	f7ff ff27 	bl	8000700 <I2C_Master_Address>
	I2C_Master_Send_Byte(I2C, reg_address);
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	461a      	mov	r2, r3
 80008b6:	f107 0308 	add.w	r3, r7, #8
 80008ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008be:	f7ff ff53 	bl	8000768 <I2C_Master_Send_Byte>
	I2C_Master_Stop(I2C);
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008ca:	f7ff ff91 	bl	80007f0 <I2C_Master_Stop>
	I2C_Master_Start(I2C);
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008d6:	f7ff fef9 	bl	80006cc <I2C_Master_Start>
	I2C_Master_Address(I2C, device_address, 1);
 80008da:	79fa      	ldrb	r2, [r7, #7]
 80008dc:	2301      	movs	r3, #1
 80008de:	f107 0108 	add.w	r1, r7, #8
 80008e2:	c903      	ldmia	r1, {r0, r1}
 80008e4:	f7ff ff0c 	bl	8000700 <I2C_Master_Address>
	temp = I2C_Master_Receive_Byte(I2C);
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008f0:	f7ff ff5b 	bl	80007aa <I2C_Master_Receive_Byte>
 80008f4:	4603      	mov	r3, r0
 80008f6:	617b      	str	r3, [r7, #20]
	I2C_Master_Stop(I2C);
 80008f8:	f107 0308 	add.w	r3, r7, #8
 80008fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000900:	f7ff ff76 	bl	80007f0 <I2C_Master_Stop>
	return temp;
 8000904:	697b      	ldr	r3, [r7, #20]
}
 8000906:	4618      	mov	r0, r3
 8000908:	371c      	adds	r7, #28
 800090a:	46bd      	mov	sp, r7
 800090c:	bd90      	pop	{r4, r7, pc}
	...

08000910 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(unsigned long ms)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	unsigned long x = (0x17ed0) * (ms);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a0c      	ldr	r2, [pc, #48]	; (800094c <Delay_ms+0x3c>)
 800091c:	fb02 f303 	mul.w	r3, r2, r3
 8000920:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD = x ;
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <Delay_ms+0x40>)
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <Delay_ms+0x40>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 800092e:	bf00      	nop
 8000930:	4b07      	ldr	r3, [pc, #28]	; (8000950 <Delay_ms+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d0f9      	beq.n	8000930 <Delay_ms+0x20>
	return (0UL);                                                     /* Function successful */
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	00017ed0 	.word	0x00017ed0
 8000950:	e000e010 	.word	0xe000e010

08000954 <MPU9250_Hardware_Init>:

I2C_Config MPU9250;


void MPU9250_Hardware_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	MPU9250.I2C = I2C1;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MPU9250_Hardware_Init+0x20>)
 800095a:	4a07      	ldr	r2, [pc, #28]	; (8000978 <MPU9250_Hardware_Init+0x24>)
 800095c:	601a      	str	r2, [r3, #0]
	MPU9250.mode = I2C_Fast_Mode;
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <MPU9250_Hardware_Init+0x20>)
 8000960:	2201      	movs	r2, #1
 8000962:	711a      	strb	r2, [r3, #4]
	I2C_Master_Init(MPU9250);
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <MPU9250_Hardware_Init+0x20>)
 8000966:	e893 0003 	ldmia.w	r3, {r0, r1}
 800096a:	f7ff fe11 	bl	8000590 <I2C_Master_Init>
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000b4 	.word	0x200000b4
 8000978:	40005400 	.word	0x40005400

0800097c <MPU9250_Init>:

void MPU9250_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af02      	add	r7, sp, #8
	MPU9250_Reset();
 8000982:	f000 f81d 	bl	80009c0 <MPU9250_Reset>
	I2C_Master_Write_Register(MPU9250, MPU9250_ADDRESS, PWR_MGMT_1, 0x02);
 8000986:	490d      	ldr	r1, [pc, #52]	; (80009bc <MPU9250_Init+0x40>)
 8000988:	2302      	movs	r3, #2
 800098a:	9300      	str	r3, [sp, #0]
 800098c:	236b      	movs	r3, #107	; 0x6b
 800098e:	2268      	movs	r2, #104	; 0x68
 8000990:	c903      	ldmia	r1, {r0, r1}
 8000992:	f7ff ff3f 	bl	8000814 <I2C_Master_Write_Register>
	I2C_Master_Write_Register(MPU9250, MPU9250_ADDRESS, CONFIG, 0x02);
 8000996:	4909      	ldr	r1, [pc, #36]	; (80009bc <MPU9250_Init+0x40>)
 8000998:	2302      	movs	r3, #2
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	231a      	movs	r3, #26
 800099e:	2268      	movs	r2, #104	; 0x68
 80009a0:	c903      	ldmia	r1, {r0, r1}
 80009a2:	f7ff ff37 	bl	8000814 <I2C_Master_Write_Register>
	I2C_Master_Write_Register(MPU9250, MPU9250_ADDRESS, SMPLRT_DIV, 0x04);
 80009a6:	4905      	ldr	r1, [pc, #20]	; (80009bc <MPU9250_Init+0x40>)
 80009a8:	2304      	movs	r3, #4
 80009aa:	9300      	str	r3, [sp, #0]
 80009ac:	2319      	movs	r3, #25
 80009ae:	2268      	movs	r2, #104	; 0x68
 80009b0:	c903      	ldmia	r1, {r0, r1}
 80009b2:	f7ff ff2f 	bl	8000814 <I2C_Master_Write_Register>
//	I2C_Master_Write_Register_bits(MPU9250, MPU9250_ADDRESS, GYRO_CONFIG, 0, bit_4 | bit_3);
//	I2C_Master_Write_Register_bits(MPU9250, MPU9250_ADDRESS, ACCEL_CONFIG, 0, bit_4 | bit_3);
//	I2C_Master_Write_Register(MPU9250, MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
//	I2C_Master_Write_Register(MPU9250, MPU9250_ADDRESS, INT_ENABLE, 0x01);
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200000b4 	.word	0x200000b4

080009c0 <MPU9250_Reset>:
	MPU9250_Accelerometer_Offset.Z = I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, ZA_OFFSET_H) << 8 |
									 I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, ZA_OFFSET_L) ;
}

void MPU9250_Reset(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af02      	add	r7, sp, #8
	I2C_Master_Write_Register(MPU9250, MPU9250_ADDRESS, PWR_MGMT_1, 0x80);
 80009c6:	490b      	ldr	r1, [pc, #44]	; (80009f4 <MPU9250_Reset+0x34>)
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	9300      	str	r3, [sp, #0]
 80009cc:	236b      	movs	r3, #107	; 0x6b
 80009ce:	2268      	movs	r2, #104	; 0x68
 80009d0:	c903      	ldmia	r1, {r0, r1}
 80009d2:	f7ff ff1f 	bl	8000814 <I2C_Master_Write_Register>
	Delay_ms(1);
 80009d6:	2001      	movs	r0, #1
 80009d8:	f7ff ff9a 	bl	8000910 <Delay_ms>
	I2C_Master_Write_Register(MPU9250, MPU9250_ADDRESS, PWR_MGMT_1, 0x00);
 80009dc:	4905      	ldr	r1, [pc, #20]	; (80009f4 <MPU9250_Reset+0x34>)
 80009de:	2300      	movs	r3, #0
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	236b      	movs	r3, #107	; 0x6b
 80009e4:	2268      	movs	r2, #104	; 0x68
 80009e6:	c903      	ldmia	r1, {r0, r1}
 80009e8:	f7ff ff14 	bl	8000814 <I2C_Master_Write_Register>
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000b4 	.word	0x200000b4

080009f8 <MPU9250_Self_Test>:

void MPU9250_Self_Test(void)
{
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b089      	sub	sp, #36	; 0x24
 80009fc:	af02      	add	r7, sp, #8
	int32_t accl_offset_x,accl_offset_y,accl_offset_z;
	accl_offset_x = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
	accl_offset_y = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
	accl_offset_z = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]

	int fifo_len, packet_len;
	printConsole(USART1, "****************************************** Self Test ******************************************\r\n");
 8000a0a:	4962      	ldr	r1, [pc, #392]	; (8000b94 <MPU9250_Self_Test+0x19c>)
 8000a0c:	4862      	ldr	r0, [pc, #392]	; (8000b98 <MPU9250_Self_Test+0x1a0>)
 8000a0e:	f7ff fce7 	bl	80003e0 <printConsole>
	MPU9250_Reset();
 8000a12:	f7ff ffd5 	bl	80009c0 <MPU9250_Reset>
	I2C_Master_Write_Register(MPU9250, MPU9250_ADDRESS, PWR_MGMT_1, 0x02);
 8000a16:	4961      	ldr	r1, [pc, #388]	; (8000b9c <MPU9250_Self_Test+0x1a4>)
 8000a18:	2302      	movs	r3, #2
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	236b      	movs	r3, #107	; 0x6b
 8000a1e:	2268      	movs	r2, #104	; 0x68
 8000a20:	c903      	ldmia	r1, {r0, r1}
 8000a22:	f7ff fef7 	bl	8000814 <I2C_Master_Write_Register>
	I2C_Master_Write_Register(MPU9250, MPU9250_ADDRESS, CONFIG, 0x40); //Enable FiFo Mode
 8000a26:	495d      	ldr	r1, [pc, #372]	; (8000b9c <MPU9250_Self_Test+0x1a4>)
 8000a28:	2340      	movs	r3, #64	; 0x40
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	231a      	movs	r3, #26
 8000a2e:	2268      	movs	r2, #104	; 0x68
 8000a30:	c903      	ldmia	r1, {r0, r1}
 8000a32:	f7ff feef 	bl	8000814 <I2C_Master_Write_Register>
	I2C_Master_Write_Register(MPU9250, MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); //Activate Self Test for Accelerometer
 8000a36:	4959      	ldr	r1, [pc, #356]	; (8000b9c <MPU9250_Self_Test+0x1a4>)
 8000a38:	23e0      	movs	r3, #224	; 0xe0
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	231c      	movs	r3, #28
 8000a3e:	2268      	movs	r2, #104	; 0x68
 8000a40:	c903      	ldmia	r1, {r0, r1}
 8000a42:	f7ff fee7 	bl	8000814 <I2C_Master_Write_Register>

	I2C_Master_Write_Register(MPU9250, MPU9250_ADDRESS, USER_CTRL, 0x40);
 8000a46:	4955      	ldr	r1, [pc, #340]	; (8000b9c <MPU9250_Self_Test+0x1a4>)
 8000a48:	2340      	movs	r3, #64	; 0x40
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	236a      	movs	r3, #106	; 0x6a
 8000a4e:	2268      	movs	r2, #104	; 0x68
 8000a50:	c903      	ldmia	r1, {r0, r1}
 8000a52:	f7ff fedf 	bl	8000814 <I2C_Master_Write_Register>
	I2C_Master_Write_Register(MPU9250, MPU9250_ADDRESS, FIFO_EN, 0x08);
 8000a56:	4951      	ldr	r1, [pc, #324]	; (8000b9c <MPU9250_Self_Test+0x1a4>)
 8000a58:	2308      	movs	r3, #8
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2323      	movs	r3, #35	; 0x23
 8000a5e:	2268      	movs	r2, #104	; 0x68
 8000a60:	c903      	ldmia	r1, {r0, r1}
 8000a62:	f7ff fed7 	bl	8000814 <I2C_Master_Write_Register>
	Delay_ms(100);
 8000a66:	2064      	movs	r0, #100	; 0x64
 8000a68:	f7ff ff52 	bl	8000910 <Delay_ms>
	fifo_len = I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, FIFO_COUNTH) << 8 |
 8000a6c:	494b      	ldr	r1, [pc, #300]	; (8000b9c <MPU9250_Self_Test+0x1a4>)
 8000a6e:	2372      	movs	r3, #114	; 0x72
 8000a70:	2268      	movs	r2, #104	; 0x68
 8000a72:	c903      	ldmia	r1, {r0, r1}
 8000a74:	f7ff ff03 	bl	800087e <I2C_Master_Read_Register>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	021c      	lsls	r4, r3, #8
			   I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, FIFO_COUNTL) ;
 8000a7c:	4947      	ldr	r1, [pc, #284]	; (8000b9c <MPU9250_Self_Test+0x1a4>)
 8000a7e:	2373      	movs	r3, #115	; 0x73
 8000a80:	2268      	movs	r2, #104	; 0x68
 8000a82:	c903      	ldmia	r1, {r0, r1}
 8000a84:	f7ff fefb 	bl	800087e <I2C_Master_Read_Register>
 8000a88:	4603      	mov	r3, r0
	fifo_len = I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, FIFO_COUNTH) << 8 |
 8000a8a:	4323      	orrs	r3, r4
 8000a8c:	607b      	str	r3, [r7, #4]

	printConsole(USART1, "FIFO Length: %d\r\n",fifo_len);
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	4943      	ldr	r1, [pc, #268]	; (8000ba0 <MPU9250_Self_Test+0x1a8>)
 8000a92:	4841      	ldr	r0, [pc, #260]	; (8000b98 <MPU9250_Self_Test+0x1a0>)
 8000a94:	f7ff fca4 	bl	80003e0 <printConsole>

	packet_len = fifo_len/6;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4a42      	ldr	r2, [pc, #264]	; (8000ba4 <MPU9250_Self_Test+0x1ac>)
 8000a9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa0:	17db      	asrs	r3, r3, #31
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	603b      	str	r3, [r7, #0]
	printConsole(USART1, "Packet Length: %d\r\n",packet_len);
 8000aa6:	683a      	ldr	r2, [r7, #0]
 8000aa8:	493f      	ldr	r1, [pc, #252]	; (8000ba8 <MPU9250_Self_Test+0x1b0>)
 8000aaa:	483b      	ldr	r0, [pc, #236]	; (8000b98 <MPU9250_Self_Test+0x1a0>)
 8000aac:	f7ff fc98 	bl	80003e0 <printConsole>

	for(int i = 0; i < packet_len; i++)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	e04d      	b.n	8000b52 <MPU9250_Self_Test+0x15a>
	{
		accl_offset_x += (I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, FIFO_R_W+(i+0)) << 8) |
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	3374      	adds	r3, #116	; 0x74
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4937      	ldr	r1, [pc, #220]	; (8000b9c <MPU9250_Self_Test+0x1a4>)
 8000ac0:	2268      	movs	r2, #104	; 0x68
 8000ac2:	c903      	ldmia	r1, {r0, r1}
 8000ac4:	f7ff fedb 	bl	800087e <I2C_Master_Read_Register>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	021c      	lsls	r4, r3, #8
				          I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, FIFO_R_W+(i+1));
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	3375      	adds	r3, #117	; 0x75
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	4931      	ldr	r1, [pc, #196]	; (8000b9c <MPU9250_Self_Test+0x1a4>)
 8000ad6:	2268      	movs	r2, #104	; 0x68
 8000ad8:	c903      	ldmia	r1, {r0, r1}
 8000ada:	f7ff fed0 	bl	800087e <I2C_Master_Read_Register>
 8000ade:	4603      	mov	r3, r0
		accl_offset_x += (I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, FIFO_R_W+(i+0)) << 8) |
 8000ae0:	4323      	orrs	r3, r4
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	617b      	str	r3, [r7, #20]
		accl_offset_y += (I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, FIFO_R_W+(i+2)) << 8) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	3376      	adds	r3, #118	; 0x76
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	492a      	ldr	r1, [pc, #168]	; (8000b9c <MPU9250_Self_Test+0x1a4>)
 8000af2:	2268      	movs	r2, #104	; 0x68
 8000af4:	c903      	ldmia	r1, {r0, r1}
 8000af6:	f7ff fec2 	bl	800087e <I2C_Master_Read_Register>
 8000afa:	4603      	mov	r3, r0
 8000afc:	021c      	lsls	r4, r3, #8
				          I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, FIFO_R_W+(i+3));
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	3377      	adds	r3, #119	; 0x77
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	4925      	ldr	r1, [pc, #148]	; (8000b9c <MPU9250_Self_Test+0x1a4>)
 8000b08:	2268      	movs	r2, #104	; 0x68
 8000b0a:	c903      	ldmia	r1, {r0, r1}
 8000b0c:	f7ff feb7 	bl	800087e <I2C_Master_Read_Register>
 8000b10:	4603      	mov	r3, r0
		accl_offset_y += (I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, FIFO_R_W+(i+2)) << 8) |
 8000b12:	4323      	orrs	r3, r4
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4413      	add	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
		accl_offset_z += (I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, FIFO_R_W+(i+4)) << 8) |
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	3378      	adds	r3, #120	; 0x78
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	491e      	ldr	r1, [pc, #120]	; (8000b9c <MPU9250_Self_Test+0x1a4>)
 8000b24:	2268      	movs	r2, #104	; 0x68
 8000b26:	c903      	ldmia	r1, {r0, r1}
 8000b28:	f7ff fea9 	bl	800087e <I2C_Master_Read_Register>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	021c      	lsls	r4, r3, #8
				          I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, FIFO_R_W+(i+5));
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	3379      	adds	r3, #121	; 0x79
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	4918      	ldr	r1, [pc, #96]	; (8000b9c <MPU9250_Self_Test+0x1a4>)
 8000b3a:	2268      	movs	r2, #104	; 0x68
 8000b3c:	c903      	ldmia	r1, {r0, r1}
 8000b3e:	f7ff fe9e 	bl	800087e <I2C_Master_Read_Register>
 8000b42:	4603      	mov	r3, r0
		accl_offset_z += (I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, FIFO_R_W+(i+4)) << 8) |
 8000b44:	4323      	orrs	r3, r4
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4413      	add	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < packet_len; i++)
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	dbad      	blt.n	8000ab6 <MPU9250_Self_Test+0xbe>
	}

	accl_offset_x = accl_offset_x / packet_len;
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b62:	617b      	str	r3, [r7, #20]
	accl_offset_y = accl_offset_y / packet_len;
 8000b64:	693a      	ldr	r2, [r7, #16]
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b6c:	613b      	str	r3, [r7, #16]
	accl_offset_z = accl_offset_z / packet_len;
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	fb92 f3f3 	sdiv	r3, r2, r3
 8000b76:	60fb      	str	r3, [r7, #12]
	printConsole(USART1, "%d,%d,%d\r\n",accl_offset_x,accl_offset_y,accl_offset_z);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	490a      	ldr	r1, [pc, #40]	; (8000bac <MPU9250_Self_Test+0x1b4>)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MPU9250_Self_Test+0x1a0>)
 8000b84:	f7ff fc2c 	bl	80003e0 <printConsole>
//	MPU9250_Reset();
	MPU9250_Init();
 8000b88:	f7ff fef8 	bl	800097c <MPU9250_Init>
}
 8000b8c:	bf00      	nop
 8000b8e:	371c      	adds	r7, #28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd90      	pop	{r4, r7, pc}
 8000b94:	0800188c 	.word	0x0800188c
 8000b98:	40011000 	.word	0x40011000
 8000b9c:	200000b4 	.word	0x200000b4
 8000ba0:	080018f0 	.word	0x080018f0
 8000ba4:	2aaaaaab 	.word	0x2aaaaaab
 8000ba8:	08001904 	.word	0x08001904
 8000bac:	08001918 	.word	0x08001918

08000bb0 <MPU9250_Read_Raw_Accelerometer>:

void MPU9250_Read_Raw_Accelerometer(void)
{
 8000bb0:	b598      	push	{r3, r4, r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	MPU9250_Accelerometer_Axis.X = I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, 0x3B) << 8 |
 8000bb4:	491b      	ldr	r1, [pc, #108]	; (8000c24 <MPU9250_Read_Raw_Accelerometer+0x74>)
 8000bb6:	233b      	movs	r3, #59	; 0x3b
 8000bb8:	2268      	movs	r2, #104	; 0x68
 8000bba:	c903      	ldmia	r1, {r0, r1}
 8000bbc:	f7ff fe5f 	bl	800087e <I2C_Master_Read_Register>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	021c      	lsls	r4, r3, #8
			                  I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, 0x3C) ;
 8000bc4:	4917      	ldr	r1, [pc, #92]	; (8000c24 <MPU9250_Read_Raw_Accelerometer+0x74>)
 8000bc6:	233c      	movs	r3, #60	; 0x3c
 8000bc8:	2268      	movs	r2, #104	; 0x68
 8000bca:	c903      	ldmia	r1, {r0, r1}
 8000bcc:	f7ff fe57 	bl	800087e <I2C_Master_Read_Register>
 8000bd0:	4603      	mov	r3, r0
	MPU9250_Accelerometer_Axis.X = I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, 0x3B) << 8 |
 8000bd2:	4323      	orrs	r3, r4
 8000bd4:	4a14      	ldr	r2, [pc, #80]	; (8000c28 <MPU9250_Read_Raw_Accelerometer+0x78>)
 8000bd6:	6013      	str	r3, [r2, #0]
	MPU9250_Accelerometer_Axis.Y = I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, 0x3D) << 8 |
 8000bd8:	4912      	ldr	r1, [pc, #72]	; (8000c24 <MPU9250_Read_Raw_Accelerometer+0x74>)
 8000bda:	233d      	movs	r3, #61	; 0x3d
 8000bdc:	2268      	movs	r2, #104	; 0x68
 8000bde:	c903      	ldmia	r1, {r0, r1}
 8000be0:	f7ff fe4d 	bl	800087e <I2C_Master_Read_Register>
 8000be4:	4603      	mov	r3, r0
 8000be6:	021c      	lsls	r4, r3, #8
			                  I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, 0x3E) ;
 8000be8:	490e      	ldr	r1, [pc, #56]	; (8000c24 <MPU9250_Read_Raw_Accelerometer+0x74>)
 8000bea:	233e      	movs	r3, #62	; 0x3e
 8000bec:	2268      	movs	r2, #104	; 0x68
 8000bee:	c903      	ldmia	r1, {r0, r1}
 8000bf0:	f7ff fe45 	bl	800087e <I2C_Master_Read_Register>
 8000bf4:	4603      	mov	r3, r0
	MPU9250_Accelerometer_Axis.Y = I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, 0x3D) << 8 |
 8000bf6:	4323      	orrs	r3, r4
 8000bf8:	4a0b      	ldr	r2, [pc, #44]	; (8000c28 <MPU9250_Read_Raw_Accelerometer+0x78>)
 8000bfa:	6053      	str	r3, [r2, #4]
	MPU9250_Accelerometer_Axis.Z = I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, 0x3F) << 8 |
 8000bfc:	4909      	ldr	r1, [pc, #36]	; (8000c24 <MPU9250_Read_Raw_Accelerometer+0x74>)
 8000bfe:	233f      	movs	r3, #63	; 0x3f
 8000c00:	2268      	movs	r2, #104	; 0x68
 8000c02:	c903      	ldmia	r1, {r0, r1}
 8000c04:	f7ff fe3b 	bl	800087e <I2C_Master_Read_Register>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	021c      	lsls	r4, r3, #8
			                  I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, 0x40) ;
 8000c0c:	4905      	ldr	r1, [pc, #20]	; (8000c24 <MPU9250_Read_Raw_Accelerometer+0x74>)
 8000c0e:	2340      	movs	r3, #64	; 0x40
 8000c10:	2268      	movs	r2, #104	; 0x68
 8000c12:	c903      	ldmia	r1, {r0, r1}
 8000c14:	f7ff fe33 	bl	800087e <I2C_Master_Read_Register>
 8000c18:	4603      	mov	r3, r0
	MPU9250_Accelerometer_Axis.Z = I2C_Master_Read_Register(MPU9250, MPU9250_ADDRESS, 0x3F) << 8 |
 8000c1a:	4323      	orrs	r3, r4
 8000c1c:	4a02      	ldr	r2, [pc, #8]	; (8000c28 <MPU9250_Read_Raw_Accelerometer+0x78>)
 8000c1e:	6093      	str	r3, [r2, #8]
}
 8000c20:	bf00      	nop
 8000c22:	bd98      	pop	{r3, r4, r7, pc}
 8000c24:	200000b4 	.word	0x200000b4
 8000c28:	200000e0 	.word	0x200000e0

08000c2c <MCU_Clock_Setup>:
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
	SystemInit();
 8000c32:	f000 f901 	bl	8000e38 <SystemInit>
	uint8_t pll_m = 25;
 8000c36:	2319      	movs	r3, #25
 8000c38:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 192; //192
 8000c3a:	23c0      	movs	r3, #192	; 0xc0
 8000c3c:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 4;
 8000c42:	2304      	movs	r3, #4
 8000c44:	713b      	strb	r3, [r7, #4]
	RCC->PLLCFGR = 0x00000000;
 8000c46:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8000c4c:	4b35      	ldr	r3, [pc, #212]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a34      	ldr	r2, [pc, #208]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c56:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8000c58:	bf00      	nop
 8000c5a:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d0f9      	beq.n	8000c5a <MCU_Clock_Setup+0x2e>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8000c66:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	4a2e      	ldr	r2, [pc, #184]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6413      	str	r3, [r2, #64]	; 0x40
	PWR ->CR |= PWR_CR_VOS;
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <MCU_Clock_Setup+0xfc>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a2c      	ldr	r2, [pc, #176]	; (8000d28 <MCU_Clock_Setup+0xfc>)
 8000c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c7c:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN |
 8000c7e:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <MCU_Clock_Setup+0x100>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a2a      	ldr	r2, [pc, #168]	; (8000d2c <MCU_Clock_Setup+0x100>)
 8000c84:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000c88:	f043 0303 	orr.w	r3, r3, #3
 8000c8c:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8000c8e:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	793a      	ldrb	r2, [r7, #4]
 8000c94:	0611      	lsls	r1, r2, #24
 8000c96:	797a      	ldrb	r2, [r7, #5]
 8000c98:	0412      	lsls	r2, r2, #16
 8000c9a:	4311      	orrs	r1, r2
 8000c9c:	79ba      	ldrb	r2, [r7, #6]
 8000c9e:	0192      	lsls	r2, r2, #6
 8000ca0:	4311      	orrs	r1, r2
 8000ca2:	79fa      	ldrb	r2, [r7, #7]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	4611      	mov	r1, r2
 8000ca8:	4a1e      	ldr	r2, [pc, #120]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000caa:	430b      	orrs	r3, r1
 8000cac:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8000cae:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000cb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cb8:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000cbc:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV2;
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	4a17      	ldr	r2, [pc, #92]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000cc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ccc:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV1;
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000cd0:	4a14      	ldr	r2, [pc, #80]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 8000cd6:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a12      	ldr	r2, [pc, #72]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000cdc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ce0:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8000ce2:	bf00      	nop
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0f9      	beq.n	8000ce4 <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000cf6:	f043 0302 	orr.w	r3, r3, #2
 8000cfa:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 8000cfc:	bf00      	nop
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	2b08      	cmp	r3, #8
 8000d08:	d1f9      	bne.n	8000cfe <MCU_Clock_Setup+0xd2>
SystemCoreClockUpdate();
 8000d0a:	f000 f8ab 	bl	8000e64 <SystemCoreClockUpdate>
RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <MCU_Clock_Setup+0xf8>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000d1a:	bf00      	nop
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40007000 	.word	0x40007000
 8000d2c:	40023c00 	.word	0x40023c00

08000d30 <Delay_Config>:
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <Delay_Config+0x2c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <Delay_Config+0x2c>)
 8000d3c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000d40:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <Delay_Config+0x2c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <Delay_Config+0x2c>)
 8000d4a:	2205      	movs	r2, #5
 8000d4c:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <main>:
//}



int main(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af02      	add	r7, sp, #8

	MCU_Clock_Setup();
 8000d66:	f7ff ff61 	bl	8000c2c <MCU_Clock_Setup>
	Console_Init(USART1, 9600);
 8000d6a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000d6e:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <main+0x60>)
 8000d70:	f7ff fa8e 	bl	8000290 <Console_Init>
	Delay_Config();
 8000d74:	f7ff ffdc 	bl	8000d30 <Delay_Config>
	MPU9250_Hardware_Init();
 8000d78:	f7ff fdec 	bl	8000954 <MPU9250_Hardware_Init>
	MPU9250_Init();
 8000d7c:	f7ff fdfe 	bl	800097c <MPU9250_Init>
	MPU9250_Read_Raw_Accelerometer();
 8000d80:	f7ff ff16 	bl	8000bb0 <MPU9250_Read_Raw_Accelerometer>
	printConsole(USART1, "%d,%d,%d\r\n",MPU9250_Accelerometer_Axis.X,MPU9250_Accelerometer_Axis.Y,MPU9250_Accelerometer_Axis.Z);
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <main+0x64>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <main+0x64>)
 8000d8a:	6859      	ldr	r1, [r3, #4]
 8000d8c:	4b0d      	ldr	r3, [pc, #52]	; (8000dc4 <main+0x64>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	460b      	mov	r3, r1
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <main+0x68>)
 8000d96:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <main+0x60>)
 8000d98:	f7ff fb22 	bl	80003e0 <printConsole>
	MPU9250_Self_Test();
 8000d9c:	f7ff fe2c 	bl	80009f8 <MPU9250_Self_Test>
	MPU9250_Read_Raw_Accelerometer();
 8000da0:	f7ff ff06 	bl	8000bb0 <MPU9250_Read_Raw_Accelerometer>
	printConsole(USART1, "%d,%d,%d\r\n",MPU9250_Accelerometer_Axis.X,MPU9250_Accelerometer_Axis.Y,MPU9250_Accelerometer_Axis.Z);
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <main+0x64>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <main+0x64>)
 8000daa:	6859      	ldr	r1, [r3, #4]
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <main+0x64>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	9300      	str	r3, [sp, #0]
 8000db2:	460b      	mov	r3, r1
 8000db4:	4904      	ldr	r1, [pc, #16]	; (8000dc8 <main+0x68>)
 8000db6:	4802      	ldr	r0, [pc, #8]	; (8000dc0 <main+0x60>)
 8000db8:	f7ff fb12 	bl	80003e0 <printConsole>




    /* Loop forever */
	for(;;)
 8000dbc:	e7fe      	b.n	8000dbc <main+0x5c>
 8000dbe:	bf00      	nop
 8000dc0:	40011000 	.word	0x40011000
 8000dc4:	200000e0 	.word	0x200000e0
 8000dc8:	08001924 	.word	0x08001924

08000dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd4:	4a14      	ldr	r2, [pc, #80]	; (8000e28 <_sbrk+0x5c>)
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <_sbrk+0x60>)
 8000dd8:	1ad3      	subs	r3, r2, r3
 8000dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <_sbrk+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d102      	bne.n	8000dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <_sbrk+0x64>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <_sbrk+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	d207      	bcs.n	8000e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dfc:	f000 f8e2 	bl	8000fc4 <__errno>
 8000e00:	4603      	mov	r3, r0
 8000e02:	220c      	movs	r2, #12
 8000e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	e009      	b.n	8000e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e12:	4b07      	ldr	r3, [pc, #28]	; (8000e30 <_sbrk+0x64>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4413      	add	r3, r2
 8000e1a:	4a05      	ldr	r2, [pc, #20]	; (8000e30 <_sbrk+0x64>)
 8000e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20020000 	.word	0x20020000
 8000e2c:	00000400 	.word	0x00000400
 8000e30:	20000084 	.word	0x20000084
 8000e34:	20000118 	.word	0x20000118

08000e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <SystemInit+0x28>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a07      	ldr	r2, [pc, #28]	; (8000e60 <SystemInit+0x28>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e4c:	4b04      	ldr	r3, [pc, #16]	; (8000e60 <SystemInit+0x28>)
 8000e4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e52:	609a      	str	r2, [r3, #8]
#endif
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2, plln;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	2302      	movs	r3, #2
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000e7e:	4b37      	ldr	r3, [pc, #220]	; (8000f5c <SystemCoreClockUpdate+0xf8>)
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f003 030c 	and.w	r3, r3, #12
 8000e86:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2b08      	cmp	r3, #8
 8000e8c:	d011      	beq.n	8000eb2 <SystemCoreClockUpdate+0x4e>
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	d84a      	bhi.n	8000f2a <SystemCoreClockUpdate+0xc6>
 8000e94:	693b      	ldr	r3, [r7, #16]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <SystemCoreClockUpdate+0x3e>
 8000e9a:	693b      	ldr	r3, [r7, #16]
 8000e9c:	2b04      	cmp	r3, #4
 8000e9e:	d004      	beq.n	8000eaa <SystemCoreClockUpdate+0x46>
 8000ea0:	e043      	b.n	8000f2a <SystemCoreClockUpdate+0xc6>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000ea2:	4b2f      	ldr	r3, [pc, #188]	; (8000f60 <SystemCoreClockUpdate+0xfc>)
 8000ea4:	4a2f      	ldr	r2, [pc, #188]	; (8000f64 <SystemCoreClockUpdate+0x100>)
 8000ea6:	601a      	str	r2, [r3, #0]
      break;
 8000ea8:	e043      	b.n	8000f32 <SystemCoreClockUpdate+0xce>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <SystemCoreClockUpdate+0xfc>)
 8000eac:	4a2e      	ldr	r2, [pc, #184]	; (8000f68 <SystemCoreClockUpdate+0x104>)
 8000eae:	601a      	str	r2, [r3, #0]
      break;
 8000eb0:	e03f      	b.n	8000f32 <SystemCoreClockUpdate+0xce>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	; (8000f5c <SystemCoreClockUpdate+0xf8>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	0d9b      	lsrs	r3, r3, #22
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ebe:	4b27      	ldr	r3, [pc, #156]	; (8000f5c <SystemCoreClockUpdate+0xf8>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000ec6:	607b      	str	r3, [r7, #4]
      plln = RCC->PLLCFGR & RCC_PLLCFGR_PLLN;
 8000ec8:	4b24      	ldr	r3, [pc, #144]	; (8000f5c <SystemCoreClockUpdate+0xf8>)
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	603b      	str	r3, [r7, #0]

      if (pllsource != 0)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00c      	beq.n	8000ef4 <SystemCoreClockUpdate+0x90>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000eda:	4a23      	ldr	r2, [pc, #140]	; (8000f68 <SystemCoreClockUpdate+0x104>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee2:	4a1e      	ldr	r2, [pc, #120]	; (8000f5c <SystemCoreClockUpdate+0xf8>)
 8000ee4:	6852      	ldr	r2, [r2, #4]
 8000ee6:	0992      	lsrs	r2, r2, #6
 8000ee8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000eec:	fb02 f303 	mul.w	r3, r2, r3
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	e00b      	b.n	8000f0c <SystemCoreClockUpdate+0xa8>
      }
      else
      {
        /* HSI used as PLL clock source */

        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000ef4:	4a1b      	ldr	r2, [pc, #108]	; (8000f64 <SystemCoreClockUpdate+0x100>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efc:	4a17      	ldr	r2, [pc, #92]	; (8000f5c <SystemCoreClockUpdate+0xf8>)
 8000efe:	6852      	ldr	r2, [r2, #4]
 8000f00:	0992      	lsrs	r2, r2, #6
 8000f02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <SystemCoreClockUpdate+0xf8>)
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	0c1b      	lsrs	r3, r3, #16
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	3301      	adds	r3, #1
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <SystemCoreClockUpdate+0xfc>)
 8000f26:	6013      	str	r3, [r2, #0]
      break;
 8000f28:	e003      	b.n	8000f32 <SystemCoreClockUpdate+0xce>
    default:
      SystemCoreClock = HSI_VALUE;
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <SystemCoreClockUpdate+0xfc>)
 8000f2c:	4a0d      	ldr	r2, [pc, #52]	; (8000f64 <SystemCoreClockUpdate+0x100>)
 8000f2e:	601a      	str	r2, [r3, #0]
      break;
 8000f30:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <SystemCoreClockUpdate+0xf8>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	091b      	lsrs	r3, r3, #4
 8000f38:	f003 030f 	and.w	r3, r3, #15
 8000f3c:	4a0b      	ldr	r2, [pc, #44]	; (8000f6c <SystemCoreClockUpdate+0x108>)
 8000f3e:	5cd3      	ldrb	r3, [r2, r3]
 8000f40:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <SystemCoreClockUpdate+0xfc>)
 8000f44:	681a      	ldr	r2, [r3, #0]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4c:	4a04      	ldr	r2, [pc, #16]	; (8000f60 <SystemCoreClockUpdate+0xfc>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	20000000 	.word	0x20000000
 8000f64:	00f42400 	.word	0x00f42400
 8000f68:	017d7840 	.word	0x017d7840
 8000f6c:	08001930 	.word	0x08001930

08000f70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f74:	f7ff ff60 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	; (8000fac <LoopForever+0x6>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	; (8000fb0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <LoopForever+0xe>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	; (8000fbc <LoopForever+0x16>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f9e:	f000 f817 	bl	8000fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa2:	f7ff fedd 	bl	8000d60 <main>

08000fa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000fa6:	e7fe      	b.n	8000fa6 <LoopForever>
  ldr   r0, =_estack
 8000fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000fb4:	080019dc 	.word	0x080019dc
  ldr r2, =_sbss
 8000fb8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000fbc:	20000114 	.word	0x20000114

08000fc0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <__errno>:
 8000fc4:	4b01      	ldr	r3, [pc, #4]	; (8000fcc <__errno+0x8>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	20000004 	.word	0x20000004

08000fd0 <__libc_init_array>:
 8000fd0:	b570      	push	{r4, r5, r6, lr}
 8000fd2:	4d0d      	ldr	r5, [pc, #52]	; (8001008 <__libc_init_array+0x38>)
 8000fd4:	4c0d      	ldr	r4, [pc, #52]	; (800100c <__libc_init_array+0x3c>)
 8000fd6:	1b64      	subs	r4, r4, r5
 8000fd8:	10a4      	asrs	r4, r4, #2
 8000fda:	2600      	movs	r6, #0
 8000fdc:	42a6      	cmp	r6, r4
 8000fde:	d109      	bne.n	8000ff4 <__libc_init_array+0x24>
 8000fe0:	4d0b      	ldr	r5, [pc, #44]	; (8001010 <__libc_init_array+0x40>)
 8000fe2:	4c0c      	ldr	r4, [pc, #48]	; (8001014 <__libc_init_array+0x44>)
 8000fe4:	f000 fc46 	bl	8001874 <_init>
 8000fe8:	1b64      	subs	r4, r4, r5
 8000fea:	10a4      	asrs	r4, r4, #2
 8000fec:	2600      	movs	r6, #0
 8000fee:	42a6      	cmp	r6, r4
 8000ff0:	d105      	bne.n	8000ffe <__libc_init_array+0x2e>
 8000ff2:	bd70      	pop	{r4, r5, r6, pc}
 8000ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ff8:	4798      	blx	r3
 8000ffa:	3601      	adds	r6, #1
 8000ffc:	e7ee      	b.n	8000fdc <__libc_init_array+0xc>
 8000ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8001002:	4798      	blx	r3
 8001004:	3601      	adds	r6, #1
 8001006:	e7f2      	b.n	8000fee <__libc_init_array+0x1e>
 8001008:	080019d4 	.word	0x080019d4
 800100c:	080019d4 	.word	0x080019d4
 8001010:	080019d4 	.word	0x080019d4
 8001014:	080019d8 	.word	0x080019d8

08001018 <_vsiprintf_r>:
 8001018:	b500      	push	{lr}
 800101a:	b09b      	sub	sp, #108	; 0x6c
 800101c:	9100      	str	r1, [sp, #0]
 800101e:	9104      	str	r1, [sp, #16]
 8001020:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001024:	9105      	str	r1, [sp, #20]
 8001026:	9102      	str	r1, [sp, #8]
 8001028:	4905      	ldr	r1, [pc, #20]	; (8001040 <_vsiprintf_r+0x28>)
 800102a:	9103      	str	r1, [sp, #12]
 800102c:	4669      	mov	r1, sp
 800102e:	f000 f8cb 	bl	80011c8 <_svfiprintf_r>
 8001032:	9b00      	ldr	r3, [sp, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
 8001038:	b01b      	add	sp, #108	; 0x6c
 800103a:	f85d fb04 	ldr.w	pc, [sp], #4
 800103e:	bf00      	nop
 8001040:	ffff0208 	.word	0xffff0208

08001044 <vsiprintf>:
 8001044:	4613      	mov	r3, r2
 8001046:	460a      	mov	r2, r1
 8001048:	4601      	mov	r1, r0
 800104a:	4802      	ldr	r0, [pc, #8]	; (8001054 <vsiprintf+0x10>)
 800104c:	6800      	ldr	r0, [r0, #0]
 800104e:	f7ff bfe3 	b.w	8001018 <_vsiprintf_r>
 8001052:	bf00      	nop
 8001054:	20000004 	.word	0x20000004

08001058 <__retarget_lock_acquire_recursive>:
 8001058:	4770      	bx	lr

0800105a <__retarget_lock_release_recursive>:
 800105a:	4770      	bx	lr

0800105c <_malloc_r>:
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105e:	1ccd      	adds	r5, r1, #3
 8001060:	f025 0503 	bic.w	r5, r5, #3
 8001064:	3508      	adds	r5, #8
 8001066:	2d0c      	cmp	r5, #12
 8001068:	bf38      	it	cc
 800106a:	250c      	movcc	r5, #12
 800106c:	2d00      	cmp	r5, #0
 800106e:	4606      	mov	r6, r0
 8001070:	db01      	blt.n	8001076 <_malloc_r+0x1a>
 8001072:	42a9      	cmp	r1, r5
 8001074:	d903      	bls.n	800107e <_malloc_r+0x22>
 8001076:	230c      	movs	r3, #12
 8001078:	6033      	str	r3, [r6, #0]
 800107a:	2000      	movs	r0, #0
 800107c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800107e:	f000 fb6f 	bl	8001760 <__malloc_lock>
 8001082:	4921      	ldr	r1, [pc, #132]	; (8001108 <_malloc_r+0xac>)
 8001084:	680a      	ldr	r2, [r1, #0]
 8001086:	4614      	mov	r4, r2
 8001088:	b99c      	cbnz	r4, 80010b2 <_malloc_r+0x56>
 800108a:	4f20      	ldr	r7, [pc, #128]	; (800110c <_malloc_r+0xb0>)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b923      	cbnz	r3, 800109a <_malloc_r+0x3e>
 8001090:	4621      	mov	r1, r4
 8001092:	4630      	mov	r0, r6
 8001094:	f000 fb2c 	bl	80016f0 <_sbrk_r>
 8001098:	6038      	str	r0, [r7, #0]
 800109a:	4629      	mov	r1, r5
 800109c:	4630      	mov	r0, r6
 800109e:	f000 fb27 	bl	80016f0 <_sbrk_r>
 80010a2:	1c43      	adds	r3, r0, #1
 80010a4:	d123      	bne.n	80010ee <_malloc_r+0x92>
 80010a6:	230c      	movs	r3, #12
 80010a8:	6033      	str	r3, [r6, #0]
 80010aa:	4630      	mov	r0, r6
 80010ac:	f000 fb5e 	bl	800176c <__malloc_unlock>
 80010b0:	e7e3      	b.n	800107a <_malloc_r+0x1e>
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	1b5b      	subs	r3, r3, r5
 80010b6:	d417      	bmi.n	80010e8 <_malloc_r+0x8c>
 80010b8:	2b0b      	cmp	r3, #11
 80010ba:	d903      	bls.n	80010c4 <_malloc_r+0x68>
 80010bc:	6023      	str	r3, [r4, #0]
 80010be:	441c      	add	r4, r3
 80010c0:	6025      	str	r5, [r4, #0]
 80010c2:	e004      	b.n	80010ce <_malloc_r+0x72>
 80010c4:	6863      	ldr	r3, [r4, #4]
 80010c6:	42a2      	cmp	r2, r4
 80010c8:	bf0c      	ite	eq
 80010ca:	600b      	streq	r3, [r1, #0]
 80010cc:	6053      	strne	r3, [r2, #4]
 80010ce:	4630      	mov	r0, r6
 80010d0:	f000 fb4c 	bl	800176c <__malloc_unlock>
 80010d4:	f104 000b 	add.w	r0, r4, #11
 80010d8:	1d23      	adds	r3, r4, #4
 80010da:	f020 0007 	bic.w	r0, r0, #7
 80010de:	1ac2      	subs	r2, r0, r3
 80010e0:	d0cc      	beq.n	800107c <_malloc_r+0x20>
 80010e2:	1a1b      	subs	r3, r3, r0
 80010e4:	50a3      	str	r3, [r4, r2]
 80010e6:	e7c9      	b.n	800107c <_malloc_r+0x20>
 80010e8:	4622      	mov	r2, r4
 80010ea:	6864      	ldr	r4, [r4, #4]
 80010ec:	e7cc      	b.n	8001088 <_malloc_r+0x2c>
 80010ee:	1cc4      	adds	r4, r0, #3
 80010f0:	f024 0403 	bic.w	r4, r4, #3
 80010f4:	42a0      	cmp	r0, r4
 80010f6:	d0e3      	beq.n	80010c0 <_malloc_r+0x64>
 80010f8:	1a21      	subs	r1, r4, r0
 80010fa:	4630      	mov	r0, r6
 80010fc:	f000 faf8 	bl	80016f0 <_sbrk_r>
 8001100:	3001      	adds	r0, #1
 8001102:	d1dd      	bne.n	80010c0 <_malloc_r+0x64>
 8001104:	e7cf      	b.n	80010a6 <_malloc_r+0x4a>
 8001106:	bf00      	nop
 8001108:	20000088 	.word	0x20000088
 800110c:	2000008c 	.word	0x2000008c

08001110 <__ssputs_r>:
 8001110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001114:	688e      	ldr	r6, [r1, #8]
 8001116:	429e      	cmp	r6, r3
 8001118:	4682      	mov	sl, r0
 800111a:	460c      	mov	r4, r1
 800111c:	4690      	mov	r8, r2
 800111e:	461f      	mov	r7, r3
 8001120:	d838      	bhi.n	8001194 <__ssputs_r+0x84>
 8001122:	898a      	ldrh	r2, [r1, #12]
 8001124:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001128:	d032      	beq.n	8001190 <__ssputs_r+0x80>
 800112a:	6825      	ldr	r5, [r4, #0]
 800112c:	6909      	ldr	r1, [r1, #16]
 800112e:	eba5 0901 	sub.w	r9, r5, r1
 8001132:	6965      	ldr	r5, [r4, #20]
 8001134:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001138:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800113c:	3301      	adds	r3, #1
 800113e:	444b      	add	r3, r9
 8001140:	106d      	asrs	r5, r5, #1
 8001142:	429d      	cmp	r5, r3
 8001144:	bf38      	it	cc
 8001146:	461d      	movcc	r5, r3
 8001148:	0553      	lsls	r3, r2, #21
 800114a:	d531      	bpl.n	80011b0 <__ssputs_r+0xa0>
 800114c:	4629      	mov	r1, r5
 800114e:	f7ff ff85 	bl	800105c <_malloc_r>
 8001152:	4606      	mov	r6, r0
 8001154:	b950      	cbnz	r0, 800116c <__ssputs_r+0x5c>
 8001156:	230c      	movs	r3, #12
 8001158:	f8ca 3000 	str.w	r3, [sl]
 800115c:	89a3      	ldrh	r3, [r4, #12]
 800115e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001162:	81a3      	strh	r3, [r4, #12]
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800116c:	6921      	ldr	r1, [r4, #16]
 800116e:	464a      	mov	r2, r9
 8001170:	f000 face 	bl	8001710 <memcpy>
 8001174:	89a3      	ldrh	r3, [r4, #12]
 8001176:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800117a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800117e:	81a3      	strh	r3, [r4, #12]
 8001180:	6126      	str	r6, [r4, #16]
 8001182:	6165      	str	r5, [r4, #20]
 8001184:	444e      	add	r6, r9
 8001186:	eba5 0509 	sub.w	r5, r5, r9
 800118a:	6026      	str	r6, [r4, #0]
 800118c:	60a5      	str	r5, [r4, #8]
 800118e:	463e      	mov	r6, r7
 8001190:	42be      	cmp	r6, r7
 8001192:	d900      	bls.n	8001196 <__ssputs_r+0x86>
 8001194:	463e      	mov	r6, r7
 8001196:	4632      	mov	r2, r6
 8001198:	6820      	ldr	r0, [r4, #0]
 800119a:	4641      	mov	r1, r8
 800119c:	f000 fac6 	bl	800172c <memmove>
 80011a0:	68a3      	ldr	r3, [r4, #8]
 80011a2:	6822      	ldr	r2, [r4, #0]
 80011a4:	1b9b      	subs	r3, r3, r6
 80011a6:	4432      	add	r2, r6
 80011a8:	60a3      	str	r3, [r4, #8]
 80011aa:	6022      	str	r2, [r4, #0]
 80011ac:	2000      	movs	r0, #0
 80011ae:	e7db      	b.n	8001168 <__ssputs_r+0x58>
 80011b0:	462a      	mov	r2, r5
 80011b2:	f000 fb31 	bl	8001818 <_realloc_r>
 80011b6:	4606      	mov	r6, r0
 80011b8:	2800      	cmp	r0, #0
 80011ba:	d1e1      	bne.n	8001180 <__ssputs_r+0x70>
 80011bc:	6921      	ldr	r1, [r4, #16]
 80011be:	4650      	mov	r0, sl
 80011c0:	f000 fada 	bl	8001778 <_free_r>
 80011c4:	e7c7      	b.n	8001156 <__ssputs_r+0x46>
	...

080011c8 <_svfiprintf_r>:
 80011c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011cc:	4698      	mov	r8, r3
 80011ce:	898b      	ldrh	r3, [r1, #12]
 80011d0:	061b      	lsls	r3, r3, #24
 80011d2:	b09d      	sub	sp, #116	; 0x74
 80011d4:	4607      	mov	r7, r0
 80011d6:	460d      	mov	r5, r1
 80011d8:	4614      	mov	r4, r2
 80011da:	d50e      	bpl.n	80011fa <_svfiprintf_r+0x32>
 80011dc:	690b      	ldr	r3, [r1, #16]
 80011de:	b963      	cbnz	r3, 80011fa <_svfiprintf_r+0x32>
 80011e0:	2140      	movs	r1, #64	; 0x40
 80011e2:	f7ff ff3b 	bl	800105c <_malloc_r>
 80011e6:	6028      	str	r0, [r5, #0]
 80011e8:	6128      	str	r0, [r5, #16]
 80011ea:	b920      	cbnz	r0, 80011f6 <_svfiprintf_r+0x2e>
 80011ec:	230c      	movs	r3, #12
 80011ee:	603b      	str	r3, [r7, #0]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	e0d1      	b.n	800139a <_svfiprintf_r+0x1d2>
 80011f6:	2340      	movs	r3, #64	; 0x40
 80011f8:	616b      	str	r3, [r5, #20]
 80011fa:	2300      	movs	r3, #0
 80011fc:	9309      	str	r3, [sp, #36]	; 0x24
 80011fe:	2320      	movs	r3, #32
 8001200:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001204:	f8cd 800c 	str.w	r8, [sp, #12]
 8001208:	2330      	movs	r3, #48	; 0x30
 800120a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80013b4 <_svfiprintf_r+0x1ec>
 800120e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001212:	f04f 0901 	mov.w	r9, #1
 8001216:	4623      	mov	r3, r4
 8001218:	469a      	mov	sl, r3
 800121a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800121e:	b10a      	cbz	r2, 8001224 <_svfiprintf_r+0x5c>
 8001220:	2a25      	cmp	r2, #37	; 0x25
 8001222:	d1f9      	bne.n	8001218 <_svfiprintf_r+0x50>
 8001224:	ebba 0b04 	subs.w	fp, sl, r4
 8001228:	d00b      	beq.n	8001242 <_svfiprintf_r+0x7a>
 800122a:	465b      	mov	r3, fp
 800122c:	4622      	mov	r2, r4
 800122e:	4629      	mov	r1, r5
 8001230:	4638      	mov	r0, r7
 8001232:	f7ff ff6d 	bl	8001110 <__ssputs_r>
 8001236:	3001      	adds	r0, #1
 8001238:	f000 80aa 	beq.w	8001390 <_svfiprintf_r+0x1c8>
 800123c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800123e:	445a      	add	r2, fp
 8001240:	9209      	str	r2, [sp, #36]	; 0x24
 8001242:	f89a 3000 	ldrb.w	r3, [sl]
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 80a2 	beq.w	8001390 <_svfiprintf_r+0x1c8>
 800124c:	2300      	movs	r3, #0
 800124e:	f04f 32ff 	mov.w	r2, #4294967295
 8001252:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001256:	f10a 0a01 	add.w	sl, sl, #1
 800125a:	9304      	str	r3, [sp, #16]
 800125c:	9307      	str	r3, [sp, #28]
 800125e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001262:	931a      	str	r3, [sp, #104]	; 0x68
 8001264:	4654      	mov	r4, sl
 8001266:	2205      	movs	r2, #5
 8001268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800126c:	4851      	ldr	r0, [pc, #324]	; (80013b4 <_svfiprintf_r+0x1ec>)
 800126e:	f7fe ffbf 	bl	80001f0 <memchr>
 8001272:	9a04      	ldr	r2, [sp, #16]
 8001274:	b9d8      	cbnz	r0, 80012ae <_svfiprintf_r+0xe6>
 8001276:	06d0      	lsls	r0, r2, #27
 8001278:	bf44      	itt	mi
 800127a:	2320      	movmi	r3, #32
 800127c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001280:	0711      	lsls	r1, r2, #28
 8001282:	bf44      	itt	mi
 8001284:	232b      	movmi	r3, #43	; 0x2b
 8001286:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800128a:	f89a 3000 	ldrb.w	r3, [sl]
 800128e:	2b2a      	cmp	r3, #42	; 0x2a
 8001290:	d015      	beq.n	80012be <_svfiprintf_r+0xf6>
 8001292:	9a07      	ldr	r2, [sp, #28]
 8001294:	4654      	mov	r4, sl
 8001296:	2000      	movs	r0, #0
 8001298:	f04f 0c0a 	mov.w	ip, #10
 800129c:	4621      	mov	r1, r4
 800129e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012a2:	3b30      	subs	r3, #48	; 0x30
 80012a4:	2b09      	cmp	r3, #9
 80012a6:	d94e      	bls.n	8001346 <_svfiprintf_r+0x17e>
 80012a8:	b1b0      	cbz	r0, 80012d8 <_svfiprintf_r+0x110>
 80012aa:	9207      	str	r2, [sp, #28]
 80012ac:	e014      	b.n	80012d8 <_svfiprintf_r+0x110>
 80012ae:	eba0 0308 	sub.w	r3, r0, r8
 80012b2:	fa09 f303 	lsl.w	r3, r9, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	9304      	str	r3, [sp, #16]
 80012ba:	46a2      	mov	sl, r4
 80012bc:	e7d2      	b.n	8001264 <_svfiprintf_r+0x9c>
 80012be:	9b03      	ldr	r3, [sp, #12]
 80012c0:	1d19      	adds	r1, r3, #4
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	9103      	str	r1, [sp, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bfbb      	ittet	lt
 80012ca:	425b      	neglt	r3, r3
 80012cc:	f042 0202 	orrlt.w	r2, r2, #2
 80012d0:	9307      	strge	r3, [sp, #28]
 80012d2:	9307      	strlt	r3, [sp, #28]
 80012d4:	bfb8      	it	lt
 80012d6:	9204      	strlt	r2, [sp, #16]
 80012d8:	7823      	ldrb	r3, [r4, #0]
 80012da:	2b2e      	cmp	r3, #46	; 0x2e
 80012dc:	d10c      	bne.n	80012f8 <_svfiprintf_r+0x130>
 80012de:	7863      	ldrb	r3, [r4, #1]
 80012e0:	2b2a      	cmp	r3, #42	; 0x2a
 80012e2:	d135      	bne.n	8001350 <_svfiprintf_r+0x188>
 80012e4:	9b03      	ldr	r3, [sp, #12]
 80012e6:	1d1a      	adds	r2, r3, #4
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	9203      	str	r2, [sp, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bfb8      	it	lt
 80012f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80012f4:	3402      	adds	r4, #2
 80012f6:	9305      	str	r3, [sp, #20]
 80012f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80013c4 <_svfiprintf_r+0x1fc>
 80012fc:	7821      	ldrb	r1, [r4, #0]
 80012fe:	2203      	movs	r2, #3
 8001300:	4650      	mov	r0, sl
 8001302:	f7fe ff75 	bl	80001f0 <memchr>
 8001306:	b140      	cbz	r0, 800131a <_svfiprintf_r+0x152>
 8001308:	2340      	movs	r3, #64	; 0x40
 800130a:	eba0 000a 	sub.w	r0, r0, sl
 800130e:	fa03 f000 	lsl.w	r0, r3, r0
 8001312:	9b04      	ldr	r3, [sp, #16]
 8001314:	4303      	orrs	r3, r0
 8001316:	3401      	adds	r4, #1
 8001318:	9304      	str	r3, [sp, #16]
 800131a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800131e:	4826      	ldr	r0, [pc, #152]	; (80013b8 <_svfiprintf_r+0x1f0>)
 8001320:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001324:	2206      	movs	r2, #6
 8001326:	f7fe ff63 	bl	80001f0 <memchr>
 800132a:	2800      	cmp	r0, #0
 800132c:	d038      	beq.n	80013a0 <_svfiprintf_r+0x1d8>
 800132e:	4b23      	ldr	r3, [pc, #140]	; (80013bc <_svfiprintf_r+0x1f4>)
 8001330:	bb1b      	cbnz	r3, 800137a <_svfiprintf_r+0x1b2>
 8001332:	9b03      	ldr	r3, [sp, #12]
 8001334:	3307      	adds	r3, #7
 8001336:	f023 0307 	bic.w	r3, r3, #7
 800133a:	3308      	adds	r3, #8
 800133c:	9303      	str	r3, [sp, #12]
 800133e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001340:	4433      	add	r3, r6
 8001342:	9309      	str	r3, [sp, #36]	; 0x24
 8001344:	e767      	b.n	8001216 <_svfiprintf_r+0x4e>
 8001346:	fb0c 3202 	mla	r2, ip, r2, r3
 800134a:	460c      	mov	r4, r1
 800134c:	2001      	movs	r0, #1
 800134e:	e7a5      	b.n	800129c <_svfiprintf_r+0xd4>
 8001350:	2300      	movs	r3, #0
 8001352:	3401      	adds	r4, #1
 8001354:	9305      	str	r3, [sp, #20]
 8001356:	4619      	mov	r1, r3
 8001358:	f04f 0c0a 	mov.w	ip, #10
 800135c:	4620      	mov	r0, r4
 800135e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001362:	3a30      	subs	r2, #48	; 0x30
 8001364:	2a09      	cmp	r2, #9
 8001366:	d903      	bls.n	8001370 <_svfiprintf_r+0x1a8>
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0c5      	beq.n	80012f8 <_svfiprintf_r+0x130>
 800136c:	9105      	str	r1, [sp, #20]
 800136e:	e7c3      	b.n	80012f8 <_svfiprintf_r+0x130>
 8001370:	fb0c 2101 	mla	r1, ip, r1, r2
 8001374:	4604      	mov	r4, r0
 8001376:	2301      	movs	r3, #1
 8001378:	e7f0      	b.n	800135c <_svfiprintf_r+0x194>
 800137a:	ab03      	add	r3, sp, #12
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	462a      	mov	r2, r5
 8001380:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <_svfiprintf_r+0x1f8>)
 8001382:	a904      	add	r1, sp, #16
 8001384:	4638      	mov	r0, r7
 8001386:	f3af 8000 	nop.w
 800138a:	1c42      	adds	r2, r0, #1
 800138c:	4606      	mov	r6, r0
 800138e:	d1d6      	bne.n	800133e <_svfiprintf_r+0x176>
 8001390:	89ab      	ldrh	r3, [r5, #12]
 8001392:	065b      	lsls	r3, r3, #25
 8001394:	f53f af2c 	bmi.w	80011f0 <_svfiprintf_r+0x28>
 8001398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800139a:	b01d      	add	sp, #116	; 0x74
 800139c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013a0:	ab03      	add	r3, sp, #12
 80013a2:	9300      	str	r3, [sp, #0]
 80013a4:	462a      	mov	r2, r5
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <_svfiprintf_r+0x1f8>)
 80013a8:	a904      	add	r1, sp, #16
 80013aa:	4638      	mov	r0, r7
 80013ac:	f000 f87a 	bl	80014a4 <_printf_i>
 80013b0:	e7eb      	b.n	800138a <_svfiprintf_r+0x1c2>
 80013b2:	bf00      	nop
 80013b4:	080019a0 	.word	0x080019a0
 80013b8:	080019aa 	.word	0x080019aa
 80013bc:	00000000 	.word	0x00000000
 80013c0:	08001111 	.word	0x08001111
 80013c4:	080019a6 	.word	0x080019a6

080013c8 <_printf_common>:
 80013c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80013cc:	4616      	mov	r6, r2
 80013ce:	4699      	mov	r9, r3
 80013d0:	688a      	ldr	r2, [r1, #8]
 80013d2:	690b      	ldr	r3, [r1, #16]
 80013d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80013d8:	4293      	cmp	r3, r2
 80013da:	bfb8      	it	lt
 80013dc:	4613      	movlt	r3, r2
 80013de:	6033      	str	r3, [r6, #0]
 80013e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80013e4:	4607      	mov	r7, r0
 80013e6:	460c      	mov	r4, r1
 80013e8:	b10a      	cbz	r2, 80013ee <_printf_common+0x26>
 80013ea:	3301      	adds	r3, #1
 80013ec:	6033      	str	r3, [r6, #0]
 80013ee:	6823      	ldr	r3, [r4, #0]
 80013f0:	0699      	lsls	r1, r3, #26
 80013f2:	bf42      	ittt	mi
 80013f4:	6833      	ldrmi	r3, [r6, #0]
 80013f6:	3302      	addmi	r3, #2
 80013f8:	6033      	strmi	r3, [r6, #0]
 80013fa:	6825      	ldr	r5, [r4, #0]
 80013fc:	f015 0506 	ands.w	r5, r5, #6
 8001400:	d106      	bne.n	8001410 <_printf_common+0x48>
 8001402:	f104 0a19 	add.w	sl, r4, #25
 8001406:	68e3      	ldr	r3, [r4, #12]
 8001408:	6832      	ldr	r2, [r6, #0]
 800140a:	1a9b      	subs	r3, r3, r2
 800140c:	42ab      	cmp	r3, r5
 800140e:	dc26      	bgt.n	800145e <_printf_common+0x96>
 8001410:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001414:	1e13      	subs	r3, r2, #0
 8001416:	6822      	ldr	r2, [r4, #0]
 8001418:	bf18      	it	ne
 800141a:	2301      	movne	r3, #1
 800141c:	0692      	lsls	r2, r2, #26
 800141e:	d42b      	bmi.n	8001478 <_printf_common+0xb0>
 8001420:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001424:	4649      	mov	r1, r9
 8001426:	4638      	mov	r0, r7
 8001428:	47c0      	blx	r8
 800142a:	3001      	adds	r0, #1
 800142c:	d01e      	beq.n	800146c <_printf_common+0xa4>
 800142e:	6823      	ldr	r3, [r4, #0]
 8001430:	68e5      	ldr	r5, [r4, #12]
 8001432:	6832      	ldr	r2, [r6, #0]
 8001434:	f003 0306 	and.w	r3, r3, #6
 8001438:	2b04      	cmp	r3, #4
 800143a:	bf08      	it	eq
 800143c:	1aad      	subeq	r5, r5, r2
 800143e:	68a3      	ldr	r3, [r4, #8]
 8001440:	6922      	ldr	r2, [r4, #16]
 8001442:	bf0c      	ite	eq
 8001444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001448:	2500      	movne	r5, #0
 800144a:	4293      	cmp	r3, r2
 800144c:	bfc4      	itt	gt
 800144e:	1a9b      	subgt	r3, r3, r2
 8001450:	18ed      	addgt	r5, r5, r3
 8001452:	2600      	movs	r6, #0
 8001454:	341a      	adds	r4, #26
 8001456:	42b5      	cmp	r5, r6
 8001458:	d11a      	bne.n	8001490 <_printf_common+0xc8>
 800145a:	2000      	movs	r0, #0
 800145c:	e008      	b.n	8001470 <_printf_common+0xa8>
 800145e:	2301      	movs	r3, #1
 8001460:	4652      	mov	r2, sl
 8001462:	4649      	mov	r1, r9
 8001464:	4638      	mov	r0, r7
 8001466:	47c0      	blx	r8
 8001468:	3001      	adds	r0, #1
 800146a:	d103      	bne.n	8001474 <_printf_common+0xac>
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001474:	3501      	adds	r5, #1
 8001476:	e7c6      	b.n	8001406 <_printf_common+0x3e>
 8001478:	18e1      	adds	r1, r4, r3
 800147a:	1c5a      	adds	r2, r3, #1
 800147c:	2030      	movs	r0, #48	; 0x30
 800147e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001482:	4422      	add	r2, r4
 8001484:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001488:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800148c:	3302      	adds	r3, #2
 800148e:	e7c7      	b.n	8001420 <_printf_common+0x58>
 8001490:	2301      	movs	r3, #1
 8001492:	4622      	mov	r2, r4
 8001494:	4649      	mov	r1, r9
 8001496:	4638      	mov	r0, r7
 8001498:	47c0      	blx	r8
 800149a:	3001      	adds	r0, #1
 800149c:	d0e6      	beq.n	800146c <_printf_common+0xa4>
 800149e:	3601      	adds	r6, #1
 80014a0:	e7d9      	b.n	8001456 <_printf_common+0x8e>
	...

080014a4 <_printf_i>:
 80014a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80014a8:	460c      	mov	r4, r1
 80014aa:	4691      	mov	r9, r2
 80014ac:	7e27      	ldrb	r7, [r4, #24]
 80014ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80014b0:	2f78      	cmp	r7, #120	; 0x78
 80014b2:	4680      	mov	r8, r0
 80014b4:	469a      	mov	sl, r3
 80014b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80014ba:	d807      	bhi.n	80014cc <_printf_i+0x28>
 80014bc:	2f62      	cmp	r7, #98	; 0x62
 80014be:	d80a      	bhi.n	80014d6 <_printf_i+0x32>
 80014c0:	2f00      	cmp	r7, #0
 80014c2:	f000 80d8 	beq.w	8001676 <_printf_i+0x1d2>
 80014c6:	2f58      	cmp	r7, #88	; 0x58
 80014c8:	f000 80a3 	beq.w	8001612 <_printf_i+0x16e>
 80014cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80014d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80014d4:	e03a      	b.n	800154c <_printf_i+0xa8>
 80014d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80014da:	2b15      	cmp	r3, #21
 80014dc:	d8f6      	bhi.n	80014cc <_printf_i+0x28>
 80014de:	a001      	add	r0, pc, #4	; (adr r0, 80014e4 <_printf_i+0x40>)
 80014e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80014e4:	0800153d 	.word	0x0800153d
 80014e8:	08001551 	.word	0x08001551
 80014ec:	080014cd 	.word	0x080014cd
 80014f0:	080014cd 	.word	0x080014cd
 80014f4:	080014cd 	.word	0x080014cd
 80014f8:	080014cd 	.word	0x080014cd
 80014fc:	08001551 	.word	0x08001551
 8001500:	080014cd 	.word	0x080014cd
 8001504:	080014cd 	.word	0x080014cd
 8001508:	080014cd 	.word	0x080014cd
 800150c:	080014cd 	.word	0x080014cd
 8001510:	0800165d 	.word	0x0800165d
 8001514:	08001581 	.word	0x08001581
 8001518:	0800163f 	.word	0x0800163f
 800151c:	080014cd 	.word	0x080014cd
 8001520:	080014cd 	.word	0x080014cd
 8001524:	0800167f 	.word	0x0800167f
 8001528:	080014cd 	.word	0x080014cd
 800152c:	08001581 	.word	0x08001581
 8001530:	080014cd 	.word	0x080014cd
 8001534:	080014cd 	.word	0x080014cd
 8001538:	08001647 	.word	0x08001647
 800153c:	680b      	ldr	r3, [r1, #0]
 800153e:	1d1a      	adds	r2, r3, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	600a      	str	r2, [r1, #0]
 8001544:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001548:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800154c:	2301      	movs	r3, #1
 800154e:	e0a3      	b.n	8001698 <_printf_i+0x1f4>
 8001550:	6825      	ldr	r5, [r4, #0]
 8001552:	6808      	ldr	r0, [r1, #0]
 8001554:	062e      	lsls	r6, r5, #24
 8001556:	f100 0304 	add.w	r3, r0, #4
 800155a:	d50a      	bpl.n	8001572 <_printf_i+0xce>
 800155c:	6805      	ldr	r5, [r0, #0]
 800155e:	600b      	str	r3, [r1, #0]
 8001560:	2d00      	cmp	r5, #0
 8001562:	da03      	bge.n	800156c <_printf_i+0xc8>
 8001564:	232d      	movs	r3, #45	; 0x2d
 8001566:	426d      	negs	r5, r5
 8001568:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800156c:	485e      	ldr	r0, [pc, #376]	; (80016e8 <_printf_i+0x244>)
 800156e:	230a      	movs	r3, #10
 8001570:	e019      	b.n	80015a6 <_printf_i+0x102>
 8001572:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001576:	6805      	ldr	r5, [r0, #0]
 8001578:	600b      	str	r3, [r1, #0]
 800157a:	bf18      	it	ne
 800157c:	b22d      	sxthne	r5, r5
 800157e:	e7ef      	b.n	8001560 <_printf_i+0xbc>
 8001580:	680b      	ldr	r3, [r1, #0]
 8001582:	6825      	ldr	r5, [r4, #0]
 8001584:	1d18      	adds	r0, r3, #4
 8001586:	6008      	str	r0, [r1, #0]
 8001588:	0628      	lsls	r0, r5, #24
 800158a:	d501      	bpl.n	8001590 <_printf_i+0xec>
 800158c:	681d      	ldr	r5, [r3, #0]
 800158e:	e002      	b.n	8001596 <_printf_i+0xf2>
 8001590:	0669      	lsls	r1, r5, #25
 8001592:	d5fb      	bpl.n	800158c <_printf_i+0xe8>
 8001594:	881d      	ldrh	r5, [r3, #0]
 8001596:	4854      	ldr	r0, [pc, #336]	; (80016e8 <_printf_i+0x244>)
 8001598:	2f6f      	cmp	r7, #111	; 0x6f
 800159a:	bf0c      	ite	eq
 800159c:	2308      	moveq	r3, #8
 800159e:	230a      	movne	r3, #10
 80015a0:	2100      	movs	r1, #0
 80015a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80015a6:	6866      	ldr	r6, [r4, #4]
 80015a8:	60a6      	str	r6, [r4, #8]
 80015aa:	2e00      	cmp	r6, #0
 80015ac:	bfa2      	ittt	ge
 80015ae:	6821      	ldrge	r1, [r4, #0]
 80015b0:	f021 0104 	bicge.w	r1, r1, #4
 80015b4:	6021      	strge	r1, [r4, #0]
 80015b6:	b90d      	cbnz	r5, 80015bc <_printf_i+0x118>
 80015b8:	2e00      	cmp	r6, #0
 80015ba:	d04d      	beq.n	8001658 <_printf_i+0x1b4>
 80015bc:	4616      	mov	r6, r2
 80015be:	fbb5 f1f3 	udiv	r1, r5, r3
 80015c2:	fb03 5711 	mls	r7, r3, r1, r5
 80015c6:	5dc7      	ldrb	r7, [r0, r7]
 80015c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80015cc:	462f      	mov	r7, r5
 80015ce:	42bb      	cmp	r3, r7
 80015d0:	460d      	mov	r5, r1
 80015d2:	d9f4      	bls.n	80015be <_printf_i+0x11a>
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d10b      	bne.n	80015f0 <_printf_i+0x14c>
 80015d8:	6823      	ldr	r3, [r4, #0]
 80015da:	07df      	lsls	r7, r3, #31
 80015dc:	d508      	bpl.n	80015f0 <_printf_i+0x14c>
 80015de:	6923      	ldr	r3, [r4, #16]
 80015e0:	6861      	ldr	r1, [r4, #4]
 80015e2:	4299      	cmp	r1, r3
 80015e4:	bfde      	ittt	le
 80015e6:	2330      	movle	r3, #48	; 0x30
 80015e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80015ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80015f0:	1b92      	subs	r2, r2, r6
 80015f2:	6122      	str	r2, [r4, #16]
 80015f4:	f8cd a000 	str.w	sl, [sp]
 80015f8:	464b      	mov	r3, r9
 80015fa:	aa03      	add	r2, sp, #12
 80015fc:	4621      	mov	r1, r4
 80015fe:	4640      	mov	r0, r8
 8001600:	f7ff fee2 	bl	80013c8 <_printf_common>
 8001604:	3001      	adds	r0, #1
 8001606:	d14c      	bne.n	80016a2 <_printf_i+0x1fe>
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	b004      	add	sp, #16
 800160e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001612:	4835      	ldr	r0, [pc, #212]	; (80016e8 <_printf_i+0x244>)
 8001614:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	680e      	ldr	r6, [r1, #0]
 800161c:	061f      	lsls	r7, r3, #24
 800161e:	f856 5b04 	ldr.w	r5, [r6], #4
 8001622:	600e      	str	r6, [r1, #0]
 8001624:	d514      	bpl.n	8001650 <_printf_i+0x1ac>
 8001626:	07d9      	lsls	r1, r3, #31
 8001628:	bf44      	itt	mi
 800162a:	f043 0320 	orrmi.w	r3, r3, #32
 800162e:	6023      	strmi	r3, [r4, #0]
 8001630:	b91d      	cbnz	r5, 800163a <_printf_i+0x196>
 8001632:	6823      	ldr	r3, [r4, #0]
 8001634:	f023 0320 	bic.w	r3, r3, #32
 8001638:	6023      	str	r3, [r4, #0]
 800163a:	2310      	movs	r3, #16
 800163c:	e7b0      	b.n	80015a0 <_printf_i+0xfc>
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	f043 0320 	orr.w	r3, r3, #32
 8001644:	6023      	str	r3, [r4, #0]
 8001646:	2378      	movs	r3, #120	; 0x78
 8001648:	4828      	ldr	r0, [pc, #160]	; (80016ec <_printf_i+0x248>)
 800164a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800164e:	e7e3      	b.n	8001618 <_printf_i+0x174>
 8001650:	065e      	lsls	r6, r3, #25
 8001652:	bf48      	it	mi
 8001654:	b2ad      	uxthmi	r5, r5
 8001656:	e7e6      	b.n	8001626 <_printf_i+0x182>
 8001658:	4616      	mov	r6, r2
 800165a:	e7bb      	b.n	80015d4 <_printf_i+0x130>
 800165c:	680b      	ldr	r3, [r1, #0]
 800165e:	6826      	ldr	r6, [r4, #0]
 8001660:	6960      	ldr	r0, [r4, #20]
 8001662:	1d1d      	adds	r5, r3, #4
 8001664:	600d      	str	r5, [r1, #0]
 8001666:	0635      	lsls	r5, r6, #24
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	d501      	bpl.n	8001670 <_printf_i+0x1cc>
 800166c:	6018      	str	r0, [r3, #0]
 800166e:	e002      	b.n	8001676 <_printf_i+0x1d2>
 8001670:	0671      	lsls	r1, r6, #25
 8001672:	d5fb      	bpl.n	800166c <_printf_i+0x1c8>
 8001674:	8018      	strh	r0, [r3, #0]
 8001676:	2300      	movs	r3, #0
 8001678:	6123      	str	r3, [r4, #16]
 800167a:	4616      	mov	r6, r2
 800167c:	e7ba      	b.n	80015f4 <_printf_i+0x150>
 800167e:	680b      	ldr	r3, [r1, #0]
 8001680:	1d1a      	adds	r2, r3, #4
 8001682:	600a      	str	r2, [r1, #0]
 8001684:	681e      	ldr	r6, [r3, #0]
 8001686:	6862      	ldr	r2, [r4, #4]
 8001688:	2100      	movs	r1, #0
 800168a:	4630      	mov	r0, r6
 800168c:	f7fe fdb0 	bl	80001f0 <memchr>
 8001690:	b108      	cbz	r0, 8001696 <_printf_i+0x1f2>
 8001692:	1b80      	subs	r0, r0, r6
 8001694:	6060      	str	r0, [r4, #4]
 8001696:	6863      	ldr	r3, [r4, #4]
 8001698:	6123      	str	r3, [r4, #16]
 800169a:	2300      	movs	r3, #0
 800169c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80016a0:	e7a8      	b.n	80015f4 <_printf_i+0x150>
 80016a2:	6923      	ldr	r3, [r4, #16]
 80016a4:	4632      	mov	r2, r6
 80016a6:	4649      	mov	r1, r9
 80016a8:	4640      	mov	r0, r8
 80016aa:	47d0      	blx	sl
 80016ac:	3001      	adds	r0, #1
 80016ae:	d0ab      	beq.n	8001608 <_printf_i+0x164>
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	079b      	lsls	r3, r3, #30
 80016b4:	d413      	bmi.n	80016de <_printf_i+0x23a>
 80016b6:	68e0      	ldr	r0, [r4, #12]
 80016b8:	9b03      	ldr	r3, [sp, #12]
 80016ba:	4298      	cmp	r0, r3
 80016bc:	bfb8      	it	lt
 80016be:	4618      	movlt	r0, r3
 80016c0:	e7a4      	b.n	800160c <_printf_i+0x168>
 80016c2:	2301      	movs	r3, #1
 80016c4:	4632      	mov	r2, r6
 80016c6:	4649      	mov	r1, r9
 80016c8:	4640      	mov	r0, r8
 80016ca:	47d0      	blx	sl
 80016cc:	3001      	adds	r0, #1
 80016ce:	d09b      	beq.n	8001608 <_printf_i+0x164>
 80016d0:	3501      	adds	r5, #1
 80016d2:	68e3      	ldr	r3, [r4, #12]
 80016d4:	9903      	ldr	r1, [sp, #12]
 80016d6:	1a5b      	subs	r3, r3, r1
 80016d8:	42ab      	cmp	r3, r5
 80016da:	dcf2      	bgt.n	80016c2 <_printf_i+0x21e>
 80016dc:	e7eb      	b.n	80016b6 <_printf_i+0x212>
 80016de:	2500      	movs	r5, #0
 80016e0:	f104 0619 	add.w	r6, r4, #25
 80016e4:	e7f5      	b.n	80016d2 <_printf_i+0x22e>
 80016e6:	bf00      	nop
 80016e8:	080019b1 	.word	0x080019b1
 80016ec:	080019c2 	.word	0x080019c2

080016f0 <_sbrk_r>:
 80016f0:	b538      	push	{r3, r4, r5, lr}
 80016f2:	4d06      	ldr	r5, [pc, #24]	; (800170c <_sbrk_r+0x1c>)
 80016f4:	2300      	movs	r3, #0
 80016f6:	4604      	mov	r4, r0
 80016f8:	4608      	mov	r0, r1
 80016fa:	602b      	str	r3, [r5, #0]
 80016fc:	f7ff fb66 	bl	8000dcc <_sbrk>
 8001700:	1c43      	adds	r3, r0, #1
 8001702:	d102      	bne.n	800170a <_sbrk_r+0x1a>
 8001704:	682b      	ldr	r3, [r5, #0]
 8001706:	b103      	cbz	r3, 800170a <_sbrk_r+0x1a>
 8001708:	6023      	str	r3, [r4, #0]
 800170a:	bd38      	pop	{r3, r4, r5, pc}
 800170c:	20000110 	.word	0x20000110

08001710 <memcpy>:
 8001710:	440a      	add	r2, r1
 8001712:	4291      	cmp	r1, r2
 8001714:	f100 33ff 	add.w	r3, r0, #4294967295
 8001718:	d100      	bne.n	800171c <memcpy+0xc>
 800171a:	4770      	bx	lr
 800171c:	b510      	push	{r4, lr}
 800171e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001726:	4291      	cmp	r1, r2
 8001728:	d1f9      	bne.n	800171e <memcpy+0xe>
 800172a:	bd10      	pop	{r4, pc}

0800172c <memmove>:
 800172c:	4288      	cmp	r0, r1
 800172e:	b510      	push	{r4, lr}
 8001730:	eb01 0402 	add.w	r4, r1, r2
 8001734:	d902      	bls.n	800173c <memmove+0x10>
 8001736:	4284      	cmp	r4, r0
 8001738:	4623      	mov	r3, r4
 800173a:	d807      	bhi.n	800174c <memmove+0x20>
 800173c:	1e43      	subs	r3, r0, #1
 800173e:	42a1      	cmp	r1, r4
 8001740:	d008      	beq.n	8001754 <memmove+0x28>
 8001742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001746:	f803 2f01 	strb.w	r2, [r3, #1]!
 800174a:	e7f8      	b.n	800173e <memmove+0x12>
 800174c:	4402      	add	r2, r0
 800174e:	4601      	mov	r1, r0
 8001750:	428a      	cmp	r2, r1
 8001752:	d100      	bne.n	8001756 <memmove+0x2a>
 8001754:	bd10      	pop	{r4, pc}
 8001756:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800175a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800175e:	e7f7      	b.n	8001750 <memmove+0x24>

08001760 <__malloc_lock>:
 8001760:	4801      	ldr	r0, [pc, #4]	; (8001768 <__malloc_lock+0x8>)
 8001762:	f7ff bc79 	b.w	8001058 <__retarget_lock_acquire_recursive>
 8001766:	bf00      	nop
 8001768:	20000108 	.word	0x20000108

0800176c <__malloc_unlock>:
 800176c:	4801      	ldr	r0, [pc, #4]	; (8001774 <__malloc_unlock+0x8>)
 800176e:	f7ff bc74 	b.w	800105a <__retarget_lock_release_recursive>
 8001772:	bf00      	nop
 8001774:	20000108 	.word	0x20000108

08001778 <_free_r>:
 8001778:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800177a:	2900      	cmp	r1, #0
 800177c:	d048      	beq.n	8001810 <_free_r+0x98>
 800177e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001782:	9001      	str	r0, [sp, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	f1a1 0404 	sub.w	r4, r1, #4
 800178a:	bfb8      	it	lt
 800178c:	18e4      	addlt	r4, r4, r3
 800178e:	f7ff ffe7 	bl	8001760 <__malloc_lock>
 8001792:	4a20      	ldr	r2, [pc, #128]	; (8001814 <_free_r+0x9c>)
 8001794:	9801      	ldr	r0, [sp, #4]
 8001796:	6813      	ldr	r3, [r2, #0]
 8001798:	4615      	mov	r5, r2
 800179a:	b933      	cbnz	r3, 80017aa <_free_r+0x32>
 800179c:	6063      	str	r3, [r4, #4]
 800179e:	6014      	str	r4, [r2, #0]
 80017a0:	b003      	add	sp, #12
 80017a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80017a6:	f7ff bfe1 	b.w	800176c <__malloc_unlock>
 80017aa:	42a3      	cmp	r3, r4
 80017ac:	d90b      	bls.n	80017c6 <_free_r+0x4e>
 80017ae:	6821      	ldr	r1, [r4, #0]
 80017b0:	1862      	adds	r2, r4, r1
 80017b2:	4293      	cmp	r3, r2
 80017b4:	bf04      	itt	eq
 80017b6:	681a      	ldreq	r2, [r3, #0]
 80017b8:	685b      	ldreq	r3, [r3, #4]
 80017ba:	6063      	str	r3, [r4, #4]
 80017bc:	bf04      	itt	eq
 80017be:	1852      	addeq	r2, r2, r1
 80017c0:	6022      	streq	r2, [r4, #0]
 80017c2:	602c      	str	r4, [r5, #0]
 80017c4:	e7ec      	b.n	80017a0 <_free_r+0x28>
 80017c6:	461a      	mov	r2, r3
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	b10b      	cbz	r3, 80017d0 <_free_r+0x58>
 80017cc:	42a3      	cmp	r3, r4
 80017ce:	d9fa      	bls.n	80017c6 <_free_r+0x4e>
 80017d0:	6811      	ldr	r1, [r2, #0]
 80017d2:	1855      	adds	r5, r2, r1
 80017d4:	42a5      	cmp	r5, r4
 80017d6:	d10b      	bne.n	80017f0 <_free_r+0x78>
 80017d8:	6824      	ldr	r4, [r4, #0]
 80017da:	4421      	add	r1, r4
 80017dc:	1854      	adds	r4, r2, r1
 80017de:	42a3      	cmp	r3, r4
 80017e0:	6011      	str	r1, [r2, #0]
 80017e2:	d1dd      	bne.n	80017a0 <_free_r+0x28>
 80017e4:	681c      	ldr	r4, [r3, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	6053      	str	r3, [r2, #4]
 80017ea:	4421      	add	r1, r4
 80017ec:	6011      	str	r1, [r2, #0]
 80017ee:	e7d7      	b.n	80017a0 <_free_r+0x28>
 80017f0:	d902      	bls.n	80017f8 <_free_r+0x80>
 80017f2:	230c      	movs	r3, #12
 80017f4:	6003      	str	r3, [r0, #0]
 80017f6:	e7d3      	b.n	80017a0 <_free_r+0x28>
 80017f8:	6825      	ldr	r5, [r4, #0]
 80017fa:	1961      	adds	r1, r4, r5
 80017fc:	428b      	cmp	r3, r1
 80017fe:	bf04      	itt	eq
 8001800:	6819      	ldreq	r1, [r3, #0]
 8001802:	685b      	ldreq	r3, [r3, #4]
 8001804:	6063      	str	r3, [r4, #4]
 8001806:	bf04      	itt	eq
 8001808:	1949      	addeq	r1, r1, r5
 800180a:	6021      	streq	r1, [r4, #0]
 800180c:	6054      	str	r4, [r2, #4]
 800180e:	e7c7      	b.n	80017a0 <_free_r+0x28>
 8001810:	b003      	add	sp, #12
 8001812:	bd30      	pop	{r4, r5, pc}
 8001814:	20000088 	.word	0x20000088

08001818 <_realloc_r>:
 8001818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181a:	4607      	mov	r7, r0
 800181c:	4614      	mov	r4, r2
 800181e:	460e      	mov	r6, r1
 8001820:	b921      	cbnz	r1, 800182c <_realloc_r+0x14>
 8001822:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001826:	4611      	mov	r1, r2
 8001828:	f7ff bc18 	b.w	800105c <_malloc_r>
 800182c:	b922      	cbnz	r2, 8001838 <_realloc_r+0x20>
 800182e:	f7ff ffa3 	bl	8001778 <_free_r>
 8001832:	4625      	mov	r5, r4
 8001834:	4628      	mov	r0, r5
 8001836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001838:	f000 f814 	bl	8001864 <_malloc_usable_size_r>
 800183c:	42a0      	cmp	r0, r4
 800183e:	d20f      	bcs.n	8001860 <_realloc_r+0x48>
 8001840:	4621      	mov	r1, r4
 8001842:	4638      	mov	r0, r7
 8001844:	f7ff fc0a 	bl	800105c <_malloc_r>
 8001848:	4605      	mov	r5, r0
 800184a:	2800      	cmp	r0, #0
 800184c:	d0f2      	beq.n	8001834 <_realloc_r+0x1c>
 800184e:	4631      	mov	r1, r6
 8001850:	4622      	mov	r2, r4
 8001852:	f7ff ff5d 	bl	8001710 <memcpy>
 8001856:	4631      	mov	r1, r6
 8001858:	4638      	mov	r0, r7
 800185a:	f7ff ff8d 	bl	8001778 <_free_r>
 800185e:	e7e9      	b.n	8001834 <_realloc_r+0x1c>
 8001860:	4635      	mov	r5, r6
 8001862:	e7e7      	b.n	8001834 <_realloc_r+0x1c>

08001864 <_malloc_usable_size_r>:
 8001864:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001868:	1f18      	subs	r0, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	bfbc      	itt	lt
 800186e:	580b      	ldrlt	r3, [r1, r0]
 8001870:	18c0      	addlt	r0, r0, r3
 8001872:	4770      	bx	lr

08001874 <_init>:
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001876:	bf00      	nop
 8001878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187a:	bc08      	pop	{r3}
 800187c:	469e      	mov	lr, r3
 800187e:	4770      	bx	lr

08001880 <_fini>:
 8001880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001882:	bf00      	nop
 8001884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001886:	bc08      	pop	{r3}
 8001888:	469e      	mov	lr, r3
 800188a:	4770      	bx	lr
