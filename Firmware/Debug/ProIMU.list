
ProIMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ff8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080071bc  080071bc  000171bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007214  08007214  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  08007214  08007214  00017214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800721c  0800721c  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08007224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c18  20000190  080073b4  00020190  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001da8  080073b4  00021da8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fb9  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039be  00000000  00000000  00038179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  0003bb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b18  00000000  00000000  0003c7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225a1  00000000  00000000  0003d2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a2d  00000000  00000000  0005f881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4fe1  00000000  00000000  000732ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012828f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003180  00000000  00000000  001282e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000190 	.word	0x20000190
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080071a4 	.word	0x080071a4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000194 	.word	0x20000194
 8000200:	080071a4 	.word	0x080071a4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
static void MX_GPIO_Init(void);



int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	HAL_Init();
 8000500:	f000 fdb2 	bl	8001068 <HAL_Init>
	SystemClock_Config();
 8000504:	f000 f80a 	bl	800051c <SystemClock_Config>
	MX_GPIO_Init();
 8000508:	f000 f872 	bl	80005f0 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 800050c:	f006 f8ba 	bl	8006684 <MX_USB_DEVICE_Init>
	BMP280_Init(I2C1);
 8000510:	4801      	ldr	r0, [pc, #4]	; (8000518 <main+0x1c>)
 8000512:	f000 f933 	bl	800077c <BMP280_Init>



  while (1)
 8000516:	e7fe      	b.n	8000516 <main+0x1a>
 8000518:	40005400 	.word	0x40005400

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 031c 	add.w	r3, r7, #28
 8000526:	2234      	movs	r2, #52	; 0x34
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f006 fe32 	bl	8007194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000540:	2300      	movs	r3, #0
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <SystemClock_Config+0xcc>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000548:	4a27      	ldr	r2, [pc, #156]	; (80005e8 <SystemClock_Config+0xcc>)
 800054a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054e:	6413      	str	r3, [r2, #64]	; 0x40
 8000550:	4b25      	ldr	r3, [pc, #148]	; (80005e8 <SystemClock_Config+0xcc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800055c:	2300      	movs	r3, #0
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	4b22      	ldr	r3, [pc, #136]	; (80005ec <SystemClock_Config+0xd0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a21      	ldr	r2, [pc, #132]	; (80005ec <SystemClock_Config+0xd0>)
 8000566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800056a:	6013      	str	r3, [r2, #0]
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <SystemClock_Config+0xd0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000578:	2301      	movs	r3, #1
 800057a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800057c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000580:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000582:	2302      	movs	r3, #2
 8000584:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000586:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800058a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800058c:	2308      	movs	r3, #8
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000590:	2360      	movs	r3, #96	; 0x60
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000594:	2302      	movs	r3, #2
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000598:	2304      	movs	r3, #4
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800059c:	2302      	movs	r3, #2
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a0:	f107 031c 	add.w	r3, r7, #28
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fdeb 	bl	8003180 <HAL_RCC_OscConfig>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005b0:	f000 f846 	bl	8000640 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b4:	230f      	movs	r3, #15
 80005b6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b8:	2302      	movs	r3, #2
 80005ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005ca:	f107 0308 	add.w	r3, r7, #8
 80005ce:	2103      	movs	r1, #3
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 fa35 	bl	8002a40 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005dc:	f000 f830 	bl	8000640 <Error_Handler>
  }
}
 80005e0:	bf00      	nop
 80005e2:	3750      	adds	r7, #80	; 0x50
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_GPIO_Init+0x4c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a0f      	ldr	r2, [pc, #60]	; (800063c <MX_GPIO_Init+0x4c>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <MX_GPIO_Init+0x4c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_GPIO_Init+0x4c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a08      	ldr	r2, [pc, #32]	; (800063c <MX_GPIO_Init+0x4c>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_GPIO_Init+0x4c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]

}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800

08000640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000644:	b672      	cpsid	i
}
 8000646:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000648:	e7fe      	b.n	8000648 <Error_Handler+0x8>
	...

0800064c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800064c:	b480      	push	{r7}
 800064e:	b083      	sub	sp, #12
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <HAL_MspInit+0x4c>)
 8000658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800065a:	4a0f      	ldr	r2, [pc, #60]	; (8000698 <HAL_MspInit+0x4c>)
 800065c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000660:	6453      	str	r3, [r2, #68]	; 0x44
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <HAL_MspInit+0x4c>)
 8000664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	603b      	str	r3, [r7, #0]
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <HAL_MspInit+0x4c>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	4a08      	ldr	r2, [pc, #32]	; (8000698 <HAL_MspInit+0x4c>)
 8000678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067c:	6413      	str	r3, [r2, #64]	; 0x40
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <HAL_MspInit+0x4c>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a0:	e7fe      	b.n	80006a0 <NMI_Handler+0x4>

080006a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a6:	e7fe      	b.n	80006a6 <HardFault_Handler+0x4>

080006a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006ac:	e7fe      	b.n	80006ac <MemManage_Handler+0x4>

080006ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b2:	e7fe      	b.n	80006b2 <BusFault_Handler+0x4>

080006b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <UsageFault_Handler+0x4>

080006ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ba:	b480      	push	{r7}
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e2:	4770      	bx	lr

080006e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e8:	f000 fd10 	bl	800110c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <OTG_FS_IRQHandler+0x10>)
 80006f6:	f001 f92a 	bl	800194e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200019a0 	.word	0x200019a0

08000704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <SystemInit+0x20>)
 800070a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800070e:	4a05      	ldr	r2, [pc, #20]	; (8000724 <SystemInit+0x20>)
 8000710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000760 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800072e:	490e      	ldr	r1, [pc, #56]	; (8000768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000730:	4a0e      	ldr	r2, [pc, #56]	; (800076c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000734:	e002      	b.n	800073c <LoopCopyDataInit>

08000736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800073a:	3304      	adds	r3, #4

0800073c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800073c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000740:	d3f9      	bcc.n	8000736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000744:	4c0b      	ldr	r4, [pc, #44]	; (8000774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000748:	e001      	b.n	800074e <LoopFillZerobss>

0800074a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800074a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800074c:	3204      	adds	r2, #4

0800074e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000750:	d3fb      	bcc.n	800074a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000752:	f7ff ffd7 	bl	8000704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000756:	f006 fcf9 	bl	800714c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800075a:	f7ff fecf 	bl	80004fc <main>
  bx  lr    
 800075e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000760:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000768:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 800076c:	08007224 	.word	0x08007224
  ldr r2, =_sbss
 8000770:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000774:	20001da8 	.word	0x20001da8

08000778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000778:	e7fe      	b.n	8000778 <ADC_IRQHandler>
	...

0800077c <BMP280_Init>:

#include "BMP280.h"


void BMP280_Init(I2C_TypeDef *PORT)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b087      	sub	sp, #28
 8000780:	af02      	add	r7, sp, #8
 8000782:	6078      	str	r0, [r7, #4]
	int read = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
	BMP280_I2C_Struct.I2C = PORT;
 8000788:	4ab0      	ldr	r2, [pc, #704]	; (8000a4c <BMP280_Init+0x2d0>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	6013      	str	r3, [r2, #0]
	BMP280_I2C_Struct.mode = I2C_Fast_Mode;
 800078e:	4baf      	ldr	r3, [pc, #700]	; (8000a4c <BMP280_Init+0x2d0>)
 8000790:	2201      	movs	r2, #1
 8000792:	711a      	strb	r2, [r3, #4]
	I2C_Master_Init(BMP280_I2C_Struct);
 8000794:	4bad      	ldr	r3, [pc, #692]	; (8000a4c <BMP280_Init+0x2d0>)
 8000796:	e893 0003 	ldmia.w	r3, {r0, r1}
 800079a:	f000 fa3b 	bl	8000c14 <I2C_Master_Init>

	I2C_Master_Write_Register(BMP280_I2C_Struct, BMP280_Address, BMP280_Reset_Register, 0xb6);
 800079e:	49ab      	ldr	r1, [pc, #684]	; (8000a4c <BMP280_Init+0x2d0>)
 80007a0:	23b6      	movs	r3, #182	; 0xb6
 80007a2:	9300      	str	r3, [sp, #0]
 80007a4:	23e0      	movs	r3, #224	; 0xe0
 80007a6:	2276      	movs	r2, #118	; 0x76
 80007a8:	c903      	ldmia	r1, {r0, r1}
 80007aa:	f000 fb77 	bl	8000e9c <I2C_Master_Write_Register>

	do{
		read = I2C_Master_Read_Register_bit(BMP280_I2C_Struct, BMP280_Address, BMP280_Status_Register, bit_0);
 80007ae:	49a7      	ldr	r1, [pc, #668]	; (8000a4c <BMP280_Init+0x2d0>)
 80007b0:	2301      	movs	r3, #1
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	23f3      	movs	r3, #243	; 0xf3
 80007b6:	2276      	movs	r2, #118	; 0x76
 80007b8:	c903      	ldmia	r1, {r0, r1}
 80007ba:	f000 fc2d 	bl	8001018 <I2C_Master_Read_Register_bit>
 80007be:	60f8      	str	r0, [r7, #12]
	}while((read && (bit_0)));
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1f3      	bne.n	80007ae <BMP280_Init+0x32>


	Temp_Cal.dig_T1 = I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, BMP280_DIG_T1_MSB) << 8 | I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, BMP280_DIG_T1_LSB);
 80007c6:	49a1      	ldr	r1, [pc, #644]	; (8000a4c <BMP280_Init+0x2d0>)
 80007c8:	2389      	movs	r3, #137	; 0x89
 80007ca:	2276      	movs	r2, #118	; 0x76
 80007cc:	c903      	ldmia	r1, {r0, r1}
 80007ce:	f000 fb9b 	bl	8000f08 <I2C_Master_Read_Register>
 80007d2:	4603      	mov	r3, r0
 80007d4:	021c      	lsls	r4, r3, #8
 80007d6:	499d      	ldr	r1, [pc, #628]	; (8000a4c <BMP280_Init+0x2d0>)
 80007d8:	2388      	movs	r3, #136	; 0x88
 80007da:	2276      	movs	r2, #118	; 0x76
 80007dc:	c903      	ldmia	r1, {r0, r1}
 80007de:	f000 fb93 	bl	8000f08 <I2C_Master_Read_Register>
 80007e2:	4603      	mov	r3, r0
 80007e4:	4323      	orrs	r3, r4
 80007e6:	4a9a      	ldr	r2, [pc, #616]	; (8000a50 <BMP280_Init+0x2d4>)
 80007e8:	6013      	str	r3, [r2, #0]
	Temp_Cal.dig_T2 = I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, BMP280_DIG_T2_MSB) << 8 | I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, BMP280_DIG_T2_LSB);
 80007ea:	4998      	ldr	r1, [pc, #608]	; (8000a4c <BMP280_Init+0x2d0>)
 80007ec:	238b      	movs	r3, #139	; 0x8b
 80007ee:	2276      	movs	r2, #118	; 0x76
 80007f0:	c903      	ldmia	r1, {r0, r1}
 80007f2:	f000 fb89 	bl	8000f08 <I2C_Master_Read_Register>
 80007f6:	4603      	mov	r3, r0
 80007f8:	021c      	lsls	r4, r3, #8
 80007fa:	4994      	ldr	r1, [pc, #592]	; (8000a4c <BMP280_Init+0x2d0>)
 80007fc:	238a      	movs	r3, #138	; 0x8a
 80007fe:	2276      	movs	r2, #118	; 0x76
 8000800:	c903      	ldmia	r1, {r0, r1}
 8000802:	f000 fb81 	bl	8000f08 <I2C_Master_Read_Register>
 8000806:	4603      	mov	r3, r0
 8000808:	4323      	orrs	r3, r4
 800080a:	4a91      	ldr	r2, [pc, #580]	; (8000a50 <BMP280_Init+0x2d4>)
 800080c:	6053      	str	r3, [r2, #4]
	if(Temp_Cal.dig_T2 > 32767)
 800080e:	4b90      	ldr	r3, [pc, #576]	; (8000a50 <BMP280_Init+0x2d4>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000816:	db05      	blt.n	8000824 <BMP280_Init+0xa8>
	{
		Temp_Cal.dig_T2 -= 65536;
 8000818:	4b8d      	ldr	r3, [pc, #564]	; (8000a50 <BMP280_Init+0x2d4>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000820:	4a8b      	ldr	r2, [pc, #556]	; (8000a50 <BMP280_Init+0x2d4>)
 8000822:	6053      	str	r3, [r2, #4]
	}
	Temp_Cal.dig_T3 = I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, BMP280_DIG_T3_MSB) << 8 | I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, BMP280_DIG_T3_LSB);
 8000824:	4989      	ldr	r1, [pc, #548]	; (8000a4c <BMP280_Init+0x2d0>)
 8000826:	238d      	movs	r3, #141	; 0x8d
 8000828:	2276      	movs	r2, #118	; 0x76
 800082a:	c903      	ldmia	r1, {r0, r1}
 800082c:	f000 fb6c 	bl	8000f08 <I2C_Master_Read_Register>
 8000830:	4603      	mov	r3, r0
 8000832:	021c      	lsls	r4, r3, #8
 8000834:	4985      	ldr	r1, [pc, #532]	; (8000a4c <BMP280_Init+0x2d0>)
 8000836:	238c      	movs	r3, #140	; 0x8c
 8000838:	2276      	movs	r2, #118	; 0x76
 800083a:	c903      	ldmia	r1, {r0, r1}
 800083c:	f000 fb64 	bl	8000f08 <I2C_Master_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	4323      	orrs	r3, r4
 8000844:	4a82      	ldr	r2, [pc, #520]	; (8000a50 <BMP280_Init+0x2d4>)
 8000846:	6093      	str	r3, [r2, #8]
	if(Temp_Cal.dig_T3 > 32767)
 8000848:	4b81      	ldr	r3, [pc, #516]	; (8000a50 <BMP280_Init+0x2d4>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000850:	db05      	blt.n	800085e <BMP280_Init+0xe2>
	{
		Temp_Cal.dig_T3 -= 65536;
 8000852:	4b7f      	ldr	r3, [pc, #508]	; (8000a50 <BMP280_Init+0x2d4>)
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800085a:	4a7d      	ldr	r2, [pc, #500]	; (8000a50 <BMP280_Init+0x2d4>)
 800085c:	6093      	str	r3, [r2, #8]
	}


	Pres_Cal.dig_P1 = (I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x8F) << 8 | I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x8E));
 800085e:	497b      	ldr	r1, [pc, #492]	; (8000a4c <BMP280_Init+0x2d0>)
 8000860:	238f      	movs	r3, #143	; 0x8f
 8000862:	2276      	movs	r2, #118	; 0x76
 8000864:	c903      	ldmia	r1, {r0, r1}
 8000866:	f000 fb4f 	bl	8000f08 <I2C_Master_Read_Register>
 800086a:	4603      	mov	r3, r0
 800086c:	021c      	lsls	r4, r3, #8
 800086e:	4977      	ldr	r1, [pc, #476]	; (8000a4c <BMP280_Init+0x2d0>)
 8000870:	238e      	movs	r3, #142	; 0x8e
 8000872:	2276      	movs	r2, #118	; 0x76
 8000874:	c903      	ldmia	r1, {r0, r1}
 8000876:	f000 fb47 	bl	8000f08 <I2C_Master_Read_Register>
 800087a:	4603      	mov	r3, r0
 800087c:	4323      	orrs	r3, r4
 800087e:	4a75      	ldr	r2, [pc, #468]	; (8000a54 <BMP280_Init+0x2d8>)
 8000880:	6013      	str	r3, [r2, #0]
	Pres_Cal.dig_P2 = (I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x91) << 8 | I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x90));
 8000882:	4972      	ldr	r1, [pc, #456]	; (8000a4c <BMP280_Init+0x2d0>)
 8000884:	2391      	movs	r3, #145	; 0x91
 8000886:	2276      	movs	r2, #118	; 0x76
 8000888:	c903      	ldmia	r1, {r0, r1}
 800088a:	f000 fb3d 	bl	8000f08 <I2C_Master_Read_Register>
 800088e:	4603      	mov	r3, r0
 8000890:	021c      	lsls	r4, r3, #8
 8000892:	496e      	ldr	r1, [pc, #440]	; (8000a4c <BMP280_Init+0x2d0>)
 8000894:	2390      	movs	r3, #144	; 0x90
 8000896:	2276      	movs	r2, #118	; 0x76
 8000898:	c903      	ldmia	r1, {r0, r1}
 800089a:	f000 fb35 	bl	8000f08 <I2C_Master_Read_Register>
 800089e:	4603      	mov	r3, r0
 80008a0:	4323      	orrs	r3, r4
 80008a2:	4a6c      	ldr	r2, [pc, #432]	; (8000a54 <BMP280_Init+0x2d8>)
 80008a4:	6053      	str	r3, [r2, #4]
	if(Pres_Cal.dig_P2 > 32767)
 80008a6:	4b6b      	ldr	r3, [pc, #428]	; (8000a54 <BMP280_Init+0x2d8>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008ae:	db05      	blt.n	80008bc <BMP280_Init+0x140>
	{
		Pres_Cal.dig_P2 -= 65536;
 80008b0:	4b68      	ldr	r3, [pc, #416]	; (8000a54 <BMP280_Init+0x2d8>)
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80008b8:	4a66      	ldr	r2, [pc, #408]	; (8000a54 <BMP280_Init+0x2d8>)
 80008ba:	6053      	str	r3, [r2, #4]
	}

	Pres_Cal.dig_P3 = (I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x93) << 8 | I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x92));
 80008bc:	4963      	ldr	r1, [pc, #396]	; (8000a4c <BMP280_Init+0x2d0>)
 80008be:	2393      	movs	r3, #147	; 0x93
 80008c0:	2276      	movs	r2, #118	; 0x76
 80008c2:	c903      	ldmia	r1, {r0, r1}
 80008c4:	f000 fb20 	bl	8000f08 <I2C_Master_Read_Register>
 80008c8:	4603      	mov	r3, r0
 80008ca:	021c      	lsls	r4, r3, #8
 80008cc:	495f      	ldr	r1, [pc, #380]	; (8000a4c <BMP280_Init+0x2d0>)
 80008ce:	2392      	movs	r3, #146	; 0x92
 80008d0:	2276      	movs	r2, #118	; 0x76
 80008d2:	c903      	ldmia	r1, {r0, r1}
 80008d4:	f000 fb18 	bl	8000f08 <I2C_Master_Read_Register>
 80008d8:	4603      	mov	r3, r0
 80008da:	4323      	orrs	r3, r4
 80008dc:	4a5d      	ldr	r2, [pc, #372]	; (8000a54 <BMP280_Init+0x2d8>)
 80008de:	6093      	str	r3, [r2, #8]
	if(Pres_Cal.dig_P3 > 32767)
 80008e0:	4b5c      	ldr	r3, [pc, #368]	; (8000a54 <BMP280_Init+0x2d8>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008e8:	db05      	blt.n	80008f6 <BMP280_Init+0x17a>
	{
		Pres_Cal.dig_P3 -= 65536;
 80008ea:	4b5a      	ldr	r3, [pc, #360]	; (8000a54 <BMP280_Init+0x2d8>)
 80008ec:	689b      	ldr	r3, [r3, #8]
 80008ee:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80008f2:	4a58      	ldr	r2, [pc, #352]	; (8000a54 <BMP280_Init+0x2d8>)
 80008f4:	6093      	str	r3, [r2, #8]
	}

	Pres_Cal.dig_P4 = (I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x95) << 8 | I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x94));
 80008f6:	4955      	ldr	r1, [pc, #340]	; (8000a4c <BMP280_Init+0x2d0>)
 80008f8:	2395      	movs	r3, #149	; 0x95
 80008fa:	2276      	movs	r2, #118	; 0x76
 80008fc:	c903      	ldmia	r1, {r0, r1}
 80008fe:	f000 fb03 	bl	8000f08 <I2C_Master_Read_Register>
 8000902:	4603      	mov	r3, r0
 8000904:	021c      	lsls	r4, r3, #8
 8000906:	4951      	ldr	r1, [pc, #324]	; (8000a4c <BMP280_Init+0x2d0>)
 8000908:	2394      	movs	r3, #148	; 0x94
 800090a:	2276      	movs	r2, #118	; 0x76
 800090c:	c903      	ldmia	r1, {r0, r1}
 800090e:	f000 fafb 	bl	8000f08 <I2C_Master_Read_Register>
 8000912:	4603      	mov	r3, r0
 8000914:	4323      	orrs	r3, r4
 8000916:	4a4f      	ldr	r2, [pc, #316]	; (8000a54 <BMP280_Init+0x2d8>)
 8000918:	60d3      	str	r3, [r2, #12]
	if(Pres_Cal.dig_P4 > 32767)
 800091a:	4b4e      	ldr	r3, [pc, #312]	; (8000a54 <BMP280_Init+0x2d8>)
 800091c:	68db      	ldr	r3, [r3, #12]
 800091e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000922:	db05      	blt.n	8000930 <BMP280_Init+0x1b4>
	{
		Pres_Cal.dig_P4 -= 65536;
 8000924:	4b4b      	ldr	r3, [pc, #300]	; (8000a54 <BMP280_Init+0x2d8>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800092c:	4a49      	ldr	r2, [pc, #292]	; (8000a54 <BMP280_Init+0x2d8>)
 800092e:	60d3      	str	r3, [r2, #12]
	}

	Pres_Cal.dig_P5 = (I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x97) << 8 | I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x96));
 8000930:	4946      	ldr	r1, [pc, #280]	; (8000a4c <BMP280_Init+0x2d0>)
 8000932:	2397      	movs	r3, #151	; 0x97
 8000934:	2276      	movs	r2, #118	; 0x76
 8000936:	c903      	ldmia	r1, {r0, r1}
 8000938:	f000 fae6 	bl	8000f08 <I2C_Master_Read_Register>
 800093c:	4603      	mov	r3, r0
 800093e:	021c      	lsls	r4, r3, #8
 8000940:	4942      	ldr	r1, [pc, #264]	; (8000a4c <BMP280_Init+0x2d0>)
 8000942:	2396      	movs	r3, #150	; 0x96
 8000944:	2276      	movs	r2, #118	; 0x76
 8000946:	c903      	ldmia	r1, {r0, r1}
 8000948:	f000 fade 	bl	8000f08 <I2C_Master_Read_Register>
 800094c:	4603      	mov	r3, r0
 800094e:	4323      	orrs	r3, r4
 8000950:	4a40      	ldr	r2, [pc, #256]	; (8000a54 <BMP280_Init+0x2d8>)
 8000952:	6113      	str	r3, [r2, #16]
	if(Pres_Cal.dig_P5 > 32767)
 8000954:	4b3f      	ldr	r3, [pc, #252]	; (8000a54 <BMP280_Init+0x2d8>)
 8000956:	691b      	ldr	r3, [r3, #16]
 8000958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800095c:	db05      	blt.n	800096a <BMP280_Init+0x1ee>
	{
		Pres_Cal.dig_P5 -= 65536;
 800095e:	4b3d      	ldr	r3, [pc, #244]	; (8000a54 <BMP280_Init+0x2d8>)
 8000960:	691b      	ldr	r3, [r3, #16]
 8000962:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000966:	4a3b      	ldr	r2, [pc, #236]	; (8000a54 <BMP280_Init+0x2d8>)
 8000968:	6113      	str	r3, [r2, #16]
	}

	Pres_Cal.dig_P6 = (I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x99) << 8 | I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x98));
 800096a:	4938      	ldr	r1, [pc, #224]	; (8000a4c <BMP280_Init+0x2d0>)
 800096c:	2399      	movs	r3, #153	; 0x99
 800096e:	2276      	movs	r2, #118	; 0x76
 8000970:	c903      	ldmia	r1, {r0, r1}
 8000972:	f000 fac9 	bl	8000f08 <I2C_Master_Read_Register>
 8000976:	4603      	mov	r3, r0
 8000978:	021c      	lsls	r4, r3, #8
 800097a:	4934      	ldr	r1, [pc, #208]	; (8000a4c <BMP280_Init+0x2d0>)
 800097c:	2398      	movs	r3, #152	; 0x98
 800097e:	2276      	movs	r2, #118	; 0x76
 8000980:	c903      	ldmia	r1, {r0, r1}
 8000982:	f000 fac1 	bl	8000f08 <I2C_Master_Read_Register>
 8000986:	4603      	mov	r3, r0
 8000988:	4323      	orrs	r3, r4
 800098a:	4a32      	ldr	r2, [pc, #200]	; (8000a54 <BMP280_Init+0x2d8>)
 800098c:	6153      	str	r3, [r2, #20]
	if(Pres_Cal.dig_P6 > 32767)
 800098e:	4b31      	ldr	r3, [pc, #196]	; (8000a54 <BMP280_Init+0x2d8>)
 8000990:	695b      	ldr	r3, [r3, #20]
 8000992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000996:	db05      	blt.n	80009a4 <BMP280_Init+0x228>
	{
		Pres_Cal.dig_P6 -= 65536;
 8000998:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <BMP280_Init+0x2d8>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80009a0:	4a2c      	ldr	r2, [pc, #176]	; (8000a54 <BMP280_Init+0x2d8>)
 80009a2:	6153      	str	r3, [r2, #20]
	}

	Pres_Cal.dig_P7 = (I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x9B) << 8 | I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x9A));
 80009a4:	4929      	ldr	r1, [pc, #164]	; (8000a4c <BMP280_Init+0x2d0>)
 80009a6:	239b      	movs	r3, #155	; 0x9b
 80009a8:	2276      	movs	r2, #118	; 0x76
 80009aa:	c903      	ldmia	r1, {r0, r1}
 80009ac:	f000 faac 	bl	8000f08 <I2C_Master_Read_Register>
 80009b0:	4603      	mov	r3, r0
 80009b2:	021c      	lsls	r4, r3, #8
 80009b4:	4925      	ldr	r1, [pc, #148]	; (8000a4c <BMP280_Init+0x2d0>)
 80009b6:	239a      	movs	r3, #154	; 0x9a
 80009b8:	2276      	movs	r2, #118	; 0x76
 80009ba:	c903      	ldmia	r1, {r0, r1}
 80009bc:	f000 faa4 	bl	8000f08 <I2C_Master_Read_Register>
 80009c0:	4603      	mov	r3, r0
 80009c2:	4323      	orrs	r3, r4
 80009c4:	4a23      	ldr	r2, [pc, #140]	; (8000a54 <BMP280_Init+0x2d8>)
 80009c6:	6193      	str	r3, [r2, #24]
	if(Pres_Cal.dig_P7 > 32767)
 80009c8:	4b22      	ldr	r3, [pc, #136]	; (8000a54 <BMP280_Init+0x2d8>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009d0:	db05      	blt.n	80009de <BMP280_Init+0x262>
	{
		Pres_Cal.dig_P7 -= 65536;
 80009d2:	4b20      	ldr	r3, [pc, #128]	; (8000a54 <BMP280_Init+0x2d8>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80009da:	4a1e      	ldr	r2, [pc, #120]	; (8000a54 <BMP280_Init+0x2d8>)
 80009dc:	6193      	str	r3, [r2, #24]
	}

	Pres_Cal.dig_P8 = (I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x9D) << 8 | I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x9C));
 80009de:	491b      	ldr	r1, [pc, #108]	; (8000a4c <BMP280_Init+0x2d0>)
 80009e0:	239d      	movs	r3, #157	; 0x9d
 80009e2:	2276      	movs	r2, #118	; 0x76
 80009e4:	c903      	ldmia	r1, {r0, r1}
 80009e6:	f000 fa8f 	bl	8000f08 <I2C_Master_Read_Register>
 80009ea:	4603      	mov	r3, r0
 80009ec:	021c      	lsls	r4, r3, #8
 80009ee:	4917      	ldr	r1, [pc, #92]	; (8000a4c <BMP280_Init+0x2d0>)
 80009f0:	239c      	movs	r3, #156	; 0x9c
 80009f2:	2276      	movs	r2, #118	; 0x76
 80009f4:	c903      	ldmia	r1, {r0, r1}
 80009f6:	f000 fa87 	bl	8000f08 <I2C_Master_Read_Register>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4323      	orrs	r3, r4
 80009fe:	4a15      	ldr	r2, [pc, #84]	; (8000a54 <BMP280_Init+0x2d8>)
 8000a00:	61d3      	str	r3, [r2, #28]
	if(Pres_Cal.dig_P8 > 32767)
 8000a02:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <BMP280_Init+0x2d8>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a0a:	db05      	blt.n	8000a18 <BMP280_Init+0x29c>
	{
		Pres_Cal.dig_P8 -= 65536;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <BMP280_Init+0x2d8>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000a14:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <BMP280_Init+0x2d8>)
 8000a16:	61d3      	str	r3, [r2, #28]
	}

	Pres_Cal.dig_P9 = (I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x9F) << 8 | I2C_Master_Read_Register(BMP280_I2C_Struct, BMP280_Address, 0x9E));
 8000a18:	490c      	ldr	r1, [pc, #48]	; (8000a4c <BMP280_Init+0x2d0>)
 8000a1a:	239f      	movs	r3, #159	; 0x9f
 8000a1c:	2276      	movs	r2, #118	; 0x76
 8000a1e:	c903      	ldmia	r1, {r0, r1}
 8000a20:	f000 fa72 	bl	8000f08 <I2C_Master_Read_Register>
 8000a24:	4603      	mov	r3, r0
 8000a26:	021c      	lsls	r4, r3, #8
 8000a28:	4908      	ldr	r1, [pc, #32]	; (8000a4c <BMP280_Init+0x2d0>)
 8000a2a:	239e      	movs	r3, #158	; 0x9e
 8000a2c:	2276      	movs	r2, #118	; 0x76
 8000a2e:	c903      	ldmia	r1, {r0, r1}
 8000a30:	f000 fa6a 	bl	8000f08 <I2C_Master_Read_Register>
 8000a34:	4603      	mov	r3, r0
 8000a36:	4323      	orrs	r3, r4
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <BMP280_Init+0x2d8>)
 8000a3a:	6213      	str	r3, [r2, #32]
	if(Pres_Cal.dig_P9 > 32767)
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <BMP280_Init+0x2d8>)
 8000a3e:	6a1b      	ldr	r3, [r3, #32]
 8000a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a44:	db0c      	blt.n	8000a60 <BMP280_Init+0x2e4>
	{
		Pres_Cal.dig_P9 -= 65536;
 8000a46:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <BMP280_Init+0x2d8>)
 8000a48:	6a1b      	ldr	r3, [r3, #32]
 8000a4a:	e005      	b.n	8000a58 <BMP280_Init+0x2dc>
 8000a4c:	20000488 	.word	0x20000488
 8000a50:	200004c0 	.word	0x200004c0
 8000a54:	200003f8 	.word	0x200003f8
 8000a58:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000a5c:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <BMP280_Init+0x320>)
 8000a5e:	6213      	str	r3, [r2, #32]
	}


	I2C_Master_Write_Register(BMP280_I2C_Struct, BMP280_Address, BMP280_Ctrl_Measurement_Register, BMP280_TEMP_SAMPLING_X2
 8000a60:	490f      	ldr	r1, [pc, #60]	; (8000aa0 <BMP280_Init+0x324>)
 8000a62:	2354      	movs	r3, #84	; 0x54
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	23f4      	movs	r3, #244	; 0xf4
 8000a68:	2276      	movs	r2, #118	; 0x76
 8000a6a:	c903      	ldmia	r1, {r0, r1}
 8000a6c:	f000 fa16 	bl	8000e9c <I2C_Master_Write_Register>
																								 | BMP280_PRES_SAMPLING_X16);

	I2C_Master_Write_Register(BMP280_I2C_Struct, BMP280_Address, BMP280_Config_Register, BMP280_STANDBY_MS_63 | BMP280_FILTER_X4);
 8000a70:	490b      	ldr	r1, [pc, #44]	; (8000aa0 <BMP280_Init+0x324>)
 8000a72:	2328      	movs	r3, #40	; 0x28
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	23f5      	movs	r3, #245	; 0xf5
 8000a78:	2276      	movs	r2, #118	; 0x76
 8000a7a:	c903      	ldmia	r1, {r0, r1}
 8000a7c:	f000 fa0e 	bl	8000e9c <I2C_Master_Write_Register>
	I2C_Master_Write_Register_bits(BMP280_I2C_Struct, BMP280_Address, BMP280_Ctrl_Measurement_Register, 1,  bit_1);
 8000a80:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <BMP280_Init+0x324>)
 8000a82:	2302      	movs	r3, #2
 8000a84:	9301      	str	r3, [sp, #4]
 8000a86:	2301      	movs	r3, #1
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	23f4      	movs	r3, #244	; 0xf4
 8000a8c:	2276      	movs	r2, #118	; 0x76
 8000a8e:	c903      	ldmia	r1, {r0, r1}
 8000a90:	f000 fa88 	bl	8000fa4 <I2C_Master_Write_Register_bits>





}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	200003f8 	.word	0x200003f8
 8000aa0:	20000488 	.word	0x20000488

08000aa4 <GPIO_Pin_Setup>:

#include "GPIO.h"


void GPIO_Pin_Setup(GPIO_TypeDef *Port, uint8_t pin, uint8_t function, uint8_t alternate_function)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	4608      	mov	r0, r1
 8000aae:	4611      	mov	r1, r2
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	70fb      	strb	r3, [r7, #3]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	70bb      	strb	r3, [r7, #2]
 8000aba:	4613      	mov	r3, r2
 8000abc:	707b      	strb	r3, [r7, #1]
	if(Port == GPIOA)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a38      	ldr	r2, [pc, #224]	; (8000ba4 <GPIO_Pin_Setup+0x100>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d106      	bne.n	8000ad4 <GPIO_Pin_Setup+0x30>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOAEN;
 8000ac6:	4b38      	ldr	r3, [pc, #224]	; (8000ba8 <GPIO_Pin_Setup+0x104>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a37      	ldr	r2, [pc, #220]	; (8000ba8 <GPIO_Pin_Setup+0x104>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	e014      	b.n	8000afe <GPIO_Pin_Setup+0x5a>
	}else if(Port == GPIOB)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a35      	ldr	r2, [pc, #212]	; (8000bac <GPIO_Pin_Setup+0x108>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d106      	bne.n	8000aea <GPIO_Pin_Setup+0x46>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOBEN;
 8000adc:	4b32      	ldr	r3, [pc, #200]	; (8000ba8 <GPIO_Pin_Setup+0x104>)
 8000ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae0:	4a31      	ldr	r2, [pc, #196]	; (8000ba8 <GPIO_Pin_Setup+0x104>)
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae8:	e009      	b.n	8000afe <GPIO_Pin_Setup+0x5a>
	}else if(Port == GPIOC)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4a30      	ldr	r2, [pc, #192]	; (8000bb0 <GPIO_Pin_Setup+0x10c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d105      	bne.n	8000afe <GPIO_Pin_Setup+0x5a>
	{
		RCC -> AHB1ENR   |= RCC_AHB1ENR_GPIOCEN;
 8000af2:	4b2d      	ldr	r3, [pc, #180]	; (8000ba8 <GPIO_Pin_Setup+0x104>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	4a2c      	ldr	r2, [pc, #176]	; (8000ba8 <GPIO_Pin_Setup+0x104>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	6313      	str	r3, [r2, #48]	; 0x30
	}

	Port -> MODER   |= ((0xC0  & function)>>6) << (2 * pin);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	78ba      	ldrb	r2, [r7, #2]
 8000b04:	0992      	lsrs	r2, r2, #6
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	4611      	mov	r1, r2
 8000b0a:	78fa      	ldrb	r2, [r7, #3]
 8000b0c:	0052      	lsls	r2, r2, #1
 8000b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b12:	431a      	orrs	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	601a      	str	r2, [r3, #0]
	Port -> OTYPER  |= ((0x30  & function)>>4) << (1 * pin);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	78ba      	ldrb	r2, [r7, #2]
 8000b1e:	0912      	lsrs	r2, r2, #4
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	f002 0103 	and.w	r1, r2, #3
 8000b26:	78fa      	ldrb	r2, [r7, #3]
 8000b28:	fa01 f202 	lsl.w	r2, r1, r2
 8000b2c:	431a      	orrs	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= ((0x0C  & function)>>2) << (2 * pin);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	78ba      	ldrb	r2, [r7, #2]
 8000b38:	0892      	lsrs	r2, r2, #2
 8000b3a:	b2d2      	uxtb	r2, r2
 8000b3c:	f002 0103 	and.w	r1, r2, #3
 8000b40:	78fa      	ldrb	r2, [r7, #3]
 8000b42:	0052      	lsls	r2, r2, #1
 8000b44:	fa01 f202 	lsl.w	r2, r1, r2
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
	Port -> PUPDR   |= ((0x03  & function)>>0) << (2 * pin);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	78ba      	ldrb	r2, [r7, #2]
 8000b54:	f002 0103 	and.w	r1, r2, #3
 8000b58:	78fa      	ldrb	r2, [r7, #3]
 8000b5a:	0052      	lsls	r2, r2, #1
 8000b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b60:	431a      	orrs	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60da      	str	r2, [r3, #12]

	if(pin < 8)Port -> AFR[0] |= ( alternate_function << (4 * (pin)));
 8000b66:	78fb      	ldrb	r3, [r7, #3]
 8000b68:	2b07      	cmp	r3, #7
 8000b6a:	d80a      	bhi.n	8000b82 <GPIO_Pin_Setup+0xde>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6a1b      	ldr	r3, [r3, #32]
 8000b70:	7879      	ldrb	r1, [r7, #1]
 8000b72:	78fa      	ldrb	r2, [r7, #3]
 8000b74:	0092      	lsls	r2, r2, #2
 8000b76:	fa01 f202 	lsl.w	r2, r1, r2
 8000b7a:	431a      	orrs	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	621a      	str	r2, [r3, #32]
	else	   Port -> AFR[1] |= ( alternate_function << (4 * (pin - 8)));

	if (alternate_function == NONE) {}
}
 8000b80:	e00a      	b.n	8000b98 <GPIO_Pin_Setup+0xf4>
	else	   Port -> AFR[1] |= ( alternate_function << (4 * (pin - 8)));
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b86:	7879      	ldrb	r1, [r7, #1]
 8000b88:	78fa      	ldrb	r2, [r7, #3]
 8000b8a:	3a08      	subs	r2, #8
 8000b8c:	0092      	lsls	r2, r2, #2
 8000b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b92:	431a      	orrs	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	40020000 	.word	0x40020000
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	40020800 	.word	0x40020800

08000bb4 <Delay_us>:
	return (0UL);                                                     /* Function successful */
}


__STATIC_INLINE uint32_t Delay_us(float us)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	ed87 0a01 	vstr	s0, [r7, #4]

	SysTick->LOAD = (SystemCoreClock / 1000000) * us;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <Delay_us+0x54>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <Delay_us+0x58>)
 8000bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc8:	0c9b      	lsrs	r3, r3, #18
 8000bca:	ee07 3a90 	vmov	s15, r3
 8000bce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <Delay_us+0x5c>)
 8000bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000be0:	ee17 2a90 	vmov	r2, s15
 8000be4:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <Delay_us+0x5c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000bec:	bf00      	nop
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <Delay_us+0x5c>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d0f9      	beq.n	8000bee <Delay_us+0x3a>
	return (0UL);                                                     /* Function successful */
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	20000000 	.word	0x20000000
 8000c0c:	431bde83 	.word	0x431bde83
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <I2C_Master_Init>:

#include "I2C.h"


void I2C_Master_Init(I2C_Config I2C)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	e883 0003 	stmia.w	r3, {r0, r1}
	if (I2C.I2C == I2C1)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	4a46      	ldr	r2, [pc, #280]	; (8000d3c <I2C_Master_Init+0x128>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d111      	bne.n	8000c4c <I2C_Master_Init+0x38>
		{
			RCC -> APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000c28:	4b45      	ldr	r3, [pc, #276]	; (8000d40 <I2C_Master_Init+0x12c>)
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2c:	4a44      	ldr	r2, [pc, #272]	; (8000d40 <I2C_Master_Init+0x12c>)
 8000c2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c32:	6413      	str	r3, [r2, #64]	; 0x40
			GPIO_Pin_Setup(GPIOB, 6, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN_PULLUP, I2C1_SCL);
 8000c34:	2304      	movs	r3, #4
 8000c36:	229d      	movs	r2, #157	; 0x9d
 8000c38:	2106      	movs	r1, #6
 8000c3a:	4842      	ldr	r0, [pc, #264]	; (8000d44 <I2C_Master_Init+0x130>)
 8000c3c:	f7ff ff32 	bl	8000aa4 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 7, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN_PULLUP, I2C1_SDA);
 8000c40:	2304      	movs	r3, #4
 8000c42:	229d      	movs	r2, #157	; 0x9d
 8000c44:	2107      	movs	r1, #7
 8000c46:	483f      	ldr	r0, [pc, #252]	; (8000d44 <I2C_Master_Init+0x130>)
 8000c48:	f7ff ff2c 	bl	8000aa4 <GPIO_Pin_Setup>

		}
		if (I2C.I2C == I2C2) //PB3 -> SDA	PB4 -> SDA
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	4a3e      	ldr	r2, [pc, #248]	; (8000d48 <I2C_Master_Init+0x134>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d111      	bne.n	8000c78 <I2C_Master_Init+0x64>
		{
			//PB3 -> SDA
			//PB4 -> SDA
			RCC -> APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000c54:	4b3a      	ldr	r3, [pc, #232]	; (8000d40 <I2C_Master_Init+0x12c>)
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	4a39      	ldr	r2, [pc, #228]	; (8000d40 <I2C_Master_Init+0x12c>)
 8000c5a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c5e:	6413      	str	r3, [r2, #64]	; 0x40
			GPIO_Pin_Setup(GPIOB, 3, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN_PULLUP, I2C2_SCL);
 8000c60:	2304      	movs	r3, #4
 8000c62:	229d      	movs	r2, #157	; 0x9d
 8000c64:	2103      	movs	r1, #3
 8000c66:	4837      	ldr	r0, [pc, #220]	; (8000d44 <I2C_Master_Init+0x130>)
 8000c68:	f7ff ff1c 	bl	8000aa4 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 4, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN_PULLUP, I2C2_SDA);
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	229d      	movs	r2, #157	; 0x9d
 8000c70:	2104      	movs	r1, #4
 8000c72:	4834      	ldr	r0, [pc, #208]	; (8000d44 <I2C_Master_Init+0x130>)
 8000c74:	f7ff ff16 	bl	8000aa4 <GPIO_Pin_Setup>

		}
		if (I2C.I2C == I2C3)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	4a34      	ldr	r2, [pc, #208]	; (8000d4c <I2C_Master_Init+0x138>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d117      	bne.n	8000cb0 <I2C_Master_Init+0x9c>
		{
			RCC -> APB1ENR |= RCC_APB1ENR_I2C3EN;
 8000c80:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <I2C_Master_Init+0x12c>)
 8000c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c84:	4a2e      	ldr	r2, [pc, #184]	; (8000d40 <I2C_Master_Init+0x12c>)
 8000c86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c8a:	6413      	str	r3, [r2, #64]	; 0x40
			RCC -> AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8000c8c:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <I2C_Master_Init+0x12c>)
 8000c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c90:	4a2b      	ldr	r2, [pc, #172]	; (8000d40 <I2C_Master_Init+0x12c>)
 8000c92:	f043 0303 	orr.w	r3, r3, #3
 8000c96:	6313      	str	r3, [r2, #48]	; 0x30
			//PA8 -> SDA
			//PB10 -> SCL
			GPIO_Pin_Setup(GPIOA, 8, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN_PULLUP, I2C3_SCL);
 8000c98:	2304      	movs	r3, #4
 8000c9a:	229d      	movs	r2, #157	; 0x9d
 8000c9c:	2108      	movs	r1, #8
 8000c9e:	482c      	ldr	r0, [pc, #176]	; (8000d50 <I2C_Master_Init+0x13c>)
 8000ca0:	f7ff ff00 	bl	8000aa4 <GPIO_Pin_Setup>
			GPIO_Pin_Setup(GPIOB, 10, ALTERNATE_FUNCTION_OUTPUT_OPENDRAIN_PULLUP, I2C3_SDA);
 8000ca4:	2309      	movs	r3, #9
 8000ca6:	229d      	movs	r2, #157	; 0x9d
 8000ca8:	210a      	movs	r1, #10
 8000caa:	4826      	ldr	r0, [pc, #152]	; (8000d44 <I2C_Master_Init+0x130>)
 8000cac:	f7ff fefa 	bl	8000aa4 <GPIO_Pin_Setup>
		}

		if (I2C.mode)
 8000cb0:	793b      	ldrb	r3, [r7, #4]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d028      	beq.n	8000d08 <I2C_Master_Init+0xf4>
		{
			I2C.I2C -> CR1 &= ~I2C_CR1_PE;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f022 0201 	bic.w	r2, r2, #1
 8000cc0:	601a      	str	r2, [r3, #0]
			I2C.I2C -> CR1 |= I2C_CR1_SWRST;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ccc:	601a      	str	r2, [r3, #0]
			I2C.I2C -> CR1 &= ~I2C_CR1_SWRST;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000cd8:	601a      	str	r2, [r3, #0]
			I2C.I2C -> CR2 = 0x30; //48MHz
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	2230      	movs	r2, #48	; 0x30
 8000cde:	605a      	str	r2, [r3, #4]
			I2C.I2C -> CCR = 0x8028; //FS mode | 40
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	f248 0228 	movw	r2, #32808	; 0x8028
 8000ce6:	61da      	str	r2, [r3, #28]
			I2C.I2C -> TRISE = 0xf;
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	220f      	movs	r2, #15
 8000cec:	621a      	str	r2, [r3, #32]
			I2C.I2C -> CR1 |= I2C_CR1_NOSTRETCH;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cf8:	601a      	str	r2, [r3, #0]
			I2C.I2C -> CR1 |= I2C_CR1_PE;
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f042 0201 	orr.w	r2, r2, #1
 8000d04:	601a      	str	r2, [r3, #0]
			I2C.I2C -> TRISE = 0x8;
			I2C.I2C -> CR1 |= I2C_CR1_PE;
			I2C.I2C -> CR1 &= ~I2C_CR1_POS;
		}

}
 8000d06:	e014      	b.n	8000d32 <I2C_Master_Init+0x11e>
			I2C.I2C -> CR2 = 0x8;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	2208      	movs	r2, #8
 8000d0c:	605a      	str	r2, [r3, #4]
			I2C.I2C -> CCR = 0x28;
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	2228      	movs	r2, #40	; 0x28
 8000d12:	61da      	str	r2, [r3, #28]
			I2C.I2C -> TRISE = 0x8;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	2208      	movs	r2, #8
 8000d18:	621a      	str	r2, [r3, #32]
			I2C.I2C -> CR1 |= I2C_CR1_PE;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	f042 0201 	orr.w	r2, r2, #1
 8000d24:	601a      	str	r2, [r3, #0]
			I2C.I2C -> CR1 &= ~I2C_CR1_POS;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d30:	601a      	str	r2, [r3, #0]
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40005400 	.word	0x40005400
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020400 	.word	0x40020400
 8000d48:	40005800 	.word	0x40005800
 8000d4c:	40005c00 	.word	0x40005c00
 8000d50:	40020000 	.word	0x40020000

08000d54 <I2C_Master_Start>:

void I2C_Master_Start(I2C_Config I2C)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	e883 0003 	stmia.w	r3, {r0, r1}
	volatile int temp;
//	temp = I2C.I2C -> SR1 | I2C.I2C -> SR2;
	I2C.I2C -> CR1 |= I2C_CR1_START;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d6a:	601a      	str	r2, [r3, #0]
	while(!(I2C.I2C -> SR1 & I2C_SR1_SB)){}
 8000d6c:	bf00      	nop
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	695b      	ldr	r3, [r3, #20]
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0f9      	beq.n	8000d6e <I2C_Master_Start+0x1a>
}
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <I2C_Master_Address>:

void I2C_Master_Address(I2C_Config I2C, uint8_t address, uint8_t read_write)
{
 8000d88:	b490      	push	{r4, r7}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	f107 0408 	add.w	r4, r7, #8
 8000d92:	e884 0003 	stmia.w	r4, {r0, r1}
 8000d96:	4611      	mov	r1, r2
 8000d98:	461a      	mov	r2, r3
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	71fb      	strb	r3, [r7, #7]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	71bb      	strb	r3, [r7, #6]
	volatile int temp;
	I2C.I2C -> DR = address << 1  | read_write;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	005a      	lsls	r2, r3, #1
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	431a      	orrs	r2, r3
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	611a      	str	r2, [r3, #16]
	while((I2C.I2C -> SR1 & 2) == 0){}
 8000dae:	bf00      	nop
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	695b      	ldr	r3, [r3, #20]
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f9      	beq.n	8000db0 <I2C_Master_Address+0x28>
	while((I2C.I2C -> SR1 & 2))
 8000dbc:	e00b      	b.n	8000dd6 <I2C_Master_Address+0x4e>
	{
		temp = I2C.I2C -> SR1;
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	695b      	ldr	r3, [r3, #20]
 8000dc2:	617b      	str	r3, [r7, #20]
		temp = I2C.I2C -> SR2;
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	617b      	str	r3, [r7, #20]
		if((I2C.I2C -> SR1 & 2) == 0)
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d006      	beq.n	8000de4 <I2C_Master_Address+0x5c>
	while((I2C.I2C -> SR1 & 2))
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1ed      	bne.n	8000dbe <I2C_Master_Address+0x36>
		{
			break;
		}
	}
}
 8000de2:	e000      	b.n	8000de6 <I2C_Master_Address+0x5e>
			break;
 8000de4:	bf00      	nop
}
 8000de6:	bf00      	nop
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc90      	pop	{r4, r7}
 8000dee:	4770      	bx	lr

08000df0 <I2C_Master_Send_Byte>:

void I2C_Master_Send_Byte(I2C_Config I2C, uint8_t data)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	f107 0308 	add.w	r3, r7, #8
 8000dfa:	e883 0003 	stmia.w	r3, {r0, r1}
 8000dfe:	4613      	mov	r3, r2
 8000e00:	71fb      	strb	r3, [r7, #7]
	while((I2C.I2C -> SR1 & 0x80) == 0){}
 8000e02:	bf00      	nop
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	695b      	ldr	r3, [r3, #20]
 8000e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d0f9      	beq.n	8000e04 <I2C_Master_Send_Byte+0x14>
	I2C.I2C -> DR = data;
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	79fa      	ldrb	r2, [r7, #7]
 8000e14:	611a      	str	r2, [r3, #16]
	while((I2C.I2C -> SR1 & 0x80) == 0){}
 8000e16:	bf00      	nop
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0f9      	beq.n	8000e18 <I2C_Master_Send_Byte+0x28>
}
 8000e24:	bf00      	nop
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <I2C_Master_Receive_Byte>:
		while((I2C.I2C -> SR1 & 0x80) == 0){}
	}
}

int I2C_Master_Receive_Byte(I2C_Config I2C)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b085      	sub	sp, #20
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	463b      	mov	r3, r7
 8000e3a:	e883 0003 	stmia.w	r3, {r0, r1}
	volatile int temp;
	I2C.I2C -> CR1 |= I2C_CR1_ACK;
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e48:	601a      	str	r2, [r3, #0]
	while((I2C.I2C -> SR1 & I2C_SR1_RXNE) == 0){}
 8000e4a:	bf00      	nop
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f9      	beq.n	8000e4c <I2C_Master_Receive_Byte+0x1a>
	temp = I2C.I2C -> DR;
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	60fb      	str	r3, [r7, #12]
	I2C.I2C -> CR1 &= ~I2C_CR1_ACK;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e68:	601a      	str	r2, [r3, #0]
	return temp;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <I2C_Master_Stop>:
{
	I2C.I2C -> CR1 |= I2C_CR1_ACK;
}

void I2C_Master_Stop(I2C_Config I2C)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	463b      	mov	r3, r7
 8000e80:	e883 0003 	stmia.w	r3, {r0, r1}
//	volatile int temp;
//	temp = I2C.I2C -> SR1 | I2C.I2C -> SR2;
	I2C.I2C -> CR1 |= I2C_CR1_STOP;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e8e:	601a      	str	r2, [r3, #0]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <I2C_Master_Write_Register>:

/*****************************************************************************************/

void I2C_Master_Write_Register(I2C_Config I2C, uint8_t device_address, uint8_t reg_address, uint8_t data)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	f107 0408 	add.w	r4, r7, #8
 8000ea6:	e884 0003 	stmia.w	r4, {r0, r1}
 8000eaa:	4611      	mov	r1, r2
 8000eac:	461a      	mov	r2, r3
 8000eae:	460b      	mov	r3, r1
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	71bb      	strb	r3, [r7, #6]
	I2C_Master_Start(I2C);
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ebe:	f7ff ff49 	bl	8000d54 <I2C_Master_Start>
	I2C_Master_Address(I2C, device_address,0);
 8000ec2:	79fa      	ldrb	r2, [r7, #7]
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f107 0108 	add.w	r1, r7, #8
 8000eca:	c903      	ldmia	r1, {r0, r1}
 8000ecc:	f7ff ff5c 	bl	8000d88 <I2C_Master_Address>
	I2C_Master_Send_Byte(I2C, reg_address);
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	f107 0308 	add.w	r3, r7, #8
 8000ed8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000edc:	f7ff ff88 	bl	8000df0 <I2C_Master_Send_Byte>
	I2C_Master_Send_Byte(I2C, data);
 8000ee0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	f107 0308 	add.w	r3, r7, #8
 8000eea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000eee:	f7ff ff7f 	bl	8000df0 <I2C_Master_Send_Byte>
	I2C_Master_Stop(I2C);
 8000ef2:	f107 0308 	add.w	r3, r7, #8
 8000ef6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000efa:	f7ff ffbd 	bl	8000e78 <I2C_Master_Stop>
}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd90      	pop	{r4, r7, pc}
	...

08000f08 <I2C_Master_Read_Register>:

int I2C_Master_Read_Register(I2C_Config I2C, uint8_t device_address, uint8_t reg_address)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b087      	sub	sp, #28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	f107 0408 	add.w	r4, r7, #8
 8000f12:	e884 0003 	stmia.w	r4, {r0, r1}
 8000f16:	4611      	mov	r1, r2
 8000f18:	461a      	mov	r2, r3
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	71fb      	strb	r3, [r7, #7]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	71bb      	strb	r3, [r7, #6]
	 int temp;
	I2C_Master_Start(I2C);
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f2a:	f7ff ff13 	bl	8000d54 <I2C_Master_Start>
	I2C_Master_Address(I2C, device_address, 0);
 8000f2e:	79fa      	ldrb	r2, [r7, #7]
 8000f30:	2300      	movs	r3, #0
 8000f32:	f107 0108 	add.w	r1, r7, #8
 8000f36:	c903      	ldmia	r1, {r0, r1}
 8000f38:	f7ff ff26 	bl	8000d88 <I2C_Master_Address>
	I2C_Master_Send_Byte(I2C, reg_address);
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	f107 0308 	add.w	r3, r7, #8
 8000f44:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f48:	f7ff ff52 	bl	8000df0 <I2C_Master_Send_Byte>
	I2C_Master_Stop(I2C);
 8000f4c:	f107 0308 	add.w	r3, r7, #8
 8000f50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f54:	f7ff ff90 	bl	8000e78 <I2C_Master_Stop>
	Delay_us(100);
 8000f58:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8000fa0 <I2C_Master_Read_Register+0x98>
 8000f5c:	f7ff fe2a 	bl	8000bb4 <Delay_us>
	I2C_Master_Start(I2C);
 8000f60:	f107 0308 	add.w	r3, r7, #8
 8000f64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f68:	f7ff fef4 	bl	8000d54 <I2C_Master_Start>
	I2C_Master_Address(I2C, device_address, 1);
 8000f6c:	79fa      	ldrb	r2, [r7, #7]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	f107 0108 	add.w	r1, r7, #8
 8000f74:	c903      	ldmia	r1, {r0, r1}
 8000f76:	f7ff ff07 	bl	8000d88 <I2C_Master_Address>
	temp = I2C_Master_Receive_Byte(I2C);
 8000f7a:	f107 0308 	add.w	r3, r7, #8
 8000f7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f82:	f7ff ff56 	bl	8000e32 <I2C_Master_Receive_Byte>
 8000f86:	6178      	str	r0, [r7, #20]
	I2C_Master_Stop(I2C);
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f90:	f7ff ff72 	bl	8000e78 <I2C_Master_Stop>
	return temp;
 8000f94:	697b      	ldr	r3, [r7, #20]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	371c      	adds	r7, #28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd90      	pop	{r4, r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	42c80000 	.word	0x42c80000

08000fa4 <I2C_Master_Write_Register_bits>:


void I2C_Master_Write_Register_bits(I2C_Config I2C,uint8_t device_address, uint8_t reg_address, uint8_t SET_RESET_FLAG, uint8_t bits)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af02      	add	r7, sp, #8
 8000faa:	f107 0408 	add.w	r4, r7, #8
 8000fae:	e884 0003 	stmia.w	r4, {r0, r1}
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	71fb      	strb	r3, [r7, #7]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	71bb      	strb	r3, [r7, #6]
	int read_reg;
	read_reg = I2C_Master_Read_Register(I2C, device_address, reg_address);
 8000fbe:	79bb      	ldrb	r3, [r7, #6]
 8000fc0:	79fa      	ldrb	r2, [r7, #7]
 8000fc2:	f107 0108 	add.w	r1, r7, #8
 8000fc6:	c903      	ldmia	r1, {r0, r1}
 8000fc8:	f7ff ff9e 	bl	8000f08 <I2C_Master_Read_Register>
 8000fcc:	6178      	str	r0, [r7, #20]
	if(SET_RESET_FLAG)
 8000fce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d00b      	beq.n	8000fee <I2C_Master_Write_Register_bits+0x4a>
	{
		read_reg = read_reg & ~(bits);
 8000fd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	617b      	str	r3, [r7, #20]
		read_reg |= bits;
 8000fe2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fe6:	697a      	ldr	r2, [r7, #20]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	e005      	b.n	8000ffa <I2C_Master_Write_Register_bits+0x56>
	}
	else
	{
	    read_reg = read_reg & ~(bits);
 8000fee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	617b      	str	r3, [r7, #20]
	}
	I2C_Master_Write_Register(I2C, device_address, reg_address, read_reg);
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	79b9      	ldrb	r1, [r7, #6]
 8001000:	79fa      	ldrb	r2, [r7, #7]
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	460b      	mov	r3, r1
 8001006:	f107 0108 	add.w	r1, r7, #8
 800100a:	c903      	ldmia	r1, {r0, r1}
 800100c:	f7ff ff46 	bl	8000e9c <I2C_Master_Write_Register>

}
 8001010:	bf00      	nop
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd90      	pop	{r4, r7, pc}

08001018 <I2C_Master_Read_Register_bit>:

int I2C_Master_Read_Register_bit(I2C_Config I2C, uint8_t device_address, uint8_t reg_address, uint8_t bit)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	f107 0408 	add.w	r4, r7, #8
 8001022:	e884 0003 	stmia.w	r4, {r0, r1}
 8001026:	4611      	mov	r1, r2
 8001028:	461a      	mov	r2, r3
 800102a:	460b      	mov	r3, r1
 800102c:	71fb      	strb	r3, [r7, #7]
 800102e:	4613      	mov	r3, r2
 8001030:	71bb      	strb	r3, [r7, #6]
	int read_reg,temp;
	read_reg = I2C_Master_Read_Register(I2C, device_address, reg_address);
 8001032:	79bb      	ldrb	r3, [r7, #6]
 8001034:	79fa      	ldrb	r2, [r7, #7]
 8001036:	f107 0108 	add.w	r1, r7, #8
 800103a:	c903      	ldmia	r1, {r0, r1}
 800103c:	f7ff ff64 	bl	8000f08 <I2C_Master_Read_Register>
 8001040:	6178      	str	r0, [r7, #20]
	temp = (read_reg & bit) && bit;
 8001042:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	4013      	ands	r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d005      	beq.n	800105a <I2C_Master_Read_Register_bit+0x42>
 800104e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <I2C_Master_Read_Register_bit+0x42>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <I2C_Master_Read_Register_bit+0x44>
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
	return temp;
 800105e:	693b      	ldr	r3, [r7, #16]
}
 8001060:	4618      	mov	r0, r3
 8001062:	371c      	adds	r7, #28
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}

08001068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800106c:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0d      	ldr	r2, [pc, #52]	; (80010a8 <HAL_Init+0x40>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001078:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <HAL_Init+0x40>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_Init+0x40>)
 800107e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001084:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a07      	ldr	r2, [pc, #28]	; (80010a8 <HAL_Init+0x40>)
 800108a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001090:	2003      	movs	r0, #3
 8001092:	f000 f94f 	bl	8001334 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001096:	200f      	movs	r0, #15
 8001098:	f000 f808 	bl	80010ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800109c:	f7ff fad6 	bl	800064c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40023c00 	.word	0x40023c00

080010ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b4:	4b12      	ldr	r3, [pc, #72]	; (8001100 <HAL_InitTick+0x54>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <HAL_InitTick+0x58>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	4619      	mov	r1, r3
 80010be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f000 f967 	bl	800139e <HAL_SYSTICK_Config>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00e      	b.n	80010f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b0f      	cmp	r3, #15
 80010de:	d80a      	bhi.n	80010f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e0:	2200      	movs	r2, #0
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f000 f92f 	bl	800134a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <HAL_InitTick+0x5c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	e000      	b.n	80010f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000
 8001104:	20000008 	.word	0x20000008
 8001108:	20000004 	.word	0x20000004

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	200004cc 	.word	0x200004cc

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200004cc 	.word	0x200004cc

0800114c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001164:	d005      	beq.n	8001172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001166:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_Delay+0x44>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4413      	add	r3, r2
 8001170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001172:	bf00      	nop
 8001174:	f7ff ffde 	bl	8001134 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	429a      	cmp	r2, r3
 8001182:	d8f7      	bhi.n	8001174 <HAL_Delay+0x28>
  {
  }
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000008 	.word	0x20000008

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	79fb      	ldrb	r3, [r7, #7]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001300:	d301      	bcc.n	8001306 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001302:	2301      	movs	r3, #1
 8001304:	e00f      	b.n	8001326 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001306:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <SysTick_Config+0x40>)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130e:	210f      	movs	r1, #15
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	f7ff ff8e 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <SysTick_Config+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131e:	4b04      	ldr	r3, [pc, #16]	; (8001330 <SysTick_Config+0x40>)
 8001320:	2207      	movs	r2, #7
 8001322:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000e010 	.word	0xe000e010

08001334 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f7ff ff29 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134a:	b580      	push	{r7, lr}
 800134c:	b086      	sub	sp, #24
 800134e:	af00      	add	r7, sp, #0
 8001350:	4603      	mov	r3, r0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001358:	2300      	movs	r3, #0
 800135a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800135c:	f7ff ff3e 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001360:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001362:	687a      	ldr	r2, [r7, #4]
 8001364:	68b9      	ldr	r1, [r7, #8]
 8001366:	6978      	ldr	r0, [r7, #20]
 8001368:	f7ff ff8e 	bl	8001288 <NVIC_EncodePriority>
 800136c:	4602      	mov	r2, r0
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff5d 	bl	8001234 <__NVIC_SetPriority>
}
 800137a:	bf00      	nop
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff31 	bl	80011f8 <__NVIC_EnableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffa2 	bl	80012f0 <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b089      	sub	sp, #36	; 0x24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	e14d      	b.n	8001670 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d4:	2201      	movs	r2, #1
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	697a      	ldr	r2, [r7, #20]
 80013e4:	4013      	ands	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	f040 813c 	bne.w	800166a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d005      	beq.n	800140a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	2b02      	cmp	r3, #2
 8001408:	d130      	bne.n	800146c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	2203      	movs	r2, #3
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	68da      	ldr	r2, [r3, #12]
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001440:	2201      	movs	r2, #1
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43db      	mvns	r3, r3
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	4013      	ands	r3, r2
 800144e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	091b      	lsrs	r3, r3, #4
 8001456:	f003 0201 	and.w	r2, r3, #1
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	4313      	orrs	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	2b03      	cmp	r3, #3
 8001476:	d017      	beq.n	80014a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	2203      	movs	r2, #3
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4013      	ands	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	689a      	ldr	r2, [r3, #8]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f003 0303 	and.w	r3, r3, #3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d123      	bne.n	80014fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	08da      	lsrs	r2, r3, #3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3208      	adds	r2, #8
 80014bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	4013      	ands	r3, r2
 80014d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	691a      	ldr	r2, [r3, #16]
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	fa02 f303 	lsl.w	r3, r2, r3
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	08da      	lsrs	r2, r3, #3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3208      	adds	r2, #8
 80014f6:	69b9      	ldr	r1, [r7, #24]
 80014f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	2203      	movs	r2, #3
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4013      	ands	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 0203 	and.w	r2, r3, #3
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 8096 	beq.w	800166a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b51      	ldr	r3, [pc, #324]	; (8001688 <HAL_GPIO_Init+0x2d0>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	4a50      	ldr	r2, [pc, #320]	; (8001688 <HAL_GPIO_Init+0x2d0>)
 8001548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800154c:	6453      	str	r3, [r2, #68]	; 0x44
 800154e:	4b4e      	ldr	r3, [pc, #312]	; (8001688 <HAL_GPIO_Init+0x2d0>)
 8001550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800155a:	4a4c      	ldr	r2, [pc, #304]	; (800168c <HAL_GPIO_Init+0x2d4>)
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	220f      	movs	r2, #15
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a43      	ldr	r2, [pc, #268]	; (8001690 <HAL_GPIO_Init+0x2d8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00d      	beq.n	80015a2 <HAL_GPIO_Init+0x1ea>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a42      	ldr	r2, [pc, #264]	; (8001694 <HAL_GPIO_Init+0x2dc>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <HAL_GPIO_Init+0x1e6>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a41      	ldr	r2, [pc, #260]	; (8001698 <HAL_GPIO_Init+0x2e0>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d101      	bne.n	800159a <HAL_GPIO_Init+0x1e2>
 8001596:	2302      	movs	r3, #2
 8001598:	e004      	b.n	80015a4 <HAL_GPIO_Init+0x1ec>
 800159a:	2307      	movs	r3, #7
 800159c:	e002      	b.n	80015a4 <HAL_GPIO_Init+0x1ec>
 800159e:	2301      	movs	r3, #1
 80015a0:	e000      	b.n	80015a4 <HAL_GPIO_Init+0x1ec>
 80015a2:	2300      	movs	r3, #0
 80015a4:	69fa      	ldr	r2, [r7, #28]
 80015a6:	f002 0203 	and.w	r2, r2, #3
 80015aa:	0092      	lsls	r2, r2, #2
 80015ac:	4093      	lsls	r3, r2
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b4:	4935      	ldr	r1, [pc, #212]	; (800168c <HAL_GPIO_Init+0x2d4>)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <HAL_GPIO_Init+0x2e4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4013      	ands	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015e6:	4a2d      	ldr	r2, [pc, #180]	; (800169c <HAL_GPIO_Init+0x2e4>)
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <HAL_GPIO_Init+0x2e4>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001610:	4a22      	ldr	r2, [pc, #136]	; (800169c <HAL_GPIO_Init+0x2e4>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <HAL_GPIO_Init+0x2e4>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800163a:	4a18      	ldr	r2, [pc, #96]	; (800169c <HAL_GPIO_Init+0x2e4>)
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_GPIO_Init+0x2e4>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	693b      	ldr	r3, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <HAL_GPIO_Init+0x2e4>)
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3301      	adds	r3, #1
 800166e:	61fb      	str	r3, [r7, #28]
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	2b0f      	cmp	r3, #15
 8001674:	f67f aeae 	bls.w	80013d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40013800 	.word	0x40013800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020400 	.word	0x40020400
 8001698:	40020800 	.word	0x40020800
 800169c:	40013c00 	.word	0x40013c00

080016a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80016a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a2:	b08f      	sub	sp, #60	; 0x3c
 80016a4:	af0a      	add	r7, sp, #40	; 0x28
 80016a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e116      	b.n	80018e0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d106      	bne.n	80016d2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f005 f9cb 	bl	8006a68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2203      	movs	r2, #3
 80016d6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d102      	bne.n	80016ec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f002 f8de 	bl	80038b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	687e      	ldr	r6, [r7, #4]
 80016fe:	466d      	mov	r5, sp
 8001700:	f106 0410 	add.w	r4, r6, #16
 8001704:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001706:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001708:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800170c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001710:	e885 0003 	stmia.w	r5, {r0, r1}
 8001714:	1d33      	adds	r3, r6, #4
 8001716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001718:	6838      	ldr	r0, [r7, #0]
 800171a:	f001 ffb5 	bl	8003688 <USB_CoreInit>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2202      	movs	r2, #2
 8001728:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0d7      	b.n	80018e0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f002 f8cc 	bl	80038d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800173c:	2300      	movs	r3, #0
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e04a      	b.n	80017d8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001742:	7bfa      	ldrb	r2, [r7, #15]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	1a9b      	subs	r3, r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	333d      	adds	r3, #61	; 0x3d
 8001752:	2201      	movs	r2, #1
 8001754:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001756:	7bfa      	ldrb	r2, [r7, #15]
 8001758:	6879      	ldr	r1, [r7, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	333c      	adds	r3, #60	; 0x3c
 8001766:	7bfa      	ldrb	r2, [r7, #15]
 8001768:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800176a:	7bfa      	ldrb	r2, [r7, #15]
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	b298      	uxth	r0, r3
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	1a9b      	subs	r3, r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	3342      	adds	r3, #66	; 0x42
 800177e:	4602      	mov	r2, r0
 8001780:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001782:	7bfa      	ldrb	r2, [r7, #15]
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	1a9b      	subs	r3, r3, r2
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	440b      	add	r3, r1
 8001790:	333f      	adds	r3, #63	; 0x3f
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001796:	7bfa      	ldrb	r2, [r7, #15]
 8001798:	6879      	ldr	r1, [r7, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	1a9b      	subs	r3, r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	3344      	adds	r3, #68	; 0x44
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80017aa:	7bfa      	ldrb	r2, [r7, #15]
 80017ac:	6879      	ldr	r1, [r7, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	3348      	adds	r3, #72	; 0x48
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	3350      	adds	r3, #80	; 0x50
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
 80017d4:	3301      	adds	r3, #1
 80017d6:	73fb      	strb	r3, [r7, #15]
 80017d8:	7bfa      	ldrb	r2, [r7, #15]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d3af      	bcc.n	8001742 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	73fb      	strb	r3, [r7, #15]
 80017e6:	e044      	b.n	8001872 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	4613      	mov	r3, r2
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	1a9b      	subs	r3, r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	440b      	add	r3, r1
 80017f6:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80017fa:	2200      	movs	r2, #0
 80017fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	6879      	ldr	r1, [r7, #4]
 8001802:	4613      	mov	r3, r2
 8001804:	00db      	lsls	r3, r3, #3
 8001806:	1a9b      	subs	r3, r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001814:	7bfa      	ldrb	r2, [r7, #15]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	4613      	mov	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	1a9b      	subs	r3, r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001840:	7bfa      	ldrb	r2, [r7, #15]
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	4613      	mov	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	1a9b      	subs	r3, r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	6879      	ldr	r1, [r7, #4]
 800185a:	4613      	mov	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	1a9b      	subs	r3, r3, r2
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	440b      	add	r3, r1
 8001864:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	3301      	adds	r3, #1
 8001870:	73fb      	strb	r3, [r7, #15]
 8001872:	7bfa      	ldrb	r2, [r7, #15]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	429a      	cmp	r2, r3
 800187a:	d3b5      	bcc.n	80017e8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	687e      	ldr	r6, [r7, #4]
 8001884:	466d      	mov	r5, sp
 8001886:	f106 0410 	add.w	r4, r6, #16
 800188a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001890:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001892:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001896:	e885 0003 	stmia.w	r5, {r0, r1}
 800189a:	1d33      	adds	r3, r6, #4
 800189c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800189e:	6838      	ldr	r0, [r7, #0]
 80018a0:	f002 f864 	bl	800396c <USB_DevInit>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2202      	movs	r2, #2
 80018ae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e014      	b.n	80018e0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d102      	bne.n	80018d4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f001 f892 	bl	80029f8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f003 f8d3 	bl	8004a84 <USB_DevDisconnect>

  return HAL_OK;
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d101      	bne.n	8001904 <HAL_PCD_Start+0x1c>
 8001900:	2302      	movs	r3, #2
 8001902:	e020      	b.n	8001946 <HAL_PCD_Start+0x5e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	2b01      	cmp	r3, #1
 8001912:	d109      	bne.n	8001928 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001918:	2b01      	cmp	r3, #1
 800191a:	d005      	beq.n	8001928 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001920:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f001 ffaf 	bl	8003890 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f003 f883 	bl	8004a42 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800194e:	b590      	push	{r4, r7, lr}
 8001950:	b08d      	sub	sp, #52	; 0x34
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f003 f941 	bl	8004bec <USB_GetMode>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	f040 83ca 	bne.w	8002106 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f003 f8a5 	bl	8004ac6 <USB_ReadInterrupts>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 83c0 	beq.w	8002104 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4618      	mov	r0, r3
 800198a:	f003 f89c 	bl	8004ac6 <USB_ReadInterrupts>
 800198e:	4603      	mov	r3, r0
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b02      	cmp	r3, #2
 8001996:	d107      	bne.n	80019a8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f002 0202 	and.w	r2, r2, #2
 80019a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f003 f88a 	bl	8004ac6 <USB_ReadInterrupts>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	2b10      	cmp	r3, #16
 80019ba:	d161      	bne.n	8001a80 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	699a      	ldr	r2, [r3, #24]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f022 0210 	bic.w	r2, r2, #16
 80019ca:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80019cc:	6a3b      	ldr	r3, [r7, #32]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f003 020f 	and.w	r2, r3, #15
 80019d8:	4613      	mov	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	1a9b      	subs	r3, r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	4413      	add	r3, r2
 80019e8:	3304      	adds	r3, #4
 80019ea:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	0c5b      	lsrs	r3, r3, #17
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d124      	bne.n	8001a42 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d035      	beq.n	8001a70 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	091b      	lsrs	r3, r3, #4
 8001a0c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001a0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	6a38      	ldr	r0, [r7, #32]
 8001a18:	f002 fec1 	bl	800479e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	091b      	lsrs	r3, r3, #4
 8001a24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a28:	441a      	add	r2, r3
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	699a      	ldr	r2, [r3, #24]
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a3a:	441a      	add	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	619a      	str	r2, [r3, #24]
 8001a40:	e016      	b.n	8001a70 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	0c5b      	lsrs	r3, r3, #17
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	2b06      	cmp	r3, #6
 8001a4c:	d110      	bne.n	8001a70 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a54:	2208      	movs	r2, #8
 8001a56:	4619      	mov	r1, r3
 8001a58:	6a38      	ldr	r0, [r7, #32]
 8001a5a:	f002 fea0 	bl	800479e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	699a      	ldr	r2, [r3, #24]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a6a:	441a      	add	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699a      	ldr	r2, [r3, #24]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f042 0210 	orr.w	r2, r2, #16
 8001a7e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 f81e 	bl	8004ac6 <USB_ReadInterrupts>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a90:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001a94:	d16e      	bne.n	8001b74 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 f824 	bl	8004aec <USB_ReadDevAllOutEpInterrupt>
 8001aa4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001aa6:	e062      	b.n	8001b6e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d057      	beq.n	8001b62 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 f849 	bl	8004b54 <USB_ReadDevOutEPInterrupt>
 8001ac2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00c      	beq.n	8001ae8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	015a      	lsls	r2, r3, #5
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ada:	461a      	mov	r2, r3
 8001adc:	2301      	movs	r3, #1
 8001ade:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ae0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 fdde 	bl	80026a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d00c      	beq.n	8001b0c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	015a      	lsls	r2, r3, #5
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	4413      	add	r3, r2
 8001afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001afe:	461a      	mov	r2, r3
 8001b00:	2308      	movs	r3, #8
 8001b02:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001b04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 fed8 	bl	80028bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	015a      	lsls	r2, r3, #5
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b22:	461a      	mov	r2, r3
 8001b24:	2310      	movs	r3, #16
 8001b26:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	f003 0320 	and.w	r3, r3, #32
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d008      	beq.n	8001b44 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	015a      	lsls	r2, r3, #5
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	4413      	add	r3, r2
 8001b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b3e:	461a      	mov	r2, r3
 8001b40:	2320      	movs	r3, #32
 8001b42:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b50:	015a      	lsls	r2, r3, #5
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	4413      	add	r3, r2
 8001b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b60:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b64:	3301      	adds	r3, #1
 8001b66:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6a:	085b      	lsrs	r3, r3, #1
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d199      	bne.n	8001aa8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f002 ffa4 	bl	8004ac6 <USB_ReadInterrupts>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b88:	f040 80c0 	bne.w	8001d0c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f002 ffc5 	bl	8004b20 <USB_ReadDevAllInEpInterrupt>
 8001b96:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001b9c:	e0b2      	b.n	8001d04 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80a7 	beq.w	8001cf8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 ffeb 	bl	8004b90 <USB_ReadDevInEPInterrupt>
 8001bba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d057      	beq.n	8001c76 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f003 030f 	and.w	r3, r3, #15
 8001bcc:	2201      	movs	r2, #1
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69f9      	ldr	r1, [r7, #28]
 8001be2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001be6:	4013      	ands	r3, r2
 8001be8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d132      	bne.n	8001c6a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001c04:	6879      	ldr	r1, [r7, #4]
 8001c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	1a9b      	subs	r3, r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	440b      	add	r3, r1
 8001c12:	3348      	adds	r3, #72	; 0x48
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	1a9b      	subs	r3, r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4403      	add	r3, r0
 8001c24:	3344      	adds	r3, #68	; 0x44
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4419      	add	r1, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2e:	4613      	mov	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	1a9b      	subs	r3, r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4403      	add	r3, r0
 8001c38:	3348      	adds	r3, #72	; 0x48
 8001c3a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d113      	bne.n	8001c6a <HAL_PCD_IRQHandler+0x31c>
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c46:	4613      	mov	r3, r2
 8001c48:	00db      	lsls	r3, r3, #3
 8001c4a:	1a9b      	subs	r3, r3, r2
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	440b      	add	r3, r1
 8001c50:	3350      	adds	r3, #80	; 0x50
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d108      	bne.n	8001c6a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6818      	ldr	r0, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c62:	461a      	mov	r2, r3
 8001c64:	2101      	movs	r1, #1
 8001c66:	f002 fff3 	bl	8004c50 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f004 ff90 	bl	8006b96 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c82:	015a      	lsls	r2, r3, #5
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	4413      	add	r3, r2
 8001c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	2308      	movs	r3, #8
 8001c90:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9e:	015a      	lsls	r2, r3, #5
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ca8:	461a      	mov	r2, r3
 8001caa:	2310      	movs	r3, #16
 8001cac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	015a      	lsls	r2, r3, #5
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2340      	movs	r3, #64	; 0x40
 8001cc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f003 0302 	and.w	r3, r3, #2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	015a      	lsls	r2, r3, #5
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	4413      	add	r3, r2
 8001cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001cf0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 fc48 	bl	8002588 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d00:	085b      	lsrs	r3, r3, #1
 8001d02:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f47f af49 	bne.w	8001b9e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f002 fed8 	bl	8004ac6 <USB_ReadInterrupts>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d20:	d122      	bne.n	8001d68 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d108      	bne.n	8001d52 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d48:	2100      	movs	r1, #0
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f005 f96c 	bl	8007028 <HAL_PCDEx_LPM_Callback>
 8001d50:	e002      	b.n	8001d58 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f004 ff8c 	bl	8006c70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695a      	ldr	r2, [r3, #20]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f002 feaa 	bl	8004ac6 <USB_ReadInterrupts>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d7c:	d112      	bne.n	8001da4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d102      	bne.n	8001d94 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f004 ff48 	bl	8006c24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695a      	ldr	r2, [r3, #20]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001da2:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f002 fe8c 	bl	8004ac6 <USB_ReadInterrupts>
 8001dae:	4603      	mov	r3, r0
 8001db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001db8:	d121      	bne.n	8001dfe <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695a      	ldr	r2, [r3, #20]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001dc8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d111      	bne.n	8001df8 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	f003 020f 	and.w	r2, r3, #15
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001dee:	2101      	movs	r1, #1
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f005 f919 	bl	8007028 <HAL_PCDEx_LPM_Callback>
 8001df6:	e002      	b.n	8001dfe <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f004 ff13 	bl	8006c24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 fe5f 	bl	8004ac6 <USB_ReadInterrupts>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e12:	f040 80c7 	bne.w	8001fa4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001e24:	f023 0301 	bic.w	r3, r3, #1
 8001e28:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2110      	movs	r1, #16
 8001e30:	4618      	mov	r0, r3
 8001e32:	f001 fef9 	bl	8003c28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e36:	2300      	movs	r3, #0
 8001e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e3a:	e056      	b.n	8001eea <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001e4e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e52:	015a      	lsls	r2, r3, #5
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	4413      	add	r3, r2
 8001e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e60:	0151      	lsls	r1, r2, #5
 8001e62:	69fa      	ldr	r2, [r7, #28]
 8001e64:	440a      	add	r2, r1
 8001e66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001e6e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e80:	0151      	lsls	r1, r2, #5
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	440a      	add	r2, r1
 8001e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001e8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e8e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ea2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001eb4:	0151      	lsls	r1, r2, #5
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	440a      	add	r2, r1
 8001eba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ebe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ec2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	015a      	lsls	r2, r3, #5
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	4413      	add	r3, r2
 8001ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ed4:	0151      	lsls	r1, r2, #5
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	440a      	add	r2, r1
 8001eda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ede:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ee2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d3a3      	bcc.n	8001e3c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	69fa      	ldr	r2, [r7, #28]
 8001efe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f02:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001f06:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d016      	beq.n	8001f3e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f20:	f043 030b 	orr.w	r3, r3, #11
 8001f24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	69fa      	ldr	r2, [r7, #28]
 8001f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f36:	f043 030b 	orr.w	r3, r3, #11
 8001f3a:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3c:	e015      	b.n	8001f6a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f50:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001f54:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	69fa      	ldr	r2, [r7, #28]
 8001f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f64:	f043 030b 	orr.w	r3, r3, #11
 8001f68:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69fa      	ldr	r2, [r7, #28]
 8001f74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f78:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001f7c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6818      	ldr	r0, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f002 fe5e 	bl	8004c50 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001fa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f002 fd8c 	bl	8004ac6 <USB_ReadInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fb8:	d124      	bne.n	8002004 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f002 fe22 	bl	8004c08 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f001 fe8a 	bl	8003ce2 <USB_GetDevSpeed>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681c      	ldr	r4, [r3, #0]
 8001fda:	f000 fef7 	bl	8002dcc <HAL_RCC_GetHCLKFreq>
 8001fde:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f001 fbaf 	bl	800374c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f004 fdf9 	bl	8006be6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002002:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f002 fd5c 	bl	8004ac6 <USB_ReadInterrupts>
 800200e:	4603      	mov	r3, r0
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	2b08      	cmp	r3, #8
 8002016:	d10a      	bne.n	800202e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f004 fdd6 	bl	8006bca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f002 0208 	and.w	r2, r2, #8
 800202c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f002 fd47 	bl	8004ac6 <USB_ReadInterrupts>
 8002038:	4603      	mov	r3, r0
 800203a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800203e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002042:	d10f      	bne.n	8002064 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	b2db      	uxtb	r3, r3
 800204c:	4619      	mov	r1, r3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f004 fe2e 	bl	8006cb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002062:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4618      	mov	r0, r3
 800206a:	f002 fd2c 	bl	8004ac6 <USB_ReadInterrupts>
 800206e:	4603      	mov	r3, r0
 8002070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002074:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002078:	d10f      	bne.n	800209a <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	b2db      	uxtb	r3, r3
 8002082:	4619      	mov	r1, r3
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f004 fe01 	bl	8006c8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695a      	ldr	r2, [r3, #20]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002098:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 fd11 	bl	8004ac6 <USB_ReadInterrupts>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80020aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ae:	d10a      	bne.n	80020c6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f004 fe0f 	bl	8006cd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80020c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f002 fcfb 	bl	8004ac6 <USB_ReadInterrupts>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d115      	bne.n	8002106 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f004 fdff 	bl	8006cf0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6859      	ldr	r1, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	e000      	b.n	8002106 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8002104:	bf00      	nop
    }
  }
}
 8002106:	3734      	adds	r7, #52	; 0x34
 8002108:	46bd      	mov	sp, r7
 800210a:	bd90      	pop	{r4, r7, pc}

0800210c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	460b      	mov	r3, r1
 8002116:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800211e:	2b01      	cmp	r3, #1
 8002120:	d101      	bne.n	8002126 <HAL_PCD_SetAddress+0x1a>
 8002122:	2302      	movs	r3, #2
 8002124:	e013      	b.n	800214e <HAL_PCD_SetAddress+0x42>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	78fa      	ldrb	r2, [r7, #3]
 800213c:	4611      	mov	r1, r2
 800213e:	4618      	mov	r0, r3
 8002140:	f002 fc59 	bl	80049f6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
 800215e:	4608      	mov	r0, r1
 8002160:	4611      	mov	r1, r2
 8002162:	461a      	mov	r2, r3
 8002164:	4603      	mov	r3, r0
 8002166:	70fb      	strb	r3, [r7, #3]
 8002168:	460b      	mov	r3, r1
 800216a:	803b      	strh	r3, [r7, #0]
 800216c:	4613      	mov	r3, r2
 800216e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002170:	2300      	movs	r3, #0
 8002172:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002178:	2b00      	cmp	r3, #0
 800217a:	da0f      	bge.n	800219c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800217c:	78fb      	ldrb	r3, [r7, #3]
 800217e:	f003 020f 	and.w	r2, r3, #15
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	4413      	add	r3, r2
 8002190:	3304      	adds	r3, #4
 8002192:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	705a      	strb	r2, [r3, #1]
 800219a:	e00f      	b.n	80021bc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800219c:	78fb      	ldrb	r3, [r7, #3]
 800219e:	f003 020f 	and.w	r2, r3, #15
 80021a2:	4613      	mov	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	1a9b      	subs	r3, r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	3304      	adds	r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80021c8:	883a      	ldrh	r2, [r7, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	78ba      	ldrb	r2, [r7, #2]
 80021d2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	785b      	ldrb	r3, [r3, #1]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d004      	beq.n	80021e6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80021e6:	78bb      	ldrb	r3, [r7, #2]
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d102      	bne.n	80021f2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2200      	movs	r2, #0
 80021f0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d101      	bne.n	8002200 <HAL_PCD_EP_Open+0xaa>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e00e      	b.n	800221e <HAL_PCD_EP_Open+0xc8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68f9      	ldr	r1, [r7, #12]
 800220e:	4618      	mov	r0, r3
 8002210:	f001 fd8c 	bl	8003d2c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800221c:	7afb      	ldrb	r3, [r7, #11]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002236:	2b00      	cmp	r3, #0
 8002238:	da0f      	bge.n	800225a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800223a:	78fb      	ldrb	r3, [r7, #3]
 800223c:	f003 020f 	and.w	r2, r3, #15
 8002240:	4613      	mov	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	1a9b      	subs	r3, r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	3338      	adds	r3, #56	; 0x38
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	3304      	adds	r3, #4
 8002250:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2201      	movs	r2, #1
 8002256:	705a      	strb	r2, [r3, #1]
 8002258:	e00f      	b.n	800227a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800225a:	78fb      	ldrb	r3, [r7, #3]
 800225c:	f003 020f 	and.w	r2, r3, #15
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	1a9b      	subs	r3, r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	4413      	add	r3, r2
 8002270:	3304      	adds	r3, #4
 8002272:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2200      	movs	r2, #0
 8002278:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	b2da      	uxtb	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_PCD_EP_Close+0x6e>
 8002290:	2302      	movs	r3, #2
 8002292:	e00e      	b.n	80022b2 <HAL_PCD_EP_Close+0x8c>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68f9      	ldr	r1, [r7, #12]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 fdca 	bl	8003e3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	460b      	mov	r3, r1
 80022c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ca:	7afb      	ldrb	r3, [r7, #11]
 80022cc:	f003 020f 	and.w	r2, r3, #15
 80022d0:	4613      	mov	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	3304      	adds	r3, #4
 80022e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2200      	movs	r2, #0
 80022f4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2200      	movs	r2, #0
 80022fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022fc:	7afb      	ldrb	r3, [r7, #11]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	b2da      	uxtb	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d102      	bne.n	8002316 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002316:	7afb      	ldrb	r3, [r7, #11]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	b2db      	uxtb	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	6979      	ldr	r1, [r7, #20]
 800232e:	f002 f8a5 	bl	800447c <USB_EP0StartXfer>
 8002332:	e008      	b.n	8002346 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	6979      	ldr	r1, [r7, #20]
 8002342:	f001 fe57 	bl	8003ff4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	f003 020f 	and.w	r2, r3, #15
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr

08002380 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	603b      	str	r3, [r7, #0]
 800238c:	460b      	mov	r3, r1
 800238e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002390:	7afb      	ldrb	r3, [r7, #11]
 8002392:	f003 020f 	and.w	r2, r3, #15
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	3338      	adds	r3, #56	; 0x38
 80023a0:	68fa      	ldr	r2, [r7, #12]
 80023a2:	4413      	add	r3, r2
 80023a4:	3304      	adds	r3, #4
 80023a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2200      	movs	r2, #0
 80023b8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2201      	movs	r2, #1
 80023be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023c0:	7afb      	ldrb	r3, [r7, #11]
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d102      	bne.n	80023da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d109      	bne.n	80023f8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	6979      	ldr	r1, [r7, #20]
 80023f2:	f002 f843 	bl	800447c <USB_EP0StartXfer>
 80023f6:	e008      	b.n	800240a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6818      	ldr	r0, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	6979      	ldr	r1, [r7, #20]
 8002406:	f001 fdf5 	bl	8003ff4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002420:	78fb      	ldrb	r3, [r7, #3]
 8002422:	f003 020f 	and.w	r2, r3, #15
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	429a      	cmp	r2, r3
 800242c:	d901      	bls.n	8002432 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e050      	b.n	80024d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002432:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002436:	2b00      	cmp	r3, #0
 8002438:	da0f      	bge.n	800245a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 020f 	and.w	r2, r3, #15
 8002440:	4613      	mov	r3, r2
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	1a9b      	subs	r3, r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	3338      	adds	r3, #56	; 0x38
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	4413      	add	r3, r2
 800244e:	3304      	adds	r3, #4
 8002450:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2201      	movs	r2, #1
 8002456:	705a      	strb	r2, [r3, #1]
 8002458:	e00d      	b.n	8002476 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	4613      	mov	r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	3304      	adds	r3, #4
 800246e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2201      	movs	r2, #1
 800247a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800247c:	78fb      	ldrb	r3, [r7, #3]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	b2da      	uxtb	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_PCD_EP_SetStall+0x82>
 8002492:	2302      	movs	r3, #2
 8002494:	e01e      	b.n	80024d4 <HAL_PCD_EP_SetStall+0xc0>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68f9      	ldr	r1, [r7, #12]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f002 f9d2 	bl	800484e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80024aa:	78fb      	ldrb	r3, [r7, #3]
 80024ac:	f003 030f 	and.w	r3, r3, #15
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6818      	ldr	r0, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	b2d9      	uxtb	r1, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024c4:	461a      	mov	r2, r3
 80024c6:	f002 fbc3 	bl	8004c50 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80024d2:	2300      	movs	r3, #0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3710      	adds	r7, #16
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}

080024dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	f003 020f 	and.w	r2, r3, #15
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d901      	bls.n	80024fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e042      	b.n	8002580 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	da0f      	bge.n	8002522 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002502:	78fb      	ldrb	r3, [r7, #3]
 8002504:	f003 020f 	and.w	r2, r3, #15
 8002508:	4613      	mov	r3, r2
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	3338      	adds	r3, #56	; 0x38
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	4413      	add	r3, r2
 8002516:	3304      	adds	r3, #4
 8002518:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	705a      	strb	r2, [r3, #1]
 8002520:	e00f      	b.n	8002542 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	f003 020f 	and.w	r2, r3, #15
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	4413      	add	r3, r2
 8002538:	3304      	adds	r3, #4
 800253a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	b2da      	uxtb	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800255a:	2b01      	cmp	r3, #1
 800255c:	d101      	bne.n	8002562 <HAL_PCD_EP_ClrStall+0x86>
 800255e:	2302      	movs	r3, #2
 8002560:	e00e      	b.n	8002580 <HAL_PCD_EP_ClrStall+0xa4>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68f9      	ldr	r1, [r7, #12]
 8002570:	4618      	mov	r0, r3
 8002572:	f002 f9da 	bl	800492a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af02      	add	r7, sp, #8
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	4613      	mov	r3, r2
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	1a9b      	subs	r3, r3, r2
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	3338      	adds	r3, #56	; 0x38
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	4413      	add	r3, r2
 80025ac:	3304      	adds	r3, #4
 80025ae:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	699a      	ldr	r2, [r3, #24]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d901      	bls.n	80025c0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e06c      	b.n	800269a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	699b      	ldr	r3, [r3, #24]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	69fa      	ldr	r2, [r7, #28]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d902      	bls.n	80025dc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	3303      	adds	r3, #3
 80025e0:	089b      	lsrs	r3, r3, #2
 80025e2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025e4:	e02b      	b.n	800263e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	69fa      	ldr	r2, [r7, #28]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d902      	bls.n	8002602 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	3303      	adds	r3, #3
 8002606:	089b      	lsrs	r3, r3, #2
 8002608:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	68d9      	ldr	r1, [r3, #12]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800261a:	b2db      	uxtb	r3, r3
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	4603      	mov	r3, r0
 8002620:	6978      	ldr	r0, [r7, #20]
 8002622:	f002 f87e 	bl	8004722 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	441a      	add	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	441a      	add	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	015a      	lsls	r2, r3, #5
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4413      	add	r3, r2
 8002646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	b29b      	uxth	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	429a      	cmp	r2, r3
 8002652:	d809      	bhi.n	8002668 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	699a      	ldr	r2, [r3, #24]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800265c:	429a      	cmp	r2, r3
 800265e:	d203      	bcs.n	8002668 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1be      	bne.n	80025e6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	429a      	cmp	r2, r3
 8002672:	d811      	bhi.n	8002698 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	2201      	movs	r2, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	43db      	mvns	r3, r3
 800268e:	6939      	ldr	r1, [r7, #16]
 8002690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002694:	4013      	ands	r3, r2
 8002696:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3720      	adds	r7, #32
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	333c      	adds	r3, #60	; 0x3c
 80026bc:	3304      	adds	r3, #4
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	f040 80a0 	bne.w	800281c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d015      	beq.n	8002712 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a72      	ldr	r2, [pc, #456]	; (80028b4 <PCD_EP_OutXfrComplete_int+0x210>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	f240 80dd 	bls.w	80028aa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80d7 	beq.w	80028aa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	015a      	lsls	r2, r3, #5
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4413      	add	r3, r2
 8002704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002708:	461a      	mov	r2, r3
 800270a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800270e:	6093      	str	r3, [r2, #8]
 8002710:	e0cb      	b.n	80028aa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	2b00      	cmp	r3, #0
 800271a:	d009      	beq.n	8002730 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	4413      	add	r3, r2
 8002724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002728:	461a      	mov	r2, r3
 800272a:	2320      	movs	r3, #32
 800272c:	6093      	str	r3, [r2, #8]
 800272e:	e0bc      	b.n	80028aa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002736:	2b00      	cmp	r3, #0
 8002738:	f040 80b7 	bne.w	80028aa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a5d      	ldr	r2, [pc, #372]	; (80028b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d90f      	bls.n	8002764 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00a      	beq.n	8002764 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800275a:	461a      	mov	r2, r3
 800275c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002760:	6093      	str	r3, [r2, #8]
 8002762:	e0a2      	b.n	80028aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002764:	6879      	ldr	r1, [r7, #4]
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002776:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	0159      	lsls	r1, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	440b      	add	r3, r1
 8002780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800278a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4403      	add	r3, r0
 800279a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800279e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	1a9b      	subs	r3, r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4403      	add	r3, r0
 80027c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4419      	add	r1, r3
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4403      	add	r3, r0
 80027d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027dc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d114      	bne.n	800280e <PCD_EP_OutXfrComplete_int+0x16a>
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	1a9b      	subs	r3, r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d108      	bne.n	800280e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002806:	461a      	mov	r2, r3
 8002808:	2101      	movs	r1, #1
 800280a:	f002 fa21 	bl	8004c50 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2db      	uxtb	r3, r3
 8002812:	4619      	mov	r1, r3
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f004 f9a3 	bl	8006b60 <HAL_PCD_DataOutStageCallback>
 800281a:	e046      	b.n	80028aa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	4a26      	ldr	r2, [pc, #152]	; (80028b8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d124      	bne.n	800286e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	015a      	lsls	r2, r3, #5
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4413      	add	r3, r2
 8002836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800283a:	461a      	mov	r2, r3
 800283c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002840:	6093      	str	r3, [r2, #8]
 8002842:	e032      	b.n	80028aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800285a:	461a      	mov	r2, r3
 800285c:	2320      	movs	r3, #32
 800285e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4619      	mov	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f004 f97a 	bl	8006b60 <HAL_PCD_DataOutStageCallback>
 800286c:	e01d      	b.n	80028aa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d114      	bne.n	800289e <PCD_EP_OutXfrComplete_int+0x1fa>
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d108      	bne.n	800289e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6818      	ldr	r0, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002896:	461a      	mov	r2, r3
 8002898:	2100      	movs	r1, #0
 800289a:	f002 f9d9 	bl	8004c50 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4619      	mov	r1, r3
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f004 f95b 	bl	8006b60 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	4f54300a 	.word	0x4f54300a
 80028b8:	4f54310a 	.word	0x4f54310a

080028bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	333c      	adds	r3, #60	; 0x3c
 80028d4:	3304      	adds	r3, #4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4a15      	ldr	r2, [pc, #84]	; (8002944 <PCD_EP_OutSetupPacket_int+0x88>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d90e      	bls.n	8002910 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d009      	beq.n	8002910 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002908:	461a      	mov	r2, r3
 800290a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800290e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f004 f913 	bl	8006b3c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4a0a      	ldr	r2, [pc, #40]	; (8002944 <PCD_EP_OutSetupPacket_int+0x88>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d90c      	bls.n	8002938 <PCD_EP_OutSetupPacket_int+0x7c>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d108      	bne.n	8002938 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002930:	461a      	mov	r2, r3
 8002932:	2101      	movs	r1, #1
 8002934:	f002 f98c 	bl	8004c50 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	4f54300a 	.word	0x4f54300a

08002948 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	460b      	mov	r3, r1
 8002952:	70fb      	strb	r3, [r7, #3]
 8002954:	4613      	mov	r3, r2
 8002956:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d107      	bne.n	8002976 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002966:	883b      	ldrh	r3, [r7, #0]
 8002968:	0419      	lsls	r1, r3, #16
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	68ba      	ldr	r2, [r7, #8]
 8002970:	430a      	orrs	r2, r1
 8002972:	629a      	str	r2, [r3, #40]	; 0x28
 8002974:	e028      	b.n	80029c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	0c1b      	lsrs	r3, r3, #16
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	4413      	add	r3, r2
 8002982:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002984:	2300      	movs	r3, #0
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	e00d      	b.n	80029a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	7bfb      	ldrb	r3, [r7, #15]
 8002990:	3340      	adds	r3, #64	; 0x40
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	4413      	add	r3, r2
 800299e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	3301      	adds	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	7bfa      	ldrb	r2, [r7, #15]
 80029a8:	78fb      	ldrb	r3, [r7, #3]
 80029aa:	3b01      	subs	r3, #1
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d3ec      	bcc.n	800298a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80029b0:	883b      	ldrh	r3, [r7, #0]
 80029b2:	0418      	lsls	r0, r3, #16
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	3b01      	subs	r3, #1
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	4302      	orrs	r2, r0
 80029c0:	3340      	adds	r3, #64	; 0x40
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
 80029de:	460b      	mov	r3, r1
 80029e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	887a      	ldrh	r2, [r7, #2]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	f043 0303 	orr.w	r3, r3, #3
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0cc      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a54:	4b68      	ldr	r3, [pc, #416]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d90c      	bls.n	8002a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a62:	4b65      	ldr	r3, [pc, #404]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	b2d2      	uxtb	r2, r2
 8002a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6a:	4b63      	ldr	r3, [pc, #396]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e0b8      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d020      	beq.n	8002aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a94:	4b59      	ldr	r3, [pc, #356]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	4a58      	ldr	r2, [pc, #352]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0308 	and.w	r3, r3, #8
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aac:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a52      	ldr	r2, [pc, #328]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ab8:	4b50      	ldr	r3, [pc, #320]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	494d      	ldr	r1, [pc, #308]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d044      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d107      	bne.n	8002aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ade:	4b47      	ldr	r3, [pc, #284]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d119      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e07f      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d003      	beq.n	8002afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afe:	4b3f      	ldr	r3, [pc, #252]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e06f      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b0e:	4b3b      	ldr	r3, [pc, #236]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e067      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b1e:	4b37      	ldr	r3, [pc, #220]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f023 0203 	bic.w	r2, r3, #3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4934      	ldr	r1, [pc, #208]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b30:	f7fe fb00 	bl	8001134 <HAL_GetTick>
 8002b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b38:	f7fe fafc 	bl	8001134 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e04f      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 020c 	and.w	r2, r3, #12
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d1eb      	bne.n	8002b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b60:	4b25      	ldr	r3, [pc, #148]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d20c      	bcs.n	8002b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b22      	ldr	r3, [pc, #136]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	b2d2      	uxtb	r2, r2
 8002b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e032      	b.n	8002bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d008      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4916      	ldr	r1, [pc, #88]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	490e      	ldr	r1, [pc, #56]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bc6:	f000 f821 	bl	8002c0c <HAL_RCC_GetSysClockFreq>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	490a      	ldr	r1, [pc, #40]	; (8002c00 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	5ccb      	ldrb	r3, [r1, r3]
 8002bda:	fa22 f303 	lsr.w	r3, r2, r3
 8002bde:	4a09      	ldr	r2, [pc, #36]	; (8002c04 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002be2:	4b09      	ldr	r3, [pc, #36]	; (8002c08 <HAL_RCC_ClockConfig+0x1c8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe fa60 	bl	80010ac <HAL_InitTick>

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023c00 	.word	0x40023c00
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	08007204 	.word	0x08007204
 8002c04:	20000000 	.word	0x20000000
 8002c08:	20000004 	.word	0x20000004

08002c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c0c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c24:	4b67      	ldr	r3, [pc, #412]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 030c 	and.w	r3, r3, #12
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d00d      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x40>
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	f200 80bd 	bhi.w	8002db0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x34>
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d003      	beq.n	8002c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c3e:	e0b7      	b.n	8002db0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c40:	4b61      	ldr	r3, [pc, #388]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c42:	60bb      	str	r3, [r7, #8]
       break;
 8002c44:	e0b7      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c46:	4b60      	ldr	r3, [pc, #384]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c48:	60bb      	str	r3, [r7, #8]
      break;
 8002c4a:	e0b4      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c4c:	4b5d      	ldr	r3, [pc, #372]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c54:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c56:	4b5b      	ldr	r3, [pc, #364]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d04d      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c62:	4b58      	ldr	r3, [pc, #352]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	099b      	lsrs	r3, r3, #6
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f04f 0300 	mov.w	r3, #0
 8002c6e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c72:	f04f 0100 	mov.w	r1, #0
 8002c76:	ea02 0800 	and.w	r8, r2, r0
 8002c7a:	ea03 0901 	and.w	r9, r3, r1
 8002c7e:	4640      	mov	r0, r8
 8002c80:	4649      	mov	r1, r9
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	f04f 0300 	mov.w	r3, #0
 8002c8a:	014b      	lsls	r3, r1, #5
 8002c8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c90:	0142      	lsls	r2, r0, #5
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	ebb0 0008 	subs.w	r0, r0, r8
 8002c9a:	eb61 0109 	sbc.w	r1, r1, r9
 8002c9e:	f04f 0200 	mov.w	r2, #0
 8002ca2:	f04f 0300 	mov.w	r3, #0
 8002ca6:	018b      	lsls	r3, r1, #6
 8002ca8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cac:	0182      	lsls	r2, r0, #6
 8002cae:	1a12      	subs	r2, r2, r0
 8002cb0:	eb63 0301 	sbc.w	r3, r3, r1
 8002cb4:	f04f 0000 	mov.w	r0, #0
 8002cb8:	f04f 0100 	mov.w	r1, #0
 8002cbc:	00d9      	lsls	r1, r3, #3
 8002cbe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cc2:	00d0      	lsls	r0, r2, #3
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	eb12 0208 	adds.w	r2, r2, r8
 8002ccc:	eb43 0309 	adc.w	r3, r3, r9
 8002cd0:	f04f 0000 	mov.w	r0, #0
 8002cd4:	f04f 0100 	mov.w	r1, #0
 8002cd8:	0299      	lsls	r1, r3, #10
 8002cda:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cde:	0290      	lsls	r0, r2, #10
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	461a      	mov	r2, r3
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	f7fd fa88 	bl	8000204 <__aeabi_uldivmod>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	e04a      	b.n	8002d94 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cfe:	4b31      	ldr	r3, [pc, #196]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	099b      	lsrs	r3, r3, #6
 8002d04:	461a      	mov	r2, r3
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d0e:	f04f 0100 	mov.w	r1, #0
 8002d12:	ea02 0400 	and.w	r4, r2, r0
 8002d16:	ea03 0501 	and.w	r5, r3, r1
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	014b      	lsls	r3, r1, #5
 8002d28:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d2c:	0142      	lsls	r2, r0, #5
 8002d2e:	4610      	mov	r0, r2
 8002d30:	4619      	mov	r1, r3
 8002d32:	1b00      	subs	r0, r0, r4
 8002d34:	eb61 0105 	sbc.w	r1, r1, r5
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	f04f 0300 	mov.w	r3, #0
 8002d40:	018b      	lsls	r3, r1, #6
 8002d42:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d46:	0182      	lsls	r2, r0, #6
 8002d48:	1a12      	subs	r2, r2, r0
 8002d4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d4e:	f04f 0000 	mov.w	r0, #0
 8002d52:	f04f 0100 	mov.w	r1, #0
 8002d56:	00d9      	lsls	r1, r3, #3
 8002d58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d5c:	00d0      	lsls	r0, r2, #3
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	1912      	adds	r2, r2, r4
 8002d64:	eb45 0303 	adc.w	r3, r5, r3
 8002d68:	f04f 0000 	mov.w	r0, #0
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	0299      	lsls	r1, r3, #10
 8002d72:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d76:	0290      	lsls	r0, r2, #10
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	f7fd fa3c 	bl	8000204 <__aeabi_uldivmod>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4613      	mov	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	0c1b      	lsrs	r3, r3, #16
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dac:	60bb      	str	r3, [r7, #8]
      break;
 8002dae:	e002      	b.n	8002db6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002db0:	4b05      	ldr	r3, [pc, #20]	; (8002dc8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002db2:	60bb      	str	r3, [r7, #8]
      break;
 8002db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002db6:	68bb      	ldr	r3, [r7, #8]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	00f42400 	.word	0x00f42400

08002dcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dd0:	4b03      	ldr	r3, [pc, #12]	; (8002de0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	20000000 	.word	0x20000000

08002de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d010      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002e04:	4b87      	ldr	r3, [pc, #540]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e0a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	4984      	ldr	r1, [pc, #528]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8002e22:	2301      	movs	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d010      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002e32:	4b7c      	ldr	r3, [pc, #496]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e38:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	4978      	ldr	r1, [pc, #480]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 8002e50:	2301      	movs	r3, #1
 8002e52:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8083 	beq.w	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4b6f      	ldr	r3, [pc, #444]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	4a6e      	ldr	r2, [pc, #440]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e70:	6413      	str	r3, [r2, #64]	; 0x40
 8002e72:	4b6c      	ldr	r3, [pc, #432]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e7e:	4b6a      	ldr	r3, [pc, #424]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a69      	ldr	r2, [pc, #420]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e88:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e8a:	f7fe f953 	bl	8001134 <HAL_GetTick>
 8002e8e:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e90:	e008      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e92:	f7fe f94f 	bl	8001134 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e162      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ea4:	4b60      	ldr	r3, [pc, #384]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f0      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002eb0:	4b5c      	ldr	r3, [pc, #368]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb8:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d02f      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69db      	ldr	r3, [r3, #28]
 8002ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d028      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ece:	4b55      	ldr	r3, [pc, #340]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ed8:	4b54      	ldr	r3, [pc, #336]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002eda:	2201      	movs	r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ede:	4b53      	ldr	r3, [pc, #332]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ee4:	4a4f      	ldr	r2, [pc, #316]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002eea:	4b4e      	ldr	r3, [pc, #312]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d114      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7fe f91d 	bl	8001134 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fe f919 	bl	8001134 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e12a      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	4b43      	ldr	r3, [pc, #268]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ee      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f2c:	d10d      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f42:	4938      	ldr	r1, [pc, #224]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	608b      	str	r3, [r1, #8]
 8002f48:	e005      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8002f4a:	4b36      	ldr	r3, [pc, #216]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	4a35      	ldr	r2, [pc, #212]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f50:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f54:	6093      	str	r3, [r2, #8]
 8002f56:	4b33      	ldr	r3, [pc, #204]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69db      	ldr	r3, [r3, #28]
 8002f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f62:	4930      	ldr	r1, [pc, #192]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d004      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8002f7a:	4b2d      	ldr	r3, [pc, #180]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f7c:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00a      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002f8a:	4b26      	ldr	r3, [pc, #152]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	4922      	ldr	r1, [pc, #136]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d011      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fb2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	491a      	ldr	r1, [pc, #104]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fca:	d101      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	490e      	ldr	r1, [pc, #56]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d004      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	f040 8091 	bne.w	8003124 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003008:	f7fe f894 	bl	8001134 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800300e:	e013      	b.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003010:	f7fe f890 	bl	8001134 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d90c      	bls.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0a3      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x386>
 8003022:	bf00      	nop
 8003024:	40023800 	.word	0x40023800
 8003028:	40007000 	.word	0x40007000
 800302c:	42470e40 	.word	0x42470e40
 8003030:	424711e0 	.word	0x424711e0
 8003034:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003038:	4b4e      	ldr	r3, [pc, #312]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e5      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8003044:	4a4c      	ldr	r2, [pc, #304]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304a:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d023      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d019      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 800307c:	2b00      	cmp	r3, #0
 800307e:	d004      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003088:	d00e      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8003092:	2b00      	cmp	r3, #0
 8003094:	d019      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d115      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030a6:	d110      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	019b      	lsls	r3, r3, #6
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	061b      	lsls	r3, r3, #24
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	071b      	lsls	r3, r3, #28
 80030c2:	492c      	ldr	r1, [pc, #176]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d010      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	019b      	lsls	r3, r3, #6
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	061b      	lsls	r3, r3, #24
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	071b      	lsls	r3, r3, #28
 80030f0:	4920      	ldr	r1, [pc, #128]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030f8:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030fe:	f7fe f819 	bl	8001134 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003106:	f7fe f815 	bl	8001134 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e028      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003118:	4b16      	ldr	r3, [pc, #88]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003130:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003132:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003136:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	490d      	ldr	r1, [pc, #52]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003154:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003158:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	4904      	ldr	r1, [pc, #16]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800
 8003178:	424710d8 	.word	0x424710d8
 800317c:	42470068 	.word	0x42470068

08003180 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e270      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d075      	beq.n	800328a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800319e:	4ba3      	ldr	r3, [pc, #652]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d00c      	beq.n	80031c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031aa:	4ba0      	ldr	r3, [pc, #640]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d112      	bne.n	80031dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b6:	4b9d      	ldr	r3, [pc, #628]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031c2:	d10b      	bne.n	80031dc <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	4b99      	ldr	r3, [pc, #612]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d05b      	beq.n	8003288 <HAL_RCC_OscConfig+0x108>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d157      	bne.n	8003288 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e24b      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e4:	d106      	bne.n	80031f4 <HAL_RCC_OscConfig+0x74>
 80031e6:	4b91      	ldr	r3, [pc, #580]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a90      	ldr	r2, [pc, #576]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	e01d      	b.n	8003230 <HAL_RCC_OscConfig+0xb0>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031fc:	d10c      	bne.n	8003218 <HAL_RCC_OscConfig+0x98>
 80031fe:	4b8b      	ldr	r3, [pc, #556]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a8a      	ldr	r2, [pc, #552]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003208:	6013      	str	r3, [r2, #0]
 800320a:	4b88      	ldr	r3, [pc, #544]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a87      	ldr	r2, [pc, #540]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	e00b      	b.n	8003230 <HAL_RCC_OscConfig+0xb0>
 8003218:	4b84      	ldr	r3, [pc, #528]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a83      	ldr	r2, [pc, #524]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 800321e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	4b81      	ldr	r3, [pc, #516]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a80      	ldr	r2, [pc, #512]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 800322a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d013      	beq.n	8003260 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003238:	f7fd ff7c 	bl	8001134 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003240:	f7fd ff78 	bl	8001134 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	; 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e210      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003252:	4b76      	ldr	r3, [pc, #472]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0xc0>
 800325e:	e014      	b.n	800328a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fd ff68 	bl	8001134 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003268:	f7fd ff64 	bl	8001134 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	; 0x64
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e1fc      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800327a:	4b6c      	ldr	r3, [pc, #432]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0xe8>
 8003286:	e000      	b.n	800328a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d063      	beq.n	800335e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003296:	4b65      	ldr	r3, [pc, #404]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032a2:	4b62      	ldr	r3, [pc, #392]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032aa:	2b08      	cmp	r3, #8
 80032ac:	d11c      	bne.n	80032e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ae:	4b5f      	ldr	r3, [pc, #380]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d116      	bne.n	80032e8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ba:	4b5c      	ldr	r3, [pc, #368]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d005      	beq.n	80032d2 <HAL_RCC_OscConfig+0x152>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d001      	beq.n	80032d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e1d0      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d2:	4b56      	ldr	r3, [pc, #344]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4952      	ldr	r1, [pc, #328]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032e6:	e03a      	b.n	800335e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d020      	beq.n	8003332 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f0:	4b4f      	ldr	r3, [pc, #316]	; (8003430 <HAL_RCC_OscConfig+0x2b0>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f6:	f7fd ff1d 	bl	8001134 <HAL_GetTick>
 80032fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032fc:	e008      	b.n	8003310 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032fe:	f7fd ff19 	bl	8001134 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d901      	bls.n	8003310 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	e1b1      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003310:	4b46      	ldr	r3, [pc, #280]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0f0      	beq.n	80032fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800331c:	4b43      	ldr	r3, [pc, #268]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4940      	ldr	r1, [pc, #256]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 800332c:	4313      	orrs	r3, r2
 800332e:	600b      	str	r3, [r1, #0]
 8003330:	e015      	b.n	800335e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003332:	4b3f      	ldr	r3, [pc, #252]	; (8003430 <HAL_RCC_OscConfig+0x2b0>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003338:	f7fd fefc 	bl	8001134 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003340:	f7fd fef8 	bl	8001134 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e190      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003352:	4b36      	ldr	r3, [pc, #216]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d030      	beq.n	80033cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d016      	beq.n	80033a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003372:	4b30      	ldr	r3, [pc, #192]	; (8003434 <HAL_RCC_OscConfig+0x2b4>)
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003378:	f7fd fedc 	bl	8001134 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003380:	f7fd fed8 	bl	8001134 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e170      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003392:	4b26      	ldr	r3, [pc, #152]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 8003394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0x200>
 800339e:	e015      	b.n	80033cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a0:	4b24      	ldr	r3, [pc, #144]	; (8003434 <HAL_RCC_OscConfig+0x2b4>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a6:	f7fd fec5 	bl	8001134 <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ac:	e008      	b.n	80033c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ae:	f7fd fec1 	bl	8001134 <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e159      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c0:	4b1a      	ldr	r3, [pc, #104]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80033c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f0      	bne.n	80033ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80a0 	beq.w	800351a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033da:	2300      	movs	r3, #0
 80033dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033de:	4b13      	ldr	r3, [pc, #76]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10f      	bne.n	800340a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	4b0f      	ldr	r3, [pc, #60]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	4a0e      	ldr	r2, [pc, #56]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80033f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f8:	6413      	str	r3, [r2, #64]	; 0x40
 80033fa:	4b0c      	ldr	r3, [pc, #48]	; (800342c <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_OscConfig+0x2b8>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003412:	2b00      	cmp	r3, #0
 8003414:	d121      	bne.n	800345a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003416:	4b08      	ldr	r3, [pc, #32]	; (8003438 <HAL_RCC_OscConfig+0x2b8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a07      	ldr	r2, [pc, #28]	; (8003438 <HAL_RCC_OscConfig+0x2b8>)
 800341c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003420:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003422:	f7fd fe87 	bl	8001134 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003428:	e011      	b.n	800344e <HAL_RCC_OscConfig+0x2ce>
 800342a:	bf00      	nop
 800342c:	40023800 	.word	0x40023800
 8003430:	42470000 	.word	0x42470000
 8003434:	42470e80 	.word	0x42470e80
 8003438:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343c:	f7fd fe7a 	bl	8001134 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e112      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344e:	4b8b      	ldr	r3, [pc, #556]	; (800367c <HAL_RCC_OscConfig+0x4fc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d106      	bne.n	8003470 <HAL_RCC_OscConfig+0x2f0>
 8003462:	4b87      	ldr	r3, [pc, #540]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	4a86      	ldr	r2, [pc, #536]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6713      	str	r3, [r2, #112]	; 0x70
 800346e:	e01c      	b.n	80034aa <HAL_RCC_OscConfig+0x32a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b05      	cmp	r3, #5
 8003476:	d10c      	bne.n	8003492 <HAL_RCC_OscConfig+0x312>
 8003478:	4b81      	ldr	r3, [pc, #516]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	4a80      	ldr	r2, [pc, #512]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 800347e:	f043 0304 	orr.w	r3, r3, #4
 8003482:	6713      	str	r3, [r2, #112]	; 0x70
 8003484:	4b7e      	ldr	r3, [pc, #504]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003488:	4a7d      	ldr	r2, [pc, #500]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	6713      	str	r3, [r2, #112]	; 0x70
 8003490:	e00b      	b.n	80034aa <HAL_RCC_OscConfig+0x32a>
 8003492:	4b7b      	ldr	r3, [pc, #492]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	4a7a      	ldr	r2, [pc, #488]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 8003498:	f023 0301 	bic.w	r3, r3, #1
 800349c:	6713      	str	r3, [r2, #112]	; 0x70
 800349e:	4b78      	ldr	r3, [pc, #480]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	4a77      	ldr	r2, [pc, #476]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 80034a4:	f023 0304 	bic.w	r3, r3, #4
 80034a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d015      	beq.n	80034de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b2:	f7fd fe3f 	bl	8001134 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b8:	e00a      	b.n	80034d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fd fe3b 	bl	8001134 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d901      	bls.n	80034d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e0d1      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d0:	4b6b      	ldr	r3, [pc, #428]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	f003 0302 	and.w	r3, r3, #2
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d0ee      	beq.n	80034ba <HAL_RCC_OscConfig+0x33a>
 80034dc:	e014      	b.n	8003508 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034de:	f7fd fe29 	bl	8001134 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fd fe25 	bl	8001134 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0bb      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fc:	4b60      	ldr	r3, [pc, #384]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1ee      	bne.n	80034e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003508:	7dfb      	ldrb	r3, [r7, #23]
 800350a:	2b01      	cmp	r3, #1
 800350c:	d105      	bne.n	800351a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800350e:	4b5c      	ldr	r3, [pc, #368]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a5b      	ldr	r2, [pc, #364]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 8003514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 80a7 	beq.w	8003672 <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003524:	4b56      	ldr	r3, [pc, #344]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	2b08      	cmp	r3, #8
 800352e:	d060      	beq.n	80035f2 <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b02      	cmp	r3, #2
 8003536:	d145      	bne.n	80035c4 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003538:	4b52      	ldr	r3, [pc, #328]	; (8003684 <HAL_RCC_OscConfig+0x504>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800353e:	f7fd fdf9 	bl	8001134 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003546:	f7fd fdf5 	bl	8001134 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e08d      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003558:	4b49      	ldr	r3, [pc, #292]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1f0      	bne.n	8003546 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	431a      	orrs	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	019b      	lsls	r3, r3, #6
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357a:	085b      	lsrs	r3, r3, #1
 800357c:	3b01      	subs	r3, #1
 800357e:	041b      	lsls	r3, r3, #16
 8003580:	431a      	orrs	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	061b      	lsls	r3, r3, #24
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	071b      	lsls	r3, r3, #28
 8003590:	493b      	ldr	r1, [pc, #236]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003596:	4b3b      	ldr	r3, [pc, #236]	; (8003684 <HAL_RCC_OscConfig+0x504>)
 8003598:	2201      	movs	r2, #1
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359c:	f7fd fdca 	bl	8001134 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fd fdc6 	bl	8001134 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e05e      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b6:	4b32      	ldr	r3, [pc, #200]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x424>
 80035c2:	e056      	b.n	8003672 <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c4:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <HAL_RCC_OscConfig+0x504>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ca:	f7fd fdb3 	bl	8001134 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d2:	f7fd fdaf 	bl	8001134 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e047      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e4:	4b26      	ldr	r3, [pc, #152]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f0      	bne.n	80035d2 <HAL_RCC_OscConfig+0x452>
 80035f0:	e03f      	b.n	8003672 <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e03a      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035fe:	4b20      	ldr	r3, [pc, #128]	; (8003680 <HAL_RCC_OscConfig+0x500>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d030      	beq.n	800366e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003616:	429a      	cmp	r2, r3
 8003618:	d129      	bne.n	800366e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d122      	bne.n	800366e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800362e:	4013      	ands	r3, r2
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003634:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003636:	4293      	cmp	r3, r2
 8003638:	d119      	bne.n	800366e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	085b      	lsrs	r3, r3, #1
 8003646:	3b01      	subs	r3, #1
 8003648:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800364a:	429a      	cmp	r2, r3
 800364c:	d10f      	bne.n	800366e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d107      	bne.n	800366e <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003668:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d001      	beq.n	8003672 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40007000 	.word	0x40007000
 8003680:	40023800 	.word	0x40023800
 8003684:	42470060 	.word	0x42470060

08003688 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003688:	b084      	sub	sp, #16
 800368a:	b580      	push	{r7, lr}
 800368c:	b084      	sub	sp, #16
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
 8003692:	f107 001c 	add.w	r0, r7, #28
 8003696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369c:	2b01      	cmp	r3, #1
 800369e:	d122      	bne.n	80036e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80036b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80036c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d105      	bne.n	80036da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f001 fb16 	bl	8004d0c <USB_CoreReset>
 80036e0:	4603      	mov	r3, r0
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	e01a      	b.n	800371c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f001 fb0a 	bl	8004d0c <USB_CoreReset>
 80036f8:	4603      	mov	r3, r0
 80036fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80036fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d106      	bne.n	8003710 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	639a      	str	r2, [r3, #56]	; 0x38
 800370e:	e005      	b.n	800371c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800371c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371e:	2b01      	cmp	r3, #1
 8003720:	d10b      	bne.n	800373a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f043 0206 	orr.w	r2, r3, #6
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800373a:	7bfb      	ldrb	r3, [r7, #15]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003746:	b004      	add	sp, #16
 8003748:	4770      	bx	lr
	...

0800374c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	4613      	mov	r3, r2
 8003758:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	2b02      	cmp	r3, #2
 800375e:	d165      	bne.n	800382c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4a41      	ldr	r2, [pc, #260]	; (8003868 <USB_SetTurnaroundTime+0x11c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d906      	bls.n	8003776 <USB_SetTurnaroundTime+0x2a>
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	4a40      	ldr	r2, [pc, #256]	; (800386c <USB_SetTurnaroundTime+0x120>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d202      	bcs.n	8003776 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003770:	230f      	movs	r3, #15
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	e062      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	4a3c      	ldr	r2, [pc, #240]	; (800386c <USB_SetTurnaroundTime+0x120>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d306      	bcc.n	800378c <USB_SetTurnaroundTime+0x40>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4a3b      	ldr	r2, [pc, #236]	; (8003870 <USB_SetTurnaroundTime+0x124>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d202      	bcs.n	800378c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003786:	230e      	movs	r3, #14
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e057      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	4a38      	ldr	r2, [pc, #224]	; (8003870 <USB_SetTurnaroundTime+0x124>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d306      	bcc.n	80037a2 <USB_SetTurnaroundTime+0x56>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	4a37      	ldr	r2, [pc, #220]	; (8003874 <USB_SetTurnaroundTime+0x128>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d202      	bcs.n	80037a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800379c:	230d      	movs	r3, #13
 800379e:	617b      	str	r3, [r7, #20]
 80037a0:	e04c      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4a33      	ldr	r2, [pc, #204]	; (8003874 <USB_SetTurnaroundTime+0x128>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d306      	bcc.n	80037b8 <USB_SetTurnaroundTime+0x6c>
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	4a32      	ldr	r2, [pc, #200]	; (8003878 <USB_SetTurnaroundTime+0x12c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d802      	bhi.n	80037b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80037b2:	230c      	movs	r3, #12
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e041      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	4a2f      	ldr	r2, [pc, #188]	; (8003878 <USB_SetTurnaroundTime+0x12c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d906      	bls.n	80037ce <USB_SetTurnaroundTime+0x82>
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4a2e      	ldr	r2, [pc, #184]	; (800387c <USB_SetTurnaroundTime+0x130>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d802      	bhi.n	80037ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80037c8:	230b      	movs	r3, #11
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	e036      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	4a2a      	ldr	r2, [pc, #168]	; (800387c <USB_SetTurnaroundTime+0x130>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d906      	bls.n	80037e4 <USB_SetTurnaroundTime+0x98>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	4a29      	ldr	r2, [pc, #164]	; (8003880 <USB_SetTurnaroundTime+0x134>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d802      	bhi.n	80037e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80037de:	230a      	movs	r3, #10
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	e02b      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	4a26      	ldr	r2, [pc, #152]	; (8003880 <USB_SetTurnaroundTime+0x134>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d906      	bls.n	80037fa <USB_SetTurnaroundTime+0xae>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4a25      	ldr	r2, [pc, #148]	; (8003884 <USB_SetTurnaroundTime+0x138>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d202      	bcs.n	80037fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037f4:	2309      	movs	r3, #9
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	e020      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4a21      	ldr	r2, [pc, #132]	; (8003884 <USB_SetTurnaroundTime+0x138>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d306      	bcc.n	8003810 <USB_SetTurnaroundTime+0xc4>
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	4a20      	ldr	r2, [pc, #128]	; (8003888 <USB_SetTurnaroundTime+0x13c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d802      	bhi.n	8003810 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800380a:	2308      	movs	r3, #8
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	e015      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <USB_SetTurnaroundTime+0x13c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d906      	bls.n	8003826 <USB_SetTurnaroundTime+0xda>
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4a1c      	ldr	r2, [pc, #112]	; (800388c <USB_SetTurnaroundTime+0x140>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d202      	bcs.n	8003826 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003820:	2307      	movs	r3, #7
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e00a      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003826:	2306      	movs	r3, #6
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	e007      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d102      	bne.n	8003838 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003832:	2309      	movs	r3, #9
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	e001      	b.n	800383c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003838:	2309      	movs	r3, #9
 800383a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	029b      	lsls	r3, r3, #10
 8003850:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003854:	431a      	orrs	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	00d8acbf 	.word	0x00d8acbf
 800386c:	00e4e1c0 	.word	0x00e4e1c0
 8003870:	00f42400 	.word	0x00f42400
 8003874:	01067380 	.word	0x01067380
 8003878:	011a499f 	.word	0x011a499f
 800387c:	01312cff 	.word	0x01312cff
 8003880:	014ca43f 	.word	0x014ca43f
 8003884:	016e3600 	.word	0x016e3600
 8003888:	01a6ab1f 	.word	0x01a6ab1f
 800388c:	01e84800 	.word	0x01e84800

08003890 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f043 0201 	orr.w	r2, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b083      	sub	sp, #12
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f023 0201 	bic.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d115      	bne.n	8003922 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003902:	2001      	movs	r0, #1
 8003904:	f7fd fc22 	bl	800114c <HAL_Delay>
      ms++;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	3301      	adds	r3, #1
 800390c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f001 f96c 	bl	8004bec <USB_GetMode>
 8003914:	4603      	mov	r3, r0
 8003916:	2b01      	cmp	r3, #1
 8003918:	d01e      	beq.n	8003958 <USB_SetCurrentMode+0x84>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b31      	cmp	r3, #49	; 0x31
 800391e:	d9f0      	bls.n	8003902 <USB_SetCurrentMode+0x2e>
 8003920:	e01a      	b.n	8003958 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d115      	bne.n	8003954 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003934:	2001      	movs	r0, #1
 8003936:	f7fd fc09 	bl	800114c <HAL_Delay>
      ms++;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3301      	adds	r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f001 f953 	bl	8004bec <USB_GetMode>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <USB_SetCurrentMode+0x84>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2b31      	cmp	r3, #49	; 0x31
 8003950:	d9f0      	bls.n	8003934 <USB_SetCurrentMode+0x60>
 8003952:	e001      	b.n	8003958 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e005      	b.n	8003964 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b32      	cmp	r3, #50	; 0x32
 800395c:	d101      	bne.n	8003962 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800396c:	b084      	sub	sp, #16
 800396e:	b580      	push	{r7, lr}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
 8003976:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800397a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	e009      	b.n	80039a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	3340      	adds	r3, #64	; 0x40
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	2200      	movs	r2, #0
 8003998:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	3301      	adds	r3, #1
 800399e:	613b      	str	r3, [r7, #16]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b0e      	cmp	r3, #14
 80039a4:	d9f2      	bls.n	800398c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80039a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d11c      	bne.n	80039e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039ba:	f043 0302 	orr.w	r3, r3, #2
 80039be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	e005      	b.n	80039f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80039f8:	461a      	mov	r2, r3
 80039fa:	2300      	movs	r3, #0
 80039fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a04:	4619      	mov	r1, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	680b      	ldr	r3, [r1, #0]
 8003a10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d10c      	bne.n	8003a32 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d104      	bne.n	8003a28 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a1e:	2100      	movs	r1, #0
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f945 	bl	8003cb0 <USB_SetDevSpeed>
 8003a26:	e008      	b.n	8003a3a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a28:	2101      	movs	r1, #1
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 f940 	bl	8003cb0 <USB_SetDevSpeed>
 8003a30:	e003      	b.n	8003a3a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003a32:	2103      	movs	r1, #3
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f93b 	bl	8003cb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003a3a:	2110      	movs	r1, #16
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f8f3 	bl	8003c28 <USB_FlushTxFifo>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f90f 	bl	8003c70 <USB_FlushRxFifo>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a62:	461a      	mov	r2, r3
 8003a64:	2300      	movs	r3, #0
 8003a66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2300      	movs	r3, #0
 8003a72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a80:	2300      	movs	r3, #0
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	e043      	b.n	8003b0e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a9c:	d118      	bne.n	8003ad0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10a      	bne.n	8003aba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	015a      	lsls	r2, r3, #5
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4413      	add	r3, r2
 8003aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ab6:	6013      	str	r3, [r2, #0]
 8003ab8:	e013      	b.n	8003ae2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e008      	b.n	8003ae2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003adc:	461a      	mov	r2, r3
 8003ade:	2300      	movs	r3, #0
 8003ae0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	015a      	lsls	r2, r3, #5
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4413      	add	r3, r2
 8003aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aee:	461a      	mov	r2, r3
 8003af0:	2300      	movs	r3, #0
 8003af2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b00:	461a      	mov	r2, r3
 8003b02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d3b7      	bcc.n	8003a86 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	e043      	b.n	8003ba4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b32:	d118      	bne.n	8003b66 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10a      	bne.n	8003b50 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b46:	461a      	mov	r2, r3
 8003b48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	e013      	b.n	8003b78 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	e008      	b.n	8003b78 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	015a      	lsls	r2, r3, #5
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b72:	461a      	mov	r2, r3
 8003b74:	2300      	movs	r3, #0
 8003b76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b84:	461a      	mov	r2, r3
 8003b86:	2300      	movs	r3, #0
 8003b88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b96:	461a      	mov	r2, r3
 8003b98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d3b7      	bcc.n	8003b1c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003bcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d105      	bne.n	8003be0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f043 0210 	orr.w	r2, r3, #16
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	4b0f      	ldr	r3, [pc, #60]	; (8003c24 <USB_DevInit+0x2b8>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	f043 0208 	orr.w	r2, r3, #8
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d107      	bne.n	8003c14 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c0c:	f043 0304 	orr.w	r3, r3, #4
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c20:	b004      	add	sp, #16
 8003c22:	4770      	bx	lr
 8003c24:	803c3800 	.word	0x803c3800

08003c28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	019b      	lsls	r3, r3, #6
 8003c3a:	f043 0220 	orr.w	r2, r3, #32
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	3301      	adds	r3, #1
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	4a08      	ldr	r2, [pc, #32]	; (8003c6c <USB_FlushTxFifo+0x44>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d901      	bls.n	8003c52 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e006      	b.n	8003c60 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0320 	and.w	r3, r3, #32
 8003c5a:	2b20      	cmp	r3, #32
 8003c5c:	d0f1      	beq.n	8003c42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	00030d40 	.word	0x00030d40

08003c70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2210      	movs	r2, #16
 8003c80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	3301      	adds	r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	4a08      	ldr	r2, [pc, #32]	; (8003cac <USB_FlushRxFifo+0x3c>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d901      	bls.n	8003c92 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e006      	b.n	8003ca0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d0f1      	beq.n	8003c82 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	00030d40 	.word	0x00030d40

08003cb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	78fb      	ldrb	r3, [r7, #3]
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b087      	sub	sp, #28
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0306 	and.w	r3, r3, #6
 8003cfa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d102      	bne.n	8003d08 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003d02:	2300      	movs	r3, #0
 8003d04:	75fb      	strb	r3, [r7, #23]
 8003d06:	e00a      	b.n	8003d1e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d002      	beq.n	8003d14 <USB_GetDevSpeed+0x32>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b06      	cmp	r3, #6
 8003d12:	d102      	bne.n	8003d1a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003d14:	2302      	movs	r3, #2
 8003d16:	75fb      	strb	r3, [r7, #23]
 8003d18:	e001      	b.n	8003d1e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003d1a:	230f      	movs	r3, #15
 8003d1c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003d1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	785b      	ldrb	r3, [r3, #1]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d13a      	bne.n	8003dbe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d4e:	69da      	ldr	r2, [r3, #28]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	2101      	movs	r1, #1
 8003d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	68f9      	ldr	r1, [r7, #12]
 8003d62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	015a      	lsls	r2, r3, #5
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	4413      	add	r3, r2
 8003d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d155      	bne.n	8003e2c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	78db      	ldrb	r3, [r3, #3]
 8003d9a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d9c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	059b      	lsls	r3, r3, #22
 8003da2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003da4:	4313      	orrs	r3, r2
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	0151      	lsls	r1, r2, #5
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	440a      	add	r2, r1
 8003dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dba:	6013      	str	r3, [r2, #0]
 8003dbc:	e036      	b.n	8003e2c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	2101      	movs	r1, #1
 8003dd0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd4:	041b      	lsls	r3, r3, #16
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d11a      	bne.n	8003e2c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	78db      	ldrb	r3, [r3, #3]
 8003e10:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003e12:	430b      	orrs	r3, r1
 8003e14:	4313      	orrs	r3, r2
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	0151      	lsls	r1, r2, #5
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	440a      	add	r2, r1
 8003e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e2a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3714      	adds	r7, #20
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
	...

08003e3c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	785b      	ldrb	r3, [r3, #1]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d161      	bne.n	8003f1c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e6e:	d11f      	bne.n	8003eb0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	0151      	lsls	r1, r2, #5
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	440a      	add	r2, r1
 8003e86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e8a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e8e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	0151      	lsls	r1, r2, #5
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	440a      	add	r2, r1
 8003ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	f003 030f 	and.w	r3, r3, #15
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	68f9      	ldr	r1, [r7, #12]
 8003ecc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	68f9      	ldr	r1, [r7, #12]
 8003ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	0159      	lsls	r1, r3, #5
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	440b      	add	r3, r1
 8003f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f12:	4619      	mov	r1, r3
 8003f14:	4b35      	ldr	r3, [pc, #212]	; (8003fec <USB_DeactivateEndpoint+0x1b0>)
 8003f16:	4013      	ands	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]
 8003f1a:	e060      	b.n	8003fde <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f32:	d11f      	bne.n	8003f74 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	0151      	lsls	r1, r2, #5
 8003f46:	68fa      	ldr	r2, [r7, #12]
 8003f48:	440a      	add	r2, r1
 8003f4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f52:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	0151      	lsls	r1, r2, #5
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	440a      	add	r2, r1
 8003f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f72:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	f003 030f 	and.w	r3, r3, #15
 8003f84:	2101      	movs	r1, #1
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	041b      	lsls	r3, r3, #16
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	68f9      	ldr	r1, [r7, #12]
 8003f90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f94:	4013      	ands	r3, r2
 8003f96:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f9e:	69da      	ldr	r2, [r3, #28]
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	f003 030f 	and.w	r3, r3, #15
 8003fa8:	2101      	movs	r1, #1
 8003faa:	fa01 f303 	lsl.w	r3, r1, r3
 8003fae:	041b      	lsls	r3, r3, #16
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	68f9      	ldr	r1, [r7, #12]
 8003fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	0159      	lsls	r1, r3, #5
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	440b      	add	r3, r1
 8003fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <USB_DeactivateEndpoint+0x1b4>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	ec337800 	.word	0xec337800
 8003ff0:	eff37800 	.word	0xeff37800

08003ff4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08a      	sub	sp, #40	; 0x28
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	4613      	mov	r3, r2
 8004000:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	785b      	ldrb	r3, [r3, #1]
 8004010:	2b01      	cmp	r3, #1
 8004012:	f040 815c 	bne.w	80042ce <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d132      	bne.n	8004084 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	0151      	lsls	r1, r2, #5
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	440a      	add	r2, r1
 8004034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004038:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800403c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004040:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	015a      	lsls	r2, r3, #5
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	4413      	add	r3, r2
 800404a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	0151      	lsls	r1, r2, #5
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	440a      	add	r2, r1
 8004058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800405c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004060:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	4413      	add	r3, r2
 800406a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	0151      	lsls	r1, r2, #5
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	440a      	add	r2, r1
 8004078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800407c:	0cdb      	lsrs	r3, r3, #19
 800407e:	04db      	lsls	r3, r3, #19
 8004080:	6113      	str	r3, [r2, #16]
 8004082:	e074      	b.n	800416e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	0151      	lsls	r1, r2, #5
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	440a      	add	r2, r1
 800409a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800409e:	0cdb      	lsrs	r3, r3, #19
 80040a0:	04db      	lsls	r3, r3, #19
 80040a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	0151      	lsls	r1, r2, #5
 80040b6:	69fa      	ldr	r2, [r7, #28]
 80040b8:	440a      	add	r2, r1
 80040ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6959      	ldr	r1, [r3, #20]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	440b      	add	r3, r1
 80040e0:	1e59      	subs	r1, r3, #1
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80040ec:	4b9d      	ldr	r3, [pc, #628]	; (8004364 <USB_EPStartXfer+0x370>)
 80040ee:	400b      	ands	r3, r1
 80040f0:	69b9      	ldr	r1, [r7, #24]
 80040f2:	0148      	lsls	r0, r1, #5
 80040f4:	69f9      	ldr	r1, [r7, #28]
 80040f6:	4401      	add	r1, r0
 80040f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040fc:	4313      	orrs	r3, r2
 80040fe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800410c:	691a      	ldr	r2, [r3, #16]
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004116:	69b9      	ldr	r1, [r7, #24]
 8004118:	0148      	lsls	r0, r1, #5
 800411a:	69f9      	ldr	r1, [r7, #28]
 800411c:	4401      	add	r1, r0
 800411e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004122:	4313      	orrs	r3, r2
 8004124:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	78db      	ldrb	r3, [r3, #3]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d11f      	bne.n	800416e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	0151      	lsls	r1, r2, #5
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	440a      	add	r2, r1
 8004144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004148:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800414c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800414e:	69bb      	ldr	r3, [r7, #24]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	4413      	add	r3, r2
 8004156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	69ba      	ldr	r2, [r7, #24]
 800415e:	0151      	lsls	r1, r2, #5
 8004160:	69fa      	ldr	r2, [r7, #28]
 8004162:	440a      	add	r2, r1
 8004164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004168:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800416c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800416e:	79fb      	ldrb	r3, [r7, #7]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d14b      	bne.n	800420c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d009      	beq.n	8004190 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	015a      	lsls	r2, r3, #5
 8004180:	69fb      	ldr	r3, [r7, #28]
 8004182:	4413      	add	r3, r2
 8004184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004188:	461a      	mov	r2, r3
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	78db      	ldrb	r3, [r3, #3]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d128      	bne.n	80041ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d110      	bne.n	80041ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	015a      	lsls	r2, r3, #5
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	4413      	add	r3, r2
 80041b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	0151      	lsls	r1, r2, #5
 80041ba:	69fa      	ldr	r2, [r7, #28]
 80041bc:	440a      	add	r2, r1
 80041be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	e00f      	b.n	80041ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	0151      	lsls	r1, r2, #5
 80041dc:	69fa      	ldr	r2, [r7, #28]
 80041de:	440a      	add	r2, r1
 80041e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	69fa      	ldr	r2, [r7, #28]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004204:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	e12f      	b.n	800446c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	0151      	lsls	r1, r2, #5
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	440a      	add	r2, r1
 8004222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004226:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800422a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	78db      	ldrb	r3, [r3, #3]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d015      	beq.n	8004260 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8117 	beq.w	800446c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	2101      	movs	r1, #1
 8004250:	fa01 f303 	lsl.w	r3, r1, r3
 8004254:	69f9      	ldr	r1, [r7, #28]
 8004256:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800425a:	4313      	orrs	r3, r2
 800425c:	634b      	str	r3, [r1, #52]	; 0x34
 800425e:	e105      	b.n	800446c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426c:	2b00      	cmp	r3, #0
 800426e:	d110      	bne.n	8004292 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	015a      	lsls	r2, r3, #5
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	4413      	add	r3, r2
 8004278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	0151      	lsls	r1, r2, #5
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	440a      	add	r2, r1
 8004286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800428a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	e00f      	b.n	80042b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	4413      	add	r3, r2
 800429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	0151      	lsls	r1, r2, #5
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	440a      	add	r2, r1
 80042a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	68d9      	ldr	r1, [r3, #12]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	781a      	ldrb	r2, [r3, #0]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	b298      	uxth	r0, r3
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	4603      	mov	r3, r0
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 fa2b 	bl	8004722 <USB_WritePacket>
 80042cc:	e0ce      	b.n	800446c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	015a      	lsls	r2, r3, #5
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	69ba      	ldr	r2, [r7, #24]
 80042de:	0151      	lsls	r1, r2, #5
 80042e0:	69fa      	ldr	r2, [r7, #28]
 80042e2:	440a      	add	r2, r1
 80042e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042e8:	0cdb      	lsrs	r3, r3, #19
 80042ea:	04db      	lsls	r3, r3, #19
 80042ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	0151      	lsls	r1, r2, #5
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	440a      	add	r2, r1
 8004304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004308:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800430c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004310:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d126      	bne.n	8004368 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004330:	69b9      	ldr	r1, [r7, #24]
 8004332:	0148      	lsls	r0, r1, #5
 8004334:	69f9      	ldr	r1, [r7, #28]
 8004336:	4401      	add	r1, r0
 8004338:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800433c:	4313      	orrs	r3, r2
 800433e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	0151      	lsls	r1, r2, #5
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	440a      	add	r2, r1
 8004356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800435a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800435e:	6113      	str	r3, [r2, #16]
 8004360:	e036      	b.n	80043d0 <USB_EPStartXfer+0x3dc>
 8004362:	bf00      	nop
 8004364:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	695a      	ldr	r2, [r3, #20]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4413      	add	r3, r2
 8004372:	1e5a      	subs	r2, r3, #1
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438a:	691a      	ldr	r2, [r3, #16]
 800438c:	8afb      	ldrh	r3, [r7, #22]
 800438e:	04d9      	lsls	r1, r3, #19
 8004390:	4b39      	ldr	r3, [pc, #228]	; (8004478 <USB_EPStartXfer+0x484>)
 8004392:	400b      	ands	r3, r1
 8004394:	69b9      	ldr	r1, [r7, #24]
 8004396:	0148      	lsls	r0, r1, #5
 8004398:	69f9      	ldr	r1, [r7, #28]
 800439a:	4401      	add	r1, r0
 800439c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043a0:	4313      	orrs	r3, r2
 80043a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	691a      	ldr	r2, [r3, #16]
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	8af9      	ldrh	r1, [r7, #22]
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043c0:	69b9      	ldr	r1, [r7, #24]
 80043c2:	0148      	lsls	r0, r1, #5
 80043c4:	69f9      	ldr	r1, [r7, #28]
 80043c6:	4401      	add	r1, r0
 80043c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043cc:	4313      	orrs	r3, r2
 80043ce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d10d      	bne.n	80043f2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d009      	beq.n	80043f2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	68d9      	ldr	r1, [r3, #12]
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ee:	460a      	mov	r2, r1
 80043f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	78db      	ldrb	r3, [r3, #3]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d128      	bne.n	800444c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d110      	bne.n	800442c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	0151      	lsls	r1, r2, #5
 800441c:	69fa      	ldr	r2, [r7, #28]
 800441e:	440a      	add	r2, r1
 8004420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004424:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	e00f      	b.n	800444c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	0151      	lsls	r1, r2, #5
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	440a      	add	r2, r1
 8004442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800444a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	015a      	lsls	r2, r3, #5
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	4413      	add	r3, r2
 8004454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	0151      	lsls	r1, r2, #5
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	440a      	add	r2, r1
 8004462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004466:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800446a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	1ff80000 	.word	0x1ff80000

0800447c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	4613      	mov	r3, r2
 8004488:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	785b      	ldrb	r3, [r3, #1]
 8004498:	2b01      	cmp	r3, #1
 800449a:	f040 80cd 	bne.w	8004638 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d132      	bne.n	800450c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	0151      	lsls	r1, r2, #5
 80044b8:	697a      	ldr	r2, [r7, #20]
 80044ba:	440a      	add	r2, r1
 80044bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	0151      	lsls	r1, r2, #5
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	440a      	add	r2, r1
 80044e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	0151      	lsls	r1, r2, #5
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	440a      	add	r2, r1
 8004500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004504:	0cdb      	lsrs	r3, r3, #19
 8004506:	04db      	lsls	r3, r3, #19
 8004508:	6113      	str	r3, [r2, #16]
 800450a:	e04e      	b.n	80045aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	0151      	lsls	r1, r2, #5
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	440a      	add	r2, r1
 8004522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004526:	0cdb      	lsrs	r3, r3, #19
 8004528:	04db      	lsls	r3, r3, #19
 800452a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	015a      	lsls	r2, r3, #5
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	4413      	add	r3, r2
 8004534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	0151      	lsls	r1, r2, #5
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	440a      	add	r2, r1
 8004542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004546:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800454a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800454e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	429a      	cmp	r2, r3
 800455a:	d903      	bls.n	8004564 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	4413      	add	r3, r2
 800456c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	0151      	lsls	r1, r2, #5
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	440a      	add	r2, r1
 800457a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004582:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004590:	691a      	ldr	r2, [r3, #16]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459a:	6939      	ldr	r1, [r7, #16]
 800459c:	0148      	lsls	r0, r1, #5
 800459e:	6979      	ldr	r1, [r7, #20]
 80045a0:	4401      	add	r1, r0
 80045a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80045a6:	4313      	orrs	r3, r2
 80045a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d11e      	bne.n	80045ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d009      	beq.n	80045cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c4:	461a      	mov	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	0151      	lsls	r1, r2, #5
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	440a      	add	r2, r1
 80045e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045ea:	6013      	str	r3, [r2, #0]
 80045ec:	e092      	b.n	8004714 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	015a      	lsls	r2, r3, #5
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	4413      	add	r3, r2
 80045f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	0151      	lsls	r1, r2, #5
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	440a      	add	r2, r1
 8004604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004608:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800460c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d07e      	beq.n	8004714 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	2101      	movs	r1, #1
 8004628:	fa01 f303 	lsl.w	r3, r1, r3
 800462c:	6979      	ldr	r1, [r7, #20]
 800462e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004632:	4313      	orrs	r3, r2
 8004634:	634b      	str	r3, [r1, #52]	; 0x34
 8004636:	e06d      	b.n	8004714 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	015a      	lsls	r2, r3, #5
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	4413      	add	r3, r2
 8004640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	0151      	lsls	r1, r2, #5
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	440a      	add	r2, r1
 800464e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004652:	0cdb      	lsrs	r3, r3, #19
 8004654:	04db      	lsls	r3, r3, #19
 8004656:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	0151      	lsls	r1, r2, #5
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	440a      	add	r2, r1
 800466e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004672:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004676:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800467a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	689a      	ldr	r2, [r3, #8]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	0151      	lsls	r1, r2, #5
 800469e:	697a      	ldr	r2, [r7, #20]
 80046a0:	440a      	add	r2, r1
 80046a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b8:	691a      	ldr	r2, [r3, #16]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c2:	6939      	ldr	r1, [r7, #16]
 80046c4:	0148      	lsls	r0, r1, #5
 80046c6:	6979      	ldr	r1, [r7, #20]
 80046c8:	4401      	add	r1, r0
 80046ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046ce:	4313      	orrs	r3, r2
 80046d0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d10d      	bne.n	80046f4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d009      	beq.n	80046f4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	68d9      	ldr	r1, [r3, #12]
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f0:	460a      	mov	r2, r1
 80046f2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	0151      	lsls	r1, r2, #5
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	440a      	add	r2, r1
 800470a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800470e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004712:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004722:	b480      	push	{r7}
 8004724:	b089      	sub	sp, #36	; 0x24
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	4611      	mov	r1, r2
 800472e:	461a      	mov	r2, r3
 8004730:	460b      	mov	r3, r1
 8004732:	71fb      	strb	r3, [r7, #7]
 8004734:	4613      	mov	r3, r2
 8004736:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004740:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004744:	2b00      	cmp	r3, #0
 8004746:	d123      	bne.n	8004790 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004748:	88bb      	ldrh	r3, [r7, #4]
 800474a:	3303      	adds	r3, #3
 800474c:	089b      	lsrs	r3, r3, #2
 800474e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004750:	2300      	movs	r3, #0
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	e018      	b.n	8004788 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004756:	79fb      	ldrb	r3, [r7, #7]
 8004758:	031a      	lsls	r2, r3, #12
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	4413      	add	r3, r2
 800475e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004762:	461a      	mov	r2, r3
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6013      	str	r3, [r2, #0]
      pSrc++;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	3301      	adds	r3, #1
 800476e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	3301      	adds	r3, #1
 8004774:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3301      	adds	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	3301      	adds	r3, #1
 8004780:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	3301      	adds	r3, #1
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	429a      	cmp	r2, r3
 800478e:	d3e2      	bcc.n	8004756 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3724      	adds	r7, #36	; 0x24
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800479e:	b480      	push	{r7}
 80047a0:	b08b      	sub	sp, #44	; 0x2c
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	4613      	mov	r3, r2
 80047aa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047b4:	88fb      	ldrh	r3, [r7, #6]
 80047b6:	089b      	lsrs	r3, r3, #2
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047bc:	88fb      	ldrh	r3, [r7, #6]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047c4:	2300      	movs	r3, #0
 80047c6:	623b      	str	r3, [r7, #32]
 80047c8:	e014      	b.n	80047f4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d4:	601a      	str	r2, [r3, #0]
    pDest++;
 80047d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d8:	3301      	adds	r3, #1
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047de:	3301      	adds	r3, #1
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	3301      	adds	r3, #1
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	3301      	adds	r3, #1
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80047ee:	6a3b      	ldr	r3, [r7, #32]
 80047f0:	3301      	adds	r3, #1
 80047f2:	623b      	str	r3, [r7, #32]
 80047f4:	6a3a      	ldr	r2, [r7, #32]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d3e6      	bcc.n	80047ca <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80047fc:	8bfb      	ldrh	r3, [r7, #30]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01e      	beq.n	8004840 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004802:	2300      	movs	r3, #0
 8004804:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800480c:	461a      	mov	r2, r3
 800480e:	f107 0310 	add.w	r3, r7, #16
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	fa22 f303 	lsr.w	r3, r2, r3
 8004822:	b2da      	uxtb	r2, r3
 8004824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004826:	701a      	strb	r2, [r3, #0]
      i++;
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	3301      	adds	r3, #1
 800482c:	623b      	str	r3, [r7, #32]
      pDest++;
 800482e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004830:	3301      	adds	r3, #1
 8004832:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004834:	8bfb      	ldrh	r3, [r7, #30]
 8004836:	3b01      	subs	r3, #1
 8004838:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800483a:	8bfb      	ldrh	r3, [r7, #30]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1ea      	bne.n	8004816 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004842:	4618      	mov	r0, r3
 8004844:	372c      	adds	r7, #44	; 0x2c
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800484e:	b480      	push	{r7}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d12c      	bne.n	80048c4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	db12      	blt.n	80048a2 <USB_EPSetStall+0x54>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00f      	beq.n	80048a2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	0151      	lsls	r1, r2, #5
 8004894:	68fa      	ldr	r2, [r7, #12]
 8004896:	440a      	add	r2, r1
 8004898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800489c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048a0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	015a      	lsls	r2, r3, #5
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4413      	add	r3, r2
 80048aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68ba      	ldr	r2, [r7, #8]
 80048b2:	0151      	lsls	r1, r2, #5
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	440a      	add	r2, r1
 80048b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e02b      	b.n	800491c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	db12      	blt.n	80048fc <USB_EPSetStall+0xae>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00f      	beq.n	80048fc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	0151      	lsls	r1, r2, #5
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	440a      	add	r2, r1
 80048f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048fa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68ba      	ldr	r2, [r7, #8]
 800490c:	0151      	lsls	r1, r2, #5
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	440a      	add	r2, r1
 8004912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800491a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3714      	adds	r7, #20
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	785b      	ldrb	r3, [r3, #1]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d128      	bne.n	8004998 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	0151      	lsls	r1, r2, #5
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	440a      	add	r2, r1
 800495c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004960:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004964:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	78db      	ldrb	r3, [r3, #3]
 800496a:	2b03      	cmp	r3, #3
 800496c:	d003      	beq.n	8004976 <USB_EPClearStall+0x4c>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	78db      	ldrb	r3, [r3, #3]
 8004972:	2b02      	cmp	r3, #2
 8004974:	d138      	bne.n	80049e8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	0151      	lsls	r1, r2, #5
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	440a      	add	r2, r1
 800498c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	e027      	b.n	80049e8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	0151      	lsls	r1, r2, #5
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	440a      	add	r2, r1
 80049ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	78db      	ldrb	r3, [r3, #3]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d003      	beq.n	80049c8 <USB_EPClearStall+0x9e>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	78db      	ldrb	r3, [r3, #3]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d10f      	bne.n	80049e8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	0151      	lsls	r1, r2, #5
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	440a      	add	r2, r1
 80049de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049e6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b085      	sub	sp, #20
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	460b      	mov	r3, r1
 8004a00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a14:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a18:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004a2a:	68f9      	ldr	r1, [r7, #12]
 8004a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a30:	4313      	orrs	r3, r2
 8004a32:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b085      	sub	sp, #20
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a5c:	f023 0303 	bic.w	r3, r3, #3
 8004a60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a70:	f023 0302 	bic.w	r3, r3, #2
 8004a74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3714      	adds	r7, #20
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a9e:	f023 0303 	bic.w	r3, r3, #3
 8004aa2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ab2:	f043 0302 	orr.w	r3, r3, #2
 8004ab6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b085      	sub	sp, #20
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	68fa      	ldr	r2, [r7, #12]
 8004ada:	4013      	ands	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ade:	68fb      	ldr	r3, [r7, #12]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	0c1b      	lsrs	r3, r3, #16
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	4013      	ands	r3, r2
 8004b42:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	b29b      	uxth	r3, r3
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	015a      	lsls	r2, r3, #5
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4413      	add	r3, r2
 8004b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	4013      	ands	r3, r2
 8004b80:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b82:	68bb      	ldr	r3, [r7, #8]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3714      	adds	r7, #20
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	f003 030f 	and.w	r3, r3, #15
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc0:	01db      	lsls	r3, r3, #7
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004bca:	78fb      	ldrb	r3, [r7, #3]
 8004bcc:	015a      	lsls	r2, r3, #5
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004bde:	68bb      	ldr	r3, [r7, #8]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	371c      	adds	r7, #28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr

08004bec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c22:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c26:	f023 0307 	bic.w	r3, r3, #7
 8004c2a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c40:	2300      	movs	r3, #0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
	...

08004c50 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	607a      	str	r2, [r7, #4]
 8004c5c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	333c      	adds	r3, #60	; 0x3c
 8004c66:	3304      	adds	r3, #4
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	4a26      	ldr	r2, [pc, #152]	; (8004d08 <USB_EP0_OutStart+0xb8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d90a      	bls.n	8004c8a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c84:	d101      	bne.n	8004c8a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	e037      	b.n	8004cfa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	461a      	mov	r2, r3
 8004c92:	2300      	movs	r3, #0
 8004c94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ca8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb8:	f043 0318 	orr.w	r3, r3, #24
 8004cbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ccc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004cd0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004cd2:	7afb      	ldrb	r3, [r7, #11]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d10f      	bne.n	8004cf8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	461a      	mov	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	697a      	ldr	r2, [r7, #20]
 8004cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cf2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004cf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	4f54300a 	.word	0x4f54300a

08004d0c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	4a13      	ldr	r2, [pc, #76]	; (8004d6c <USB_CoreReset+0x60>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d901      	bls.n	8004d28 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e01a      	b.n	8004d5e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	daf3      	bge.n	8004d18 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f043 0201 	orr.w	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3301      	adds	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <USB_CoreReset+0x60>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d901      	bls.n	8004d50 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e006      	b.n	8004d5e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d0f1      	beq.n	8004d40 <USB_CoreReset+0x34>

  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	00030d40 	.word	0x00030d40

08004d70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004d7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004d80:	f002 f9a0 	bl	80070c4 <USBD_static_malloc>
 8004d84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d105      	bne.n	8004d98 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004d94:	2302      	movs	r3, #2
 8004d96:	e066      	b.n	8004e66 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	7c1b      	ldrb	r3, [r3, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d119      	bne.n	8004ddc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004da8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dac:	2202      	movs	r2, #2
 8004dae:	2181      	movs	r1, #129	; 0x81
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f002 f816 	bl	8006de2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f002 f80c 	bl	8006de2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2210      	movs	r2, #16
 8004dd6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004dda:	e016      	b.n	8004e0a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004ddc:	2340      	movs	r3, #64	; 0x40
 8004dde:	2202      	movs	r2, #2
 8004de0:	2181      	movs	r1, #129	; 0x81
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f001 fffd 	bl	8006de2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004dee:	2340      	movs	r3, #64	; 0x40
 8004df0:	2202      	movs	r2, #2
 8004df2:	2101      	movs	r1, #1
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f001 fff4 	bl	8006de2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2210      	movs	r2, #16
 8004e06:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	2182      	movs	r1, #130	; 0x82
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f001 ffe6 	bl	8006de2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	7c1b      	ldrb	r3, [r3, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d109      	bne.n	8004e54 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f002 f8b7 	bl	8006fc0 <USBD_LL_PrepareReceive>
 8004e52:	e007      	b.n	8004e64 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e5a:	2340      	movs	r3, #64	; 0x40
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f002 f8ae 	bl	8006fc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	460b      	mov	r3, r1
 8004e78:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004e7a:	2181      	movs	r1, #129	; 0x81
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f001 ffd6 	bl	8006e2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004e88:	2101      	movs	r1, #1
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f001 ffcf 	bl	8006e2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004e98:	2182      	movs	r1, #130	; 0x82
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f001 ffc7 	bl	8006e2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00e      	beq.n	8004ed8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f002 f908 	bl	80070e0 <USBD_static_free>
    pdev->pClassData = NULL;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
	...

08004ee4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ef4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e0af      	b.n	800506c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d03f      	beq.n	8004f98 <USBD_CDC_Setup+0xb4>
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	f040 809f 	bne.w	800505c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	88db      	ldrh	r3, [r3, #6]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d02e      	beq.n	8004f84 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	b25b      	sxtb	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	da16      	bge.n	8004f5e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004f3c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	88d2      	ldrh	r2, [r2, #6]
 8004f42:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	88db      	ldrh	r3, [r3, #6]
 8004f48:	2b07      	cmp	r3, #7
 8004f4a:	bf28      	it	cs
 8004f4c:	2307      	movcs	r3, #7
 8004f4e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	89fa      	ldrh	r2, [r7, #14]
 8004f54:	4619      	mov	r1, r3
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f001 fb13 	bl	8006582 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004f5c:	e085      	b.n	800506a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	785a      	ldrb	r2, [r3, #1]
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	88db      	ldrh	r3, [r3, #6]
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004f74:	6939      	ldr	r1, [r7, #16]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	88db      	ldrh	r3, [r3, #6]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 fb2c 	bl	80065da <USBD_CtlPrepareRx>
      break;
 8004f82:	e072      	b.n	800506a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	7850      	ldrb	r0, [r2, #1]
 8004f90:	2200      	movs	r2, #0
 8004f92:	6839      	ldr	r1, [r7, #0]
 8004f94:	4798      	blx	r3
      break;
 8004f96:	e068      	b.n	800506a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	785b      	ldrb	r3, [r3, #1]
 8004f9c:	2b0b      	cmp	r3, #11
 8004f9e:	d852      	bhi.n	8005046 <USBD_CDC_Setup+0x162>
 8004fa0:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <USBD_CDC_Setup+0xc4>)
 8004fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa6:	bf00      	nop
 8004fa8:	08004fd9 	.word	0x08004fd9
 8004fac:	08005055 	.word	0x08005055
 8004fb0:	08005047 	.word	0x08005047
 8004fb4:	08005047 	.word	0x08005047
 8004fb8:	08005047 	.word	0x08005047
 8004fbc:	08005047 	.word	0x08005047
 8004fc0:	08005047 	.word	0x08005047
 8004fc4:	08005047 	.word	0x08005047
 8004fc8:	08005047 	.word	0x08005047
 8004fcc:	08005047 	.word	0x08005047
 8004fd0:	08005003 	.word	0x08005003
 8004fd4:	0800502d 	.word	0x0800502d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d107      	bne.n	8004ff4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004fe4:	f107 030a 	add.w	r3, r7, #10
 8004fe8:	2202      	movs	r2, #2
 8004fea:	4619      	mov	r1, r3
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f001 fac8 	bl	8006582 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004ff2:	e032      	b.n	800505a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004ff4:	6839      	ldr	r1, [r7, #0]
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f001 fa52 	bl	80064a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	75fb      	strb	r3, [r7, #23]
          break;
 8005000:	e02b      	b.n	800505a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b03      	cmp	r3, #3
 800500c:	d107      	bne.n	800501e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800500e:	f107 030d 	add.w	r3, r7, #13
 8005012:	2201      	movs	r2, #1
 8005014:	4619      	mov	r1, r3
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f001 fab3 	bl	8006582 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800501c:	e01d      	b.n	800505a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800501e:	6839      	ldr	r1, [r7, #0]
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f001 fa3d 	bl	80064a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005026:	2303      	movs	r3, #3
 8005028:	75fb      	strb	r3, [r7, #23]
          break;
 800502a:	e016      	b.n	800505a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b03      	cmp	r3, #3
 8005036:	d00f      	beq.n	8005058 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8005038:	6839      	ldr	r1, [r7, #0]
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f001 fa30 	bl	80064a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8005040:	2303      	movs	r3, #3
 8005042:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005044:	e008      	b.n	8005058 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005046:	6839      	ldr	r1, [r7, #0]
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f001 fa29 	bl	80064a0 <USBD_CtlError>
          ret = USBD_FAIL;
 800504e:	2303      	movs	r3, #3
 8005050:	75fb      	strb	r3, [r7, #23]
          break;
 8005052:	e002      	b.n	800505a <USBD_CDC_Setup+0x176>
          break;
 8005054:	bf00      	nop
 8005056:	e008      	b.n	800506a <USBD_CDC_Setup+0x186>
          break;
 8005058:	bf00      	nop
      }
      break;
 800505a:	e006      	b.n	800506a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800505c:	6839      	ldr	r1, [r7, #0]
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f001 fa1e 	bl	80064a0 <USBD_CtlError>
      ret = USBD_FAIL;
 8005064:	2303      	movs	r3, #3
 8005066:	75fb      	strb	r3, [r7, #23]
      break;
 8005068:	bf00      	nop
  }

  return (uint8_t)ret;
 800506a:	7dfb      	ldrb	r3, [r7, #23]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3718      	adds	r7, #24
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005086:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005092:	2303      	movs	r3, #3
 8005094:	e04f      	b.n	8005136 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800509c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800509e:	78fa      	ldrb	r2, [r7, #3]
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	3318      	adds	r3, #24
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d029      	beq.n	8005108 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80050b4:	78fa      	ldrb	r2, [r7, #3]
 80050b6:	6879      	ldr	r1, [r7, #4]
 80050b8:	4613      	mov	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4413      	add	r3, r2
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	440b      	add	r3, r1
 80050c2:	3318      	adds	r3, #24
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	78f9      	ldrb	r1, [r7, #3]
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	460b      	mov	r3, r1
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	1a5b      	subs	r3, r3, r1
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4403      	add	r3, r0
 80050d4:	3344      	adds	r3, #68	; 0x44
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80050dc:	fb03 f301 	mul.w	r3, r3, r1
 80050e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d110      	bne.n	8005108 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80050e6:	78fa      	ldrb	r2, [r7, #3]
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	440b      	add	r3, r1
 80050f4:	3318      	adds	r3, #24
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80050fa:	78f9      	ldrb	r1, [r7, #3]
 80050fc:	2300      	movs	r3, #0
 80050fe:	2200      	movs	r2, #0
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f001 ff3c 	bl	8006f7e <USBD_LL_Transmit>
 8005106:	e015      	b.n	8005134 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2200      	movs	r2, #0
 800510c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00b      	beq.n	8005134 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	68ba      	ldr	r2, [r7, #8]
 8005126:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005130:	78fa      	ldrb	r2, [r7, #3]
 8005132:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b084      	sub	sp, #16
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	460b      	mov	r3, r1
 8005148:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005150:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800515c:	2303      	movs	r3, #3
 800515e:	e015      	b.n	800518c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005160:	78fb      	ldrb	r3, [r7, #3]
 8005162:	4619      	mov	r1, r3
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f001 ff4c 	bl	8007002 <USBD_LL_GetRxDataSize>
 800516a:	4602      	mov	r2, r0
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005186:	4611      	mov	r1, r2
 8005188:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3710      	adds	r7, #16
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e01b      	b.n	80051e6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d015      	beq.n	80051e4 <USBD_CDC_EP0_RxReady+0x50>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80051be:	2bff      	cmp	r3, #255	; 0xff
 80051c0:	d010      	beq.n	80051e4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80051d0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051d8:	b292      	uxth	r2, r2
 80051da:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	22ff      	movs	r2, #255	; 0xff
 80051e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2243      	movs	r2, #67	; 0x43
 80051fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80051fe:	4b03      	ldr	r3, [pc, #12]	; (800520c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005200:	4618      	mov	r0, r3
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr
 800520c:	20000094 	.word	0x20000094

08005210 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2243      	movs	r2, #67	; 0x43
 800521c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800521e:	4b03      	ldr	r3, [pc, #12]	; (800522c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005220:	4618      	mov	r0, r3
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	20000050 	.word	0x20000050

08005230 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2243      	movs	r2, #67	; 0x43
 800523c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800523e:	4b03      	ldr	r3, [pc, #12]	; (800524c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	200000d8 	.word	0x200000d8

08005250 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	220a      	movs	r2, #10
 800525c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800525e:	4b03      	ldr	r3, [pc, #12]	; (800526c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	2000000c 	.word	0x2000000c

08005270 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d101      	bne.n	8005284 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005280:	2303      	movs	r3, #3
 8005282:	e004      	b.n	800528e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	370c      	adds	r7, #12
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800529a:	b480      	push	{r7}
 800529c:	b087      	sub	sp, #28
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052ac:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d101      	bne.n	80052b8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e008      	b.n	80052ca <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	371c      	adds	r7, #28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e004      	b.n	80052fc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005316:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005322:	2303      	movs	r3, #3
 8005324:	e016      	b.n	8005354 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	7c1b      	ldrb	r3, [r3, #16]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d109      	bne.n	8005342 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005338:	2101      	movs	r1, #1
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f001 fe40 	bl	8006fc0 <USBD_LL_PrepareReceive>
 8005340:	e007      	b.n	8005352 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005348:	2340      	movs	r3, #64	; 0x40
 800534a:	2101      	movs	r1, #1
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f001 fe37 	bl	8006fc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	4613      	mov	r3, r2
 8005368:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005370:	2303      	movs	r3, #3
 8005372:	e01f      	b.n	80053b4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	79fa      	ldrb	r2, [r7, #7]
 80053a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f001 fcaf 	bl	8006d0c <USBD_LL_Init>
 80053ae:	4603      	mov	r3, r0
 80053b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e016      	b.n	8005402 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	683a      	ldr	r2, [r7, #0]
 80053d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053f0:	f107 020e 	add.w	r2, r7, #14
 80053f4:	4610      	mov	r0, r2
 80053f6:	4798      	blx	r3
 80053f8:	4602      	mov	r2, r0
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f001 fcca 	bl	8006dac <USBD_LL_Start>
 8005418:	4603      	mov	r3, r0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}

08005422 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800542a:	2300      	movs	r3, #0
}
 800542c:	4618      	mov	r0, r3
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b084      	sub	sp, #16
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	460b      	mov	r3, r1
 8005442:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005444:	2303      	movs	r3, #3
 8005446:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544e:	2b00      	cmp	r3, #0
 8005450:	d009      	beq.n	8005466 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	78fa      	ldrb	r2, [r7, #3]
 800545c:	4611      	mov	r1, r2
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	4798      	blx	r3
 8005462:	4603      	mov	r3, r0
 8005464:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005466:	7bfb      	ldrb	r3, [r7, #15]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	460b      	mov	r3, r1
 800547a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d007      	beq.n	8005496 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	78fa      	ldrb	r2, [r7, #3]
 8005490:	4611      	mov	r1, r2
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	4798      	blx	r3
  }

  return USBD_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b084      	sub	sp, #16
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054b0:	6839      	ldr	r1, [r7, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 ffba 	bl	800642c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80054c6:	461a      	mov	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80054d4:	f003 031f 	and.w	r3, r3, #31
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d01a      	beq.n	8005512 <USBD_LL_SetupStage+0x72>
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d822      	bhi.n	8005526 <USBD_LL_SetupStage+0x86>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <USBD_LL_SetupStage+0x4a>
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d00a      	beq.n	80054fe <USBD_LL_SetupStage+0x5e>
 80054e8:	e01d      	b.n	8005526 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054f0:	4619      	mov	r1, r3
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fa62 	bl	80059bc <USBD_StdDevReq>
 80054f8:	4603      	mov	r3, r0
 80054fa:	73fb      	strb	r3, [r7, #15]
      break;
 80054fc:	e020      	b.n	8005540 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fac6 	bl	8005a98 <USBD_StdItfReq>
 800550c:	4603      	mov	r3, r0
 800550e:	73fb      	strb	r3, [r7, #15]
      break;
 8005510:	e016      	b.n	8005540 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005518:	4619      	mov	r1, r3
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fb05 	bl	8005b2a <USBD_StdEPReq>
 8005520:	4603      	mov	r3, r0
 8005522:	73fb      	strb	r3, [r7, #15]
      break;
 8005524:	e00c      	b.n	8005540 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800552c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005530:	b2db      	uxtb	r3, r3
 8005532:	4619      	mov	r1, r3
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f001 fc99 	bl	8006e6c <USBD_LL_StallEP>
 800553a:	4603      	mov	r3, r0
 800553c:	73fb      	strb	r3, [r7, #15]
      break;
 800553e:	bf00      	nop
  }

  return ret;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b086      	sub	sp, #24
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	460b      	mov	r3, r1
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005558:	7afb      	ldrb	r3, [r7, #11]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d138      	bne.n	80055d0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005564:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800556c:	2b03      	cmp	r3, #3
 800556e:	d14a      	bne.n	8005606 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	689a      	ldr	r2, [r3, #8]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	429a      	cmp	r2, r3
 800557a:	d913      	bls.n	80055a4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	1ad2      	subs	r2, r2, r3
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	4293      	cmp	r3, r2
 8005594:	bf28      	it	cs
 8005596:	4613      	movcs	r3, r2
 8005598:	461a      	mov	r2, r3
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f001 f839 	bl	8006614 <USBD_CtlContinueRx>
 80055a2:	e030      	b.n	8005606 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d10b      	bne.n	80055c8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f001 f834 	bl	8006636 <USBD_CtlSendStatus>
 80055ce:	e01a      	b.n	8005606 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b03      	cmp	r3, #3
 80055da:	d114      	bne.n	8005606 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00e      	beq.n	8005606 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	7afa      	ldrb	r2, [r7, #11]
 80055f2:	4611      	mov	r1, r2
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	4798      	blx	r3
 80055f8:	4603      	mov	r3, r0
 80055fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80055fc:	7dfb      	ldrb	r3, [r7, #23]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005602:	7dfb      	ldrb	r3, [r7, #23]
 8005604:	e000      	b.n	8005608 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b086      	sub	sp, #24
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	460b      	mov	r3, r1
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800561e:	7afb      	ldrb	r3, [r7, #11]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d16b      	bne.n	80056fc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	3314      	adds	r3, #20
 8005628:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005630:	2b02      	cmp	r3, #2
 8005632:	d156      	bne.n	80056e2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	429a      	cmp	r2, r3
 800563e:	d914      	bls.n	800566a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	1ad2      	subs	r2, r2, r3
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	461a      	mov	r2, r3
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 ffae 	bl	80065b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800565c:	2300      	movs	r3, #0
 800565e:	2200      	movs	r2, #0
 8005660:	2100      	movs	r1, #0
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f001 fcac 	bl	8006fc0 <USBD_LL_PrepareReceive>
 8005668:	e03b      	b.n	80056e2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	68da      	ldr	r2, [r3, #12]
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	429a      	cmp	r2, r3
 8005674:	d11c      	bne.n	80056b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800567e:	429a      	cmp	r2, r3
 8005680:	d316      	bcc.n	80056b0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800568c:	429a      	cmp	r2, r3
 800568e:	d20f      	bcs.n	80056b0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005690:	2200      	movs	r2, #0
 8005692:	2100      	movs	r1, #0
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f000 ff8f 	bl	80065b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80056a2:	2300      	movs	r3, #0
 80056a4:	2200      	movs	r2, #0
 80056a6:	2100      	movs	r1, #0
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f001 fc89 	bl	8006fc0 <USBD_LL_PrepareReceive>
 80056ae:	e018      	b.n	80056e2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d10b      	bne.n	80056d4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80056d4:	2180      	movs	r1, #128	; 0x80
 80056d6:	68f8      	ldr	r0, [r7, #12]
 80056d8:	f001 fbc8 	bl	8006e6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 ffbd 	bl	800665c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d122      	bne.n	8005732 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80056ec:	68f8      	ldr	r0, [r7, #12]
 80056ee:	f7ff fe98 	bl	8005422 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80056fa:	e01a      	b.n	8005732 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b03      	cmp	r3, #3
 8005706:	d114      	bne.n	8005732 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800570e:	695b      	ldr	r3, [r3, #20]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00e      	beq.n	8005732 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	7afa      	ldrb	r2, [r7, #11]
 800571e:	4611      	mov	r1, r2
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	4798      	blx	r3
 8005724:	4603      	mov	r3, r0
 8005726:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005728:	7dfb      	ldrb	r3, [r7, #23]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	e000      	b.n	8005734 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800576c:	2303      	movs	r3, #3
 800576e:	e02f      	b.n	80057d0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00f      	beq.n	800579a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d009      	beq.n	800579a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	6852      	ldr	r2, [r2, #4]
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	4611      	mov	r1, r2
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800579a:	2340      	movs	r3, #64	; 0x40
 800579c:	2200      	movs	r2, #0
 800579e:	2100      	movs	r1, #0
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f001 fb1e 	bl	8006de2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2240      	movs	r2, #64	; 0x40
 80057b2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80057b6:	2340      	movs	r3, #64	; 0x40
 80057b8:	2200      	movs	r2, #0
 80057ba:	2180      	movs	r1, #128	; 0x80
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f001 fb10 	bl	8006de2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2240      	movs	r2, #64	; 0x40
 80057cc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3708      	adds	r7, #8
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	460b      	mov	r3, r1
 80057e2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	78fa      	ldrb	r2, [r7, #3]
 80057e8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005806:	b2da      	uxtb	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2204      	movs	r2, #4
 8005812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b04      	cmp	r3, #4
 8005836:	d106      	bne.n	8005846 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800583e:	b2da      	uxtb	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005866:	2303      	movs	r3, #3
 8005868:	e012      	b.n	8005890 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b03      	cmp	r3, #3
 8005874:	d10b      	bne.n	800588e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800587c:	69db      	ldr	r3, [r3, #28]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e014      	b.n	80058dc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d10d      	bne.n	80058da <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	78fa      	ldrb	r2, [r7, #3]
 80058d4:	4611      	mov	r1, r2
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e014      	b.n	8005928 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b03      	cmp	r3, #3
 8005908:	d10d      	bne.n	8005926 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800591c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591e:	78fa      	ldrb	r2, [r7, #3]
 8005920:	4611      	mov	r1, r2
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3708      	adds	r7, #8
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr

08005946 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b082      	sub	sp, #8
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800595c:	2b00      	cmp	r3, #0
 800595e:	d009      	beq.n	8005974 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6852      	ldr	r2, [r2, #4]
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	4611      	mov	r1, r2
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	4798      	blx	r3
  }

  return USBD_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800597e:	b480      	push	{r7}
 8005980:	b087      	sub	sp, #28
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	3301      	adds	r3, #1
 8005994:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800599c:	8a3b      	ldrh	r3, [r7, #16]
 800599e:	021b      	lsls	r3, r3, #8
 80059a0:	b21a      	sxth	r2, r3
 80059a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	b21b      	sxth	r3, r3
 80059aa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80059ac:	89fb      	ldrh	r3, [r7, #14]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	371c      	adds	r7, #28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
	...

080059bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059c6:	2300      	movs	r3, #0
 80059c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059d2:	2b40      	cmp	r3, #64	; 0x40
 80059d4:	d005      	beq.n	80059e2 <USBD_StdDevReq+0x26>
 80059d6:	2b40      	cmp	r3, #64	; 0x40
 80059d8:	d853      	bhi.n	8005a82 <USBD_StdDevReq+0xc6>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00b      	beq.n	80059f6 <USBD_StdDevReq+0x3a>
 80059de:	2b20      	cmp	r3, #32
 80059e0:	d14f      	bne.n	8005a82 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	4798      	blx	r3
 80059f0:	4603      	mov	r3, r0
 80059f2:	73fb      	strb	r3, [r7, #15]
      break;
 80059f4:	e04a      	b.n	8005a8c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	785b      	ldrb	r3, [r3, #1]
 80059fa:	2b09      	cmp	r3, #9
 80059fc:	d83b      	bhi.n	8005a76 <USBD_StdDevReq+0xba>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <USBD_StdDevReq+0x48>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a59 	.word	0x08005a59
 8005a08:	08005a6d 	.word	0x08005a6d
 8005a0c:	08005a77 	.word	0x08005a77
 8005a10:	08005a63 	.word	0x08005a63
 8005a14:	08005a77 	.word	0x08005a77
 8005a18:	08005a37 	.word	0x08005a37
 8005a1c:	08005a2d 	.word	0x08005a2d
 8005a20:	08005a77 	.word	0x08005a77
 8005a24:	08005a4f 	.word	0x08005a4f
 8005a28:	08005a41 	.word	0x08005a41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005a2c:	6839      	ldr	r1, [r7, #0]
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f9de 	bl	8005df0 <USBD_GetDescriptor>
          break;
 8005a34:	e024      	b.n	8005a80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fb6d 	bl	8006118 <USBD_SetAddress>
          break;
 8005a3e:	e01f      	b.n	8005a80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005a40:	6839      	ldr	r1, [r7, #0]
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fbac 	bl	80061a0 <USBD_SetConfig>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	73fb      	strb	r3, [r7, #15]
          break;
 8005a4c:	e018      	b.n	8005a80 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a4e:	6839      	ldr	r1, [r7, #0]
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fc4b 	bl	80062ec <USBD_GetConfig>
          break;
 8005a56:	e013      	b.n	8005a80 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a58:	6839      	ldr	r1, [r7, #0]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fc7c 	bl	8006358 <USBD_GetStatus>
          break;
 8005a60:	e00e      	b.n	8005a80 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a62:	6839      	ldr	r1, [r7, #0]
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 fcab 	bl	80063c0 <USBD_SetFeature>
          break;
 8005a6a:	e009      	b.n	8005a80 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a6c:	6839      	ldr	r1, [r7, #0]
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fcba 	bl	80063e8 <USBD_ClrFeature>
          break;
 8005a74:	e004      	b.n	8005a80 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fd11 	bl	80064a0 <USBD_CtlError>
          break;
 8005a7e:	bf00      	nop
      }
      break;
 8005a80:	e004      	b.n	8005a8c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005a82:	6839      	ldr	r1, [r7, #0]
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fd0b 	bl	80064a0 <USBD_CtlError>
      break;
 8005a8a:	bf00      	nop
  }

  return ret;
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop

08005a98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	781b      	ldrb	r3, [r3, #0]
 8005aaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005aae:	2b40      	cmp	r3, #64	; 0x40
 8005ab0:	d005      	beq.n	8005abe <USBD_StdItfReq+0x26>
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d82f      	bhi.n	8005b16 <USBD_StdItfReq+0x7e>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d001      	beq.n	8005abe <USBD_StdItfReq+0x26>
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d12b      	bne.n	8005b16 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d81d      	bhi.n	8005b08 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	889b      	ldrh	r3, [r3, #4]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d813      	bhi.n	8005afe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	88db      	ldrh	r3, [r3, #6]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d110      	bne.n	8005b12 <USBD_StdItfReq+0x7a>
 8005af0:	7bfb      	ldrb	r3, [r7, #15]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10d      	bne.n	8005b12 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fd9d 	bl	8006636 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005afc:	e009      	b.n	8005b12 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fccd 	bl	80064a0 <USBD_CtlError>
          break;
 8005b06:	e004      	b.n	8005b12 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005b08:	6839      	ldr	r1, [r7, #0]
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 fcc8 	bl	80064a0 <USBD_CtlError>
          break;
 8005b10:	e000      	b.n	8005b14 <USBD_StdItfReq+0x7c>
          break;
 8005b12:	bf00      	nop
      }
      break;
 8005b14:	e004      	b.n	8005b20 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fcc1 	bl	80064a0 <USBD_CtlError>
      break;
 8005b1e:	bf00      	nop
  }

  return ret;
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	889b      	ldrh	r3, [r3, #4]
 8005b3c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	d007      	beq.n	8005b5a <USBD_StdEPReq+0x30>
 8005b4a:	2b40      	cmp	r3, #64	; 0x40
 8005b4c:	f200 8145 	bhi.w	8005dda <USBD_StdEPReq+0x2b0>
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00c      	beq.n	8005b6e <USBD_StdEPReq+0x44>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	f040 8140 	bne.w	8005dda <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	4798      	blx	r3
 8005b68:	4603      	mov	r3, r0
 8005b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6c:	e13a      	b.n	8005de4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	785b      	ldrb	r3, [r3, #1]
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	d007      	beq.n	8005b86 <USBD_StdEPReq+0x5c>
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	f300 8129 	bgt.w	8005dce <USBD_StdEPReq+0x2a4>
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d07f      	beq.n	8005c80 <USBD_StdEPReq+0x156>
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d03c      	beq.n	8005bfe <USBD_StdEPReq+0xd4>
 8005b84:	e123      	b.n	8005dce <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d002      	beq.n	8005b98 <USBD_StdEPReq+0x6e>
 8005b92:	2b03      	cmp	r3, #3
 8005b94:	d016      	beq.n	8005bc4 <USBD_StdEPReq+0x9a>
 8005b96:	e02c      	b.n	8005bf2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b98:	7bbb      	ldrb	r3, [r7, #14]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00d      	beq.n	8005bba <USBD_StdEPReq+0x90>
 8005b9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ba0:	2b80      	cmp	r3, #128	; 0x80
 8005ba2:	d00a      	beq.n	8005bba <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ba4:	7bbb      	ldrb	r3, [r7, #14]
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f001 f95f 	bl	8006e6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bae:	2180      	movs	r1, #128	; 0x80
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f001 f95b 	bl	8006e6c <USBD_LL_StallEP>
 8005bb6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005bb8:	e020      	b.n	8005bfc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005bba:	6839      	ldr	r1, [r7, #0]
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 fc6f 	bl	80064a0 <USBD_CtlError>
              break;
 8005bc2:	e01b      	b.n	8005bfc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	885b      	ldrh	r3, [r3, #2]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10e      	bne.n	8005bea <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005bcc:	7bbb      	ldrb	r3, [r7, #14]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00b      	beq.n	8005bea <USBD_StdEPReq+0xc0>
 8005bd2:	7bbb      	ldrb	r3, [r7, #14]
 8005bd4:	2b80      	cmp	r3, #128	; 0x80
 8005bd6:	d008      	beq.n	8005bea <USBD_StdEPReq+0xc0>
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	88db      	ldrh	r3, [r3, #6]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d104      	bne.n	8005bea <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005be0:	7bbb      	ldrb	r3, [r7, #14]
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f001 f941 	bl	8006e6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fd23 	bl	8006636 <USBD_CtlSendStatus>

              break;
 8005bf0:	e004      	b.n	8005bfc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fc53 	bl	80064a0 <USBD_CtlError>
              break;
 8005bfa:	bf00      	nop
          }
          break;
 8005bfc:	e0ec      	b.n	8005dd8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d002      	beq.n	8005c10 <USBD_StdEPReq+0xe6>
 8005c0a:	2b03      	cmp	r3, #3
 8005c0c:	d016      	beq.n	8005c3c <USBD_StdEPReq+0x112>
 8005c0e:	e030      	b.n	8005c72 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c10:	7bbb      	ldrb	r3, [r7, #14]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00d      	beq.n	8005c32 <USBD_StdEPReq+0x108>
 8005c16:	7bbb      	ldrb	r3, [r7, #14]
 8005c18:	2b80      	cmp	r3, #128	; 0x80
 8005c1a:	d00a      	beq.n	8005c32 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c1c:	7bbb      	ldrb	r3, [r7, #14]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 f923 	bl	8006e6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c26:	2180      	movs	r1, #128	; 0x80
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f001 f91f 	bl	8006e6c <USBD_LL_StallEP>
 8005c2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c30:	e025      	b.n	8005c7e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005c32:	6839      	ldr	r1, [r7, #0]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fc33 	bl	80064a0 <USBD_CtlError>
              break;
 8005c3a:	e020      	b.n	8005c7e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	885b      	ldrh	r3, [r3, #2]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d11b      	bne.n	8005c7c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c44:	7bbb      	ldrb	r3, [r7, #14]
 8005c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d004      	beq.n	8005c58 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c4e:	7bbb      	ldrb	r3, [r7, #14]
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f001 f929 	bl	8006eaa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fcec 	bl	8006636 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c64:	689b      	ldr	r3, [r3, #8]
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	4798      	blx	r3
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005c70:	e004      	b.n	8005c7c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fc13 	bl	80064a0 <USBD_CtlError>
              break;
 8005c7a:	e000      	b.n	8005c7e <USBD_StdEPReq+0x154>
              break;
 8005c7c:	bf00      	nop
          }
          break;
 8005c7e:	e0ab      	b.n	8005dd8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d002      	beq.n	8005c92 <USBD_StdEPReq+0x168>
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d032      	beq.n	8005cf6 <USBD_StdEPReq+0x1cc>
 8005c90:	e097      	b.n	8005dc2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c92:	7bbb      	ldrb	r3, [r7, #14]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d007      	beq.n	8005ca8 <USBD_StdEPReq+0x17e>
 8005c98:	7bbb      	ldrb	r3, [r7, #14]
 8005c9a:	2b80      	cmp	r3, #128	; 0x80
 8005c9c:	d004      	beq.n	8005ca8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fbfd 	bl	80064a0 <USBD_CtlError>
                break;
 8005ca6:	e091      	b.n	8005dcc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	da0b      	bge.n	8005cc8 <USBD_StdEPReq+0x19e>
 8005cb0:	7bbb      	ldrb	r3, [r7, #14]
 8005cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	3310      	adds	r3, #16
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	e00b      	b.n	8005ce0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005cc8:	7bbb      	ldrb	r3, [r7, #14]
 8005cca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	3304      	adds	r3, #4
 8005ce0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2202      	movs	r2, #2
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fc47 	bl	8006582 <USBD_CtlSendData>
              break;
 8005cf4:	e06a      	b.n	8005dcc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005cf6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	da11      	bge.n	8005d22 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cfe:	7bbb      	ldrb	r3, [r7, #14]
 8005d00:	f003 020f 	and.w	r2, r3, #15
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	4613      	mov	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3324      	adds	r3, #36	; 0x24
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d117      	bne.n	8005d48 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 fbc0 	bl	80064a0 <USBD_CtlError>
                  break;
 8005d20:	e054      	b.n	8005dcc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d22:	7bbb      	ldrb	r3, [r7, #14]
 8005d24:	f003 020f 	and.w	r2, r3, #15
 8005d28:	6879      	ldr	r1, [r7, #4]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d38:	881b      	ldrh	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d104      	bne.n	8005d48 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fbad 	bl	80064a0 <USBD_CtlError>
                  break;
 8005d46:	e041      	b.n	8005dcc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	da0b      	bge.n	8005d68 <USBD_StdEPReq+0x23e>
 8005d50:	7bbb      	ldrb	r3, [r7, #14]
 8005d52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	3310      	adds	r3, #16
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	4413      	add	r3, r2
 8005d64:	3304      	adds	r3, #4
 8005d66:	e00b      	b.n	8005d80 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d68:	7bbb      	ldrb	r3, [r7, #14]
 8005d6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3304      	adds	r3, #4
 8005d80:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d82:	7bbb      	ldrb	r3, [r7, #14]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <USBD_StdEPReq+0x264>
 8005d88:	7bbb      	ldrb	r3, [r7, #14]
 8005d8a:	2b80      	cmp	r3, #128	; 0x80
 8005d8c:	d103      	bne.n	8005d96 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	e00e      	b.n	8005db4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005d96:	7bbb      	ldrb	r3, [r7, #14]
 8005d98:	4619      	mov	r1, r3
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 f8a4 	bl	8006ee8 <USBD_LL_IsStallEP>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2201      	movs	r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e002      	b.n	8005db4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2200      	movs	r2, #0
 8005db2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2202      	movs	r2, #2
 8005db8:	4619      	mov	r1, r3
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fbe1 	bl	8006582 <USBD_CtlSendData>
              break;
 8005dc0:	e004      	b.n	8005dcc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fb6b 	bl	80064a0 <USBD_CtlError>
              break;
 8005dca:	bf00      	nop
          }
          break;
 8005dcc:	e004      	b.n	8005dd8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005dce:	6839      	ldr	r1, [r7, #0]
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 fb65 	bl	80064a0 <USBD_CtlError>
          break;
 8005dd6:	bf00      	nop
      }
      break;
 8005dd8:	e004      	b.n	8005de4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fb5f 	bl	80064a0 <USBD_CtlError>
      break;
 8005de2:	bf00      	nop
  }

  return ret;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	885b      	ldrh	r3, [r3, #2]
 8005e0a:	0a1b      	lsrs	r3, r3, #8
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	2b0e      	cmp	r3, #14
 8005e12:	f200 8152 	bhi.w	80060ba <USBD_GetDescriptor+0x2ca>
 8005e16:	a201      	add	r2, pc, #4	; (adr r2, 8005e1c <USBD_GetDescriptor+0x2c>)
 8005e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e1c:	08005e8d 	.word	0x08005e8d
 8005e20:	08005ea5 	.word	0x08005ea5
 8005e24:	08005ee5 	.word	0x08005ee5
 8005e28:	080060bb 	.word	0x080060bb
 8005e2c:	080060bb 	.word	0x080060bb
 8005e30:	0800605b 	.word	0x0800605b
 8005e34:	08006087 	.word	0x08006087
 8005e38:	080060bb 	.word	0x080060bb
 8005e3c:	080060bb 	.word	0x080060bb
 8005e40:	080060bb 	.word	0x080060bb
 8005e44:	080060bb 	.word	0x080060bb
 8005e48:	080060bb 	.word	0x080060bb
 8005e4c:	080060bb 	.word	0x080060bb
 8005e50:	080060bb 	.word	0x080060bb
 8005e54:	08005e59 	.word	0x08005e59
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e5e:	69db      	ldr	r3, [r3, #28]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00b      	beq.n	8005e7c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	7c12      	ldrb	r2, [r2, #16]
 8005e70:	f107 0108 	add.w	r1, r7, #8
 8005e74:	4610      	mov	r0, r2
 8005e76:	4798      	blx	r3
 8005e78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e7a:	e126      	b.n	80060ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005e7c:	6839      	ldr	r1, [r7, #0]
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 fb0e 	bl	80064a0 <USBD_CtlError>
        err++;
 8005e84:	7afb      	ldrb	r3, [r7, #11]
 8005e86:	3301      	adds	r3, #1
 8005e88:	72fb      	strb	r3, [r7, #11]
      break;
 8005e8a:	e11e      	b.n	80060ca <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	7c12      	ldrb	r2, [r2, #16]
 8005e98:	f107 0108 	add.w	r1, r7, #8
 8005e9c:	4610      	mov	r0, r2
 8005e9e:	4798      	blx	r3
 8005ea0:	60f8      	str	r0, [r7, #12]
      break;
 8005ea2:	e112      	b.n	80060ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	7c1b      	ldrb	r3, [r3, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10d      	bne.n	8005ec8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	f107 0208 	add.w	r2, r7, #8
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4798      	blx	r3
 8005ebc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	3301      	adds	r3, #1
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005ec6:	e100      	b.n	80060ca <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed0:	f107 0208 	add.w	r2, r7, #8
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	4798      	blx	r3
 8005ed8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3301      	adds	r3, #1
 8005ede:	2202      	movs	r2, #2
 8005ee0:	701a      	strb	r2, [r3, #0]
      break;
 8005ee2:	e0f2      	b.n	80060ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	885b      	ldrh	r3, [r3, #2]
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	f200 80ac 	bhi.w	8006048 <USBD_GetDescriptor+0x258>
 8005ef0:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <USBD_GetDescriptor+0x108>)
 8005ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef6:	bf00      	nop
 8005ef8:	08005f11 	.word	0x08005f11
 8005efc:	08005f45 	.word	0x08005f45
 8005f00:	08005f79 	.word	0x08005f79
 8005f04:	08005fad 	.word	0x08005fad
 8005f08:	08005fe1 	.word	0x08005fe1
 8005f0c:	08006015 	.word	0x08006015
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00b      	beq.n	8005f34 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	7c12      	ldrb	r2, [r2, #16]
 8005f28:	f107 0108 	add.w	r1, r7, #8
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	4798      	blx	r3
 8005f30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f32:	e091      	b.n	8006058 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005f34:	6839      	ldr	r1, [r7, #0]
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fab2 	bl	80064a0 <USBD_CtlError>
            err++;
 8005f3c:	7afb      	ldrb	r3, [r7, #11]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	72fb      	strb	r3, [r7, #11]
          break;
 8005f42:	e089      	b.n	8006058 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00b      	beq.n	8005f68 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	7c12      	ldrb	r2, [r2, #16]
 8005f5c:	f107 0108 	add.w	r1, r7, #8
 8005f60:	4610      	mov	r0, r2
 8005f62:	4798      	blx	r3
 8005f64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f66:	e077      	b.n	8006058 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005f68:	6839      	ldr	r1, [r7, #0]
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f000 fa98 	bl	80064a0 <USBD_CtlError>
            err++;
 8005f70:	7afb      	ldrb	r3, [r7, #11]
 8005f72:	3301      	adds	r3, #1
 8005f74:	72fb      	strb	r3, [r7, #11]
          break;
 8005f76:	e06f      	b.n	8006058 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00b      	beq.n	8005f9c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	7c12      	ldrb	r2, [r2, #16]
 8005f90:	f107 0108 	add.w	r1, r7, #8
 8005f94:	4610      	mov	r0, r2
 8005f96:	4798      	blx	r3
 8005f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f9a:	e05d      	b.n	8006058 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fa7e 	bl	80064a0 <USBD_CtlError>
            err++;
 8005fa4:	7afb      	ldrb	r3, [r7, #11]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8005faa:	e055      	b.n	8006058 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00b      	beq.n	8005fd0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	7c12      	ldrb	r2, [r2, #16]
 8005fc4:	f107 0108 	add.w	r1, r7, #8
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4798      	blx	r3
 8005fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fce:	e043      	b.n	8006058 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005fd0:	6839      	ldr	r1, [r7, #0]
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 fa64 	bl	80064a0 <USBD_CtlError>
            err++;
 8005fd8:	7afb      	ldrb	r3, [r7, #11]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8005fde:	e03b      	b.n	8006058 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00b      	beq.n	8006004 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	7c12      	ldrb	r2, [r2, #16]
 8005ff8:	f107 0108 	add.w	r1, r7, #8
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4798      	blx	r3
 8006000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006002:	e029      	b.n	8006058 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa4a 	bl	80064a0 <USBD_CtlError>
            err++;
 800600c:	7afb      	ldrb	r3, [r7, #11]
 800600e:	3301      	adds	r3, #1
 8006010:	72fb      	strb	r3, [r7, #11]
          break;
 8006012:	e021      	b.n	8006058 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00b      	beq.n	8006038 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	7c12      	ldrb	r2, [r2, #16]
 800602c:	f107 0108 	add.w	r1, r7, #8
 8006030:	4610      	mov	r0, r2
 8006032:	4798      	blx	r3
 8006034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006036:	e00f      	b.n	8006058 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fa30 	bl	80064a0 <USBD_CtlError>
            err++;
 8006040:	7afb      	ldrb	r3, [r7, #11]
 8006042:	3301      	adds	r3, #1
 8006044:	72fb      	strb	r3, [r7, #11]
          break;
 8006046:	e007      	b.n	8006058 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006048:	6839      	ldr	r1, [r7, #0]
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa28 	bl	80064a0 <USBD_CtlError>
          err++;
 8006050:	7afb      	ldrb	r3, [r7, #11]
 8006052:	3301      	adds	r3, #1
 8006054:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006056:	bf00      	nop
      }
      break;
 8006058:	e037      	b.n	80060ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	7c1b      	ldrb	r3, [r3, #16]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d109      	bne.n	8006076 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606a:	f107 0208 	add.w	r2, r7, #8
 800606e:	4610      	mov	r0, r2
 8006070:	4798      	blx	r3
 8006072:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006074:	e029      	b.n	80060ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fa11 	bl	80064a0 <USBD_CtlError>
        err++;
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	3301      	adds	r3, #1
 8006082:	72fb      	strb	r3, [r7, #11]
      break;
 8006084:	e021      	b.n	80060ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	7c1b      	ldrb	r3, [r3, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10d      	bne.n	80060aa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006096:	f107 0208 	add.w	r2, r7, #8
 800609a:	4610      	mov	r0, r2
 800609c:	4798      	blx	r3
 800609e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3301      	adds	r3, #1
 80060a4:	2207      	movs	r2, #7
 80060a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80060a8:	e00f      	b.n	80060ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f9f7 	bl	80064a0 <USBD_CtlError>
        err++;
 80060b2:	7afb      	ldrb	r3, [r7, #11]
 80060b4:	3301      	adds	r3, #1
 80060b6:	72fb      	strb	r3, [r7, #11]
      break;
 80060b8:	e007      	b.n	80060ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f9ef 	bl	80064a0 <USBD_CtlError>
      err++;
 80060c2:	7afb      	ldrb	r3, [r7, #11]
 80060c4:	3301      	adds	r3, #1
 80060c6:	72fb      	strb	r3, [r7, #11]
      break;
 80060c8:	bf00      	nop
  }

  if (err != 0U)
 80060ca:	7afb      	ldrb	r3, [r7, #11]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d11e      	bne.n	800610e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	88db      	ldrh	r3, [r3, #6]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d016      	beq.n	8006106 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80060d8:	893b      	ldrh	r3, [r7, #8]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00e      	beq.n	80060fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	88da      	ldrh	r2, [r3, #6]
 80060e2:	893b      	ldrh	r3, [r7, #8]
 80060e4:	4293      	cmp	r3, r2
 80060e6:	bf28      	it	cs
 80060e8:	4613      	movcs	r3, r2
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80060ee:	893b      	ldrh	r3, [r7, #8]
 80060f0:	461a      	mov	r2, r3
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 fa44 	bl	8006582 <USBD_CtlSendData>
 80060fa:	e009      	b.n	8006110 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f9ce 	bl	80064a0 <USBD_CtlError>
 8006104:	e004      	b.n	8006110 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fa95 	bl	8006636 <USBD_CtlSendStatus>
 800610c:	e000      	b.n	8006110 <USBD_GetDescriptor+0x320>
    return;
 800610e:	bf00      	nop
  }
}
 8006110:	3710      	adds	r7, #16
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop

08006118 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	889b      	ldrh	r3, [r3, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d131      	bne.n	800618e <USBD_SetAddress+0x76>
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	88db      	ldrh	r3, [r3, #6]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d12d      	bne.n	800618e <USBD_SetAddress+0x76>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	885b      	ldrh	r3, [r3, #2]
 8006136:	2b7f      	cmp	r3, #127	; 0x7f
 8006138:	d829      	bhi.n	800618e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	885b      	ldrh	r3, [r3, #2]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006144:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b03      	cmp	r3, #3
 8006150:	d104      	bne.n	800615c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006152:	6839      	ldr	r1, [r7, #0]
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f9a3 	bl	80064a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800615a:	e01d      	b.n	8006198 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	7bfa      	ldrb	r2, [r7, #15]
 8006160:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fee9 	bl	8006f40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fa61 	bl	8006636 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006174:	7bfb      	ldrb	r3, [r7, #15]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d004      	beq.n	8006184 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2202      	movs	r2, #2
 800617e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006182:	e009      	b.n	8006198 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800618c:	e004      	b.n	8006198 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800618e:	6839      	ldr	r1, [r7, #0]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f985 	bl	80064a0 <USBD_CtlError>
  }
}
 8006196:	bf00      	nop
 8006198:	bf00      	nop
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	885b      	ldrh	r3, [r3, #2]
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	4b4c      	ldr	r3, [pc, #304]	; (80062e8 <USBD_SetConfig+0x148>)
 80061b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80061b8:	4b4b      	ldr	r3, [pc, #300]	; (80062e8 <USBD_SetConfig+0x148>)
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d905      	bls.n	80061cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f96c 	bl	80064a0 <USBD_CtlError>
    return USBD_FAIL;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e088      	b.n	80062de <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d002      	beq.n	80061de <USBD_SetConfig+0x3e>
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d025      	beq.n	8006228 <USBD_SetConfig+0x88>
 80061dc:	e071      	b.n	80062c2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80061de:	4b42      	ldr	r3, [pc, #264]	; (80062e8 <USBD_SetConfig+0x148>)
 80061e0:	781b      	ldrb	r3, [r3, #0]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d01c      	beq.n	8006220 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80061e6:	4b40      	ldr	r3, [pc, #256]	; (80062e8 <USBD_SetConfig+0x148>)
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80061f0:	4b3d      	ldr	r3, [pc, #244]	; (80062e8 <USBD_SetConfig+0x148>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	4619      	mov	r1, r3
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7ff f91e 	bl	8005438 <USBD_SetClassConfig>
 80061fc:	4603      	mov	r3, r0
 80061fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d004      	beq.n	8006210 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006206:	6839      	ldr	r1, [r7, #0]
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f949 	bl	80064a0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800620e:	e065      	b.n	80062dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f000 fa10 	bl	8006636 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2203      	movs	r2, #3
 800621a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800621e:	e05d      	b.n	80062dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 fa08 	bl	8006636 <USBD_CtlSendStatus>
      break;
 8006226:	e059      	b.n	80062dc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006228:	4b2f      	ldr	r3, [pc, #188]	; (80062e8 <USBD_SetConfig+0x148>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d112      	bne.n	8006256 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2202      	movs	r2, #2
 8006234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006238:	4b2b      	ldr	r3, [pc, #172]	; (80062e8 <USBD_SetConfig+0x148>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	461a      	mov	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006242:	4b29      	ldr	r3, [pc, #164]	; (80062e8 <USBD_SetConfig+0x148>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f7ff f911 	bl	8005470 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f9f1 	bl	8006636 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006254:	e042      	b.n	80062dc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006256:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <USBD_SetConfig+0x148>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	461a      	mov	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	429a      	cmp	r2, r3
 8006262:	d02a      	beq.n	80062ba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	b2db      	uxtb	r3, r3
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff f8ff 	bl	8005470 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006272:	4b1d      	ldr	r3, [pc, #116]	; (80062e8 <USBD_SetConfig+0x148>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800627c:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <USBD_SetConfig+0x148>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	4619      	mov	r1, r3
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff f8d8 	bl	8005438 <USBD_SetClassConfig>
 8006288:	4603      	mov	r3, r0
 800628a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00f      	beq.n	80062b2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 f903 	bl	80064a0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	4619      	mov	r1, r3
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f7ff f8e4 	bl	8005470 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80062b0:	e014      	b.n	80062dc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f9bf 	bl	8006636 <USBD_CtlSendStatus>
      break;
 80062b8:	e010      	b.n	80062dc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f9bb 	bl	8006636 <USBD_CtlSendStatus>
      break;
 80062c0:	e00c      	b.n	80062dc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	f000 f8eb 	bl	80064a0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80062ca:	4b07      	ldr	r3, [pc, #28]	; (80062e8 <USBD_SetConfig+0x148>)
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff f8cd 	bl	8005470 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80062d6:	2303      	movs	r3, #3
 80062d8:	73fb      	strb	r3, [r7, #15]
      break;
 80062da:	bf00      	nop
  }

  return ret;
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	200001ac 	.word	0x200001ac

080062ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	88db      	ldrh	r3, [r3, #6]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d004      	beq.n	8006308 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80062fe:	6839      	ldr	r1, [r7, #0]
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f8cd 	bl	80064a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006306:	e023      	b.n	8006350 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b02      	cmp	r3, #2
 8006312:	dc02      	bgt.n	800631a <USBD_GetConfig+0x2e>
 8006314:	2b00      	cmp	r3, #0
 8006316:	dc03      	bgt.n	8006320 <USBD_GetConfig+0x34>
 8006318:	e015      	b.n	8006346 <USBD_GetConfig+0x5a>
 800631a:	2b03      	cmp	r3, #3
 800631c:	d00b      	beq.n	8006336 <USBD_GetConfig+0x4a>
 800631e:	e012      	b.n	8006346 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	3308      	adds	r3, #8
 800632a:	2201      	movs	r2, #1
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f927 	bl	8006582 <USBD_CtlSendData>
        break;
 8006334:	e00c      	b.n	8006350 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3304      	adds	r3, #4
 800633a:	2201      	movs	r2, #1
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f91f 	bl	8006582 <USBD_CtlSendData>
        break;
 8006344:	e004      	b.n	8006350 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006346:	6839      	ldr	r1, [r7, #0]
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f8a9 	bl	80064a0 <USBD_CtlError>
        break;
 800634e:	bf00      	nop
}
 8006350:	bf00      	nop
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006368:	b2db      	uxtb	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	2b02      	cmp	r3, #2
 800636e:	d81e      	bhi.n	80063ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	88db      	ldrh	r3, [r3, #6]
 8006374:	2b02      	cmp	r3, #2
 8006376:	d004      	beq.n	8006382 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006378:	6839      	ldr	r1, [r7, #0]
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f890 	bl	80064a0 <USBD_CtlError>
        break;
 8006380:	e01a      	b.n	80063b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800638e:	2b00      	cmp	r3, #0
 8006390:	d005      	beq.n	800639e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	f043 0202 	orr.w	r2, r3, #2
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	330c      	adds	r3, #12
 80063a2:	2202      	movs	r2, #2
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f8eb 	bl	8006582 <USBD_CtlSendData>
      break;
 80063ac:	e004      	b.n	80063b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f875 	bl	80064a0 <USBD_CtlError>
      break;
 80063b6:	bf00      	nop
  }
}
 80063b8:	bf00      	nop
 80063ba:	3708      	adds	r7, #8
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	885b      	ldrh	r3, [r3, #2]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d106      	bne.n	80063e0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f92b 	bl	8006636 <USBD_CtlSendStatus>
  }
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	3b01      	subs	r3, #1
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d80b      	bhi.n	8006418 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	885b      	ldrh	r3, [r3, #2]
 8006404:	2b01      	cmp	r3, #1
 8006406:	d10c      	bne.n	8006422 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f910 	bl	8006636 <USBD_CtlSendStatus>
      }
      break;
 8006416:	e004      	b.n	8006422 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006418:	6839      	ldr	r1, [r7, #0]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f840 	bl	80064a0 <USBD_CtlError>
      break;
 8006420:	e000      	b.n	8006424 <USBD_ClrFeature+0x3c>
      break;
 8006422:	bf00      	nop
  }
}
 8006424:	bf00      	nop
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	781a      	ldrb	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	3301      	adds	r3, #1
 8006446:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	781a      	ldrb	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	3301      	adds	r3, #1
 8006454:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f7ff fa91 	bl	800597e <SWAPBYTE>
 800645c:	4603      	mov	r3, r0
 800645e:	461a      	mov	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3301      	adds	r3, #1
 8006468:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3301      	adds	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f7ff fa84 	bl	800597e <SWAPBYTE>
 8006476:	4603      	mov	r3, r0
 8006478:	461a      	mov	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3301      	adds	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3301      	adds	r3, #1
 8006488:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f7ff fa77 	bl	800597e <SWAPBYTE>
 8006490:	4603      	mov	r3, r0
 8006492:	461a      	mov	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	80da      	strh	r2, [r3, #6]
}
 8006498:	bf00      	nop
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80064aa:	2180      	movs	r1, #128	; 0x80
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fcdd 	bl	8006e6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80064b2:	2100      	movs	r1, #0
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fcd9 	bl	8006e6c <USBD_LL_StallEP>
}
 80064ba:	bf00      	nop
 80064bc:	3708      	adds	r7, #8
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b086      	sub	sp, #24
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d036      	beq.n	8006546 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80064dc:	6938      	ldr	r0, [r7, #16]
 80064de:	f000 f836 	bl	800654e <USBD_GetLen>
 80064e2:	4603      	mov	r3, r0
 80064e4:	3301      	adds	r3, #1
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	4413      	add	r3, r2
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	7812      	ldrb	r2, [r2, #0]
 80064fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80064fc:	7dfb      	ldrb	r3, [r7, #23]
 80064fe:	3301      	adds	r3, #1
 8006500:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006502:	7dfb      	ldrb	r3, [r7, #23]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	4413      	add	r3, r2
 8006508:	2203      	movs	r2, #3
 800650a:	701a      	strb	r2, [r3, #0]
  idx++;
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	3301      	adds	r3, #1
 8006510:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006512:	e013      	b.n	800653c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006514:	7dfb      	ldrb	r3, [r7, #23]
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	4413      	add	r3, r2
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	7812      	ldrb	r2, [r2, #0]
 800651e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	3301      	adds	r3, #1
 8006524:	613b      	str	r3, [r7, #16]
    idx++;
 8006526:	7dfb      	ldrb	r3, [r7, #23]
 8006528:	3301      	adds	r3, #1
 800652a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800652c:	7dfb      	ldrb	r3, [r7, #23]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	4413      	add	r3, r2
 8006532:	2200      	movs	r2, #0
 8006534:	701a      	strb	r2, [r3, #0]
    idx++;
 8006536:	7dfb      	ldrb	r3, [r7, #23]
 8006538:	3301      	adds	r3, #1
 800653a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e7      	bne.n	8006514 <USBD_GetString+0x52>
 8006544:	e000      	b.n	8006548 <USBD_GetString+0x86>
    return;
 8006546:	bf00      	nop
  }
}
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800654e:	b480      	push	{r7}
 8006550:	b085      	sub	sp, #20
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800655e:	e005      	b.n	800656c <USBD_GetLen+0x1e>
  {
    len++;
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	3301      	adds	r3, #1
 8006564:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	3301      	adds	r3, #1
 800656a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1f5      	bne.n	8006560 <USBD_GetLen+0x12>
  }

  return len;
 8006574:	7bfb      	ldrb	r3, [r7, #15]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2202      	movs	r2, #2
 8006592:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	2100      	movs	r1, #0
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f000 fce8 	bl	8006f7e <USBD_LL_Transmit>

  return USBD_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	2100      	movs	r1, #0
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fcd7 	bl	8006f7e <USBD_LL_Transmit>

  return USBD_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	60b9      	str	r1, [r7, #8]
 80065e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2203      	movs	r2, #3
 80065ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	68ba      	ldr	r2, [r7, #8]
 8006602:	2100      	movs	r1, #0
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 fcdb 	bl	8006fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	2100      	movs	r1, #0
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fcca 	bl	8006fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b082      	sub	sp, #8
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2204      	movs	r2, #4
 8006642:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006646:	2300      	movs	r3, #0
 8006648:	2200      	movs	r2, #0
 800664a:	2100      	movs	r1, #0
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fc96 	bl	8006f7e <USBD_LL_Transmit>

  return USBD_OK;
 8006652:	2300      	movs	r3, #0
}
 8006654:	4618      	mov	r0, r3
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2205      	movs	r2, #5
 8006668:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800666c:	2300      	movs	r3, #0
 800666e:	2200      	movs	r2, #0
 8006670:	2100      	movs	r1, #0
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fca4 	bl	8006fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006688:	2200      	movs	r2, #0
 800668a:	4912      	ldr	r1, [pc, #72]	; (80066d4 <MX_USB_DEVICE_Init+0x50>)
 800668c:	4812      	ldr	r0, [pc, #72]	; (80066d8 <MX_USB_DEVICE_Init+0x54>)
 800668e:	f7fe fe65 	bl	800535c <USBD_Init>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d001      	beq.n	800669c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006698:	f7f9 ffd2 	bl	8000640 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800669c:	490f      	ldr	r1, [pc, #60]	; (80066dc <MX_USB_DEVICE_Init+0x58>)
 800669e:	480e      	ldr	r0, [pc, #56]	; (80066d8 <MX_USB_DEVICE_Init+0x54>)
 80066a0:	f7fe fe8c 	bl	80053bc <USBD_RegisterClass>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80066aa:	f7f9 ffc9 	bl	8000640 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80066ae:	490c      	ldr	r1, [pc, #48]	; (80066e0 <MX_USB_DEVICE_Init+0x5c>)
 80066b0:	4809      	ldr	r0, [pc, #36]	; (80066d8 <MX_USB_DEVICE_Init+0x54>)
 80066b2:	f7fe fddd 	bl	8005270 <USBD_CDC_RegisterInterface>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80066bc:	f7f9 ffc0 	bl	8000640 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80066c0:	4805      	ldr	r0, [pc, #20]	; (80066d8 <MX_USB_DEVICE_Init+0x54>)
 80066c2:	f7fe fea2 	bl	800540a <USBD_Start>
 80066c6:	4603      	mov	r3, r0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d001      	beq.n	80066d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80066cc:	f7f9 ffb8 	bl	8000640 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80066d0:	bf00      	nop
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20000130 	.word	0x20000130
 80066d8:	200004d0 	.word	0x200004d0
 80066dc:	20000018 	.word	0x20000018
 80066e0:	2000011c 	.word	0x2000011c

080066e4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80066e8:	2200      	movs	r2, #0
 80066ea:	4905      	ldr	r1, [pc, #20]	; (8006700 <CDC_Init_FS+0x1c>)
 80066ec:	4805      	ldr	r0, [pc, #20]	; (8006704 <CDC_Init_FS+0x20>)
 80066ee:	f7fe fdd4 	bl	800529a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80066f2:	4905      	ldr	r1, [pc, #20]	; (8006708 <CDC_Init_FS+0x24>)
 80066f4:	4803      	ldr	r0, [pc, #12]	; (8006704 <CDC_Init_FS+0x20>)
 80066f6:	f7fe fdee 	bl	80052d6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80066fa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	bd80      	pop	{r7, pc}
 8006700:	20000fa0 	.word	0x20000fa0
 8006704:	200004d0 	.word	0x200004d0
 8006708:	200007a0 	.word	0x200007a0

0800670c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006710:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006712:	4618      	mov	r0, r3
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	6039      	str	r1, [r7, #0]
 8006726:	71fb      	strb	r3, [r7, #7]
 8006728:	4613      	mov	r3, r2
 800672a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	2b23      	cmp	r3, #35	; 0x23
 8006730:	d84a      	bhi.n	80067c8 <CDC_Control_FS+0xac>
 8006732:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <CDC_Control_FS+0x1c>)
 8006734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006738:	080067c9 	.word	0x080067c9
 800673c:	080067c9 	.word	0x080067c9
 8006740:	080067c9 	.word	0x080067c9
 8006744:	080067c9 	.word	0x080067c9
 8006748:	080067c9 	.word	0x080067c9
 800674c:	080067c9 	.word	0x080067c9
 8006750:	080067c9 	.word	0x080067c9
 8006754:	080067c9 	.word	0x080067c9
 8006758:	080067c9 	.word	0x080067c9
 800675c:	080067c9 	.word	0x080067c9
 8006760:	080067c9 	.word	0x080067c9
 8006764:	080067c9 	.word	0x080067c9
 8006768:	080067c9 	.word	0x080067c9
 800676c:	080067c9 	.word	0x080067c9
 8006770:	080067c9 	.word	0x080067c9
 8006774:	080067c9 	.word	0x080067c9
 8006778:	080067c9 	.word	0x080067c9
 800677c:	080067c9 	.word	0x080067c9
 8006780:	080067c9 	.word	0x080067c9
 8006784:	080067c9 	.word	0x080067c9
 8006788:	080067c9 	.word	0x080067c9
 800678c:	080067c9 	.word	0x080067c9
 8006790:	080067c9 	.word	0x080067c9
 8006794:	080067c9 	.word	0x080067c9
 8006798:	080067c9 	.word	0x080067c9
 800679c:	080067c9 	.word	0x080067c9
 80067a0:	080067c9 	.word	0x080067c9
 80067a4:	080067c9 	.word	0x080067c9
 80067a8:	080067c9 	.word	0x080067c9
 80067ac:	080067c9 	.word	0x080067c9
 80067b0:	080067c9 	.word	0x080067c9
 80067b4:	080067c9 	.word	0x080067c9
 80067b8:	080067c9 	.word	0x080067c9
 80067bc:	080067c9 	.word	0x080067c9
 80067c0:	080067c9 	.word	0x080067c9
 80067c4:	080067c9 	.word	0x080067c9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80067c8:	bf00      	nop
  }

  return (USBD_OK);
 80067ca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	4805      	ldr	r0, [pc, #20]	; (80067fc <CDC_Receive_FS+0x24>)
 80067e6:	f7fe fd76 	bl	80052d6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80067ea:	4804      	ldr	r0, [pc, #16]	; (80067fc <CDC_Receive_FS+0x24>)
 80067ec:	f7fe fd8c 	bl	8005308 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80067f0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	200004d0 	.word	0x200004d0

08006800 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006812:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006816:	4618      	mov	r0, r3
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	4603      	mov	r3, r0
 800682c:	6039      	str	r1, [r7, #0]
 800682e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	2212      	movs	r2, #18
 8006834:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006836:	4b03      	ldr	r3, [pc, #12]	; (8006844 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	20000150 	.word	0x20000150

08006848 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	6039      	str	r1, [r7, #0]
 8006852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	2204      	movs	r2, #4
 8006858:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800685a:	4b03      	ldr	r3, [pc, #12]	; (8006868 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800685c:	4618      	mov	r0, r3
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr
 8006868:	20000170 	.word	0x20000170

0800686c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	4603      	mov	r3, r0
 8006874:	6039      	str	r1, [r7, #0]
 8006876:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006878:	79fb      	ldrb	r3, [r7, #7]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d105      	bne.n	800688a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	4907      	ldr	r1, [pc, #28]	; (80068a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8006882:	4808      	ldr	r0, [pc, #32]	; (80068a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006884:	f7ff fe1d 	bl	80064c2 <USBD_GetString>
 8006888:	e004      	b.n	8006894 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	4904      	ldr	r1, [pc, #16]	; (80068a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800688e:	4805      	ldr	r0, [pc, #20]	; (80068a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8006890:	f7ff fe17 	bl	80064c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006894:	4b02      	ldr	r3, [pc, #8]	; (80068a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	200017a0 	.word	0x200017a0
 80068a4:	080071bc 	.word	0x080071bc

080068a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	4603      	mov	r3, r0
 80068b0:	6039      	str	r1, [r7, #0]
 80068b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068b4:	683a      	ldr	r2, [r7, #0]
 80068b6:	4904      	ldr	r1, [pc, #16]	; (80068c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80068b8:	4804      	ldr	r0, [pc, #16]	; (80068cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80068ba:	f7ff fe02 	bl	80064c2 <USBD_GetString>
  return USBD_StrDesc;
 80068be:	4b02      	ldr	r3, [pc, #8]	; (80068c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	200017a0 	.word	0x200017a0
 80068cc:	080071d4 	.word	0x080071d4

080068d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	6039      	str	r1, [r7, #0]
 80068da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	221a      	movs	r2, #26
 80068e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80068e2:	f000 f855 	bl	8006990 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80068e6:	4b02      	ldr	r3, [pc, #8]	; (80068f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20000174 	.word	0x20000174

080068f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	6039      	str	r1, [r7, #0]
 80068fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d105      	bne.n	8006912 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	4907      	ldr	r1, [pc, #28]	; (8006928 <USBD_FS_ConfigStrDescriptor+0x34>)
 800690a:	4808      	ldr	r0, [pc, #32]	; (800692c <USBD_FS_ConfigStrDescriptor+0x38>)
 800690c:	f7ff fdd9 	bl	80064c2 <USBD_GetString>
 8006910:	e004      	b.n	800691c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	4904      	ldr	r1, [pc, #16]	; (8006928 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006916:	4805      	ldr	r0, [pc, #20]	; (800692c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006918:	f7ff fdd3 	bl	80064c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800691c:	4b02      	ldr	r3, [pc, #8]	; (8006928 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800691e:	4618      	mov	r0, r3
 8006920:	3708      	adds	r7, #8
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	200017a0 	.word	0x200017a0
 800692c:	080071e8 	.word	0x080071e8

08006930 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	4603      	mov	r3, r0
 8006938:	6039      	str	r1, [r7, #0]
 800693a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d105      	bne.n	800694e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006942:	683a      	ldr	r2, [r7, #0]
 8006944:	4907      	ldr	r1, [pc, #28]	; (8006964 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006946:	4808      	ldr	r0, [pc, #32]	; (8006968 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006948:	f7ff fdbb 	bl	80064c2 <USBD_GetString>
 800694c:	e004      	b.n	8006958 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	4904      	ldr	r1, [pc, #16]	; (8006964 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006952:	4805      	ldr	r0, [pc, #20]	; (8006968 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006954:	f7ff fdb5 	bl	80064c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006958:	4b02      	ldr	r3, [pc, #8]	; (8006964 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800695a:	4618      	mov	r0, r3
 800695c:	3708      	adds	r7, #8
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	200017a0 	.word	0x200017a0
 8006968:	080071f4 	.word	0x080071f4

0800696c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	4603      	mov	r3, r0
 8006974:	6039      	str	r1, [r7, #0]
 8006976:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	220c      	movs	r2, #12
 800697c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800697e:	4b03      	ldr	r3, [pc, #12]	; (800698c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	20000164 	.word	0x20000164

08006990 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006996:	4b0f      	ldr	r3, [pc, #60]	; (80069d4 <Get_SerialNum+0x44>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800699c:	4b0e      	ldr	r3, [pc, #56]	; (80069d8 <Get_SerialNum+0x48>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80069a2:	4b0e      	ldr	r3, [pc, #56]	; (80069dc <Get_SerialNum+0x4c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d009      	beq.n	80069ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80069b6:	2208      	movs	r2, #8
 80069b8:	4909      	ldr	r1, [pc, #36]	; (80069e0 <Get_SerialNum+0x50>)
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f814 	bl	80069e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80069c0:	2204      	movs	r2, #4
 80069c2:	4908      	ldr	r1, [pc, #32]	; (80069e4 <Get_SerialNum+0x54>)
 80069c4:	68b8      	ldr	r0, [r7, #8]
 80069c6:	f000 f80f 	bl	80069e8 <IntToUnicode>
  }
}
 80069ca:	bf00      	nop
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	1fff7a10 	.word	0x1fff7a10
 80069d8:	1fff7a14 	.word	0x1fff7a14
 80069dc:	1fff7a18 	.word	0x1fff7a18
 80069e0:	20000176 	.word	0x20000176
 80069e4:	20000186 	.word	0x20000186

080069e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80069fa:	2300      	movs	r3, #0
 80069fc:	75fb      	strb	r3, [r7, #23]
 80069fe:	e027      	b.n	8006a50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	0f1b      	lsrs	r3, r3, #28
 8006a04:	2b09      	cmp	r3, #9
 8006a06:	d80b      	bhi.n	8006a20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	0f1b      	lsrs	r3, r3, #28
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	4619      	mov	r1, r3
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	440b      	add	r3, r1
 8006a18:	3230      	adds	r2, #48	; 0x30
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	e00a      	b.n	8006a36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	0f1b      	lsrs	r3, r3, #28
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	7dfb      	ldrb	r3, [r7, #23]
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	440b      	add	r3, r1
 8006a30:	3237      	adds	r2, #55	; 0x37
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	3301      	adds	r3, #1
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	4413      	add	r3, r2
 8006a46:	2200      	movs	r2, #0
 8006a48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a4a:	7dfb      	ldrb	r3, [r7, #23]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	75fb      	strb	r3, [r7, #23]
 8006a50:	7dfa      	ldrb	r2, [r7, #23]
 8006a52:	79fb      	ldrb	r3, [r7, #7]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d3d3      	bcc.n	8006a00 <IntToUnicode+0x18>
  }
}
 8006a58:	bf00      	nop
 8006a5a:	bf00      	nop
 8006a5c:	371c      	adds	r7, #28
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
	...

08006a68 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b098      	sub	sp, #96	; 0x60
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]
 8006a78:	605a      	str	r2, [r3, #4]
 8006a7a:	609a      	str	r2, [r3, #8]
 8006a7c:	60da      	str	r2, [r3, #12]
 8006a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006a80:	f107 0310 	add.w	r3, r7, #16
 8006a84:	223c      	movs	r2, #60	; 0x3c
 8006a86:	2100      	movs	r1, #0
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f000 fb83 	bl	8007194 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a96:	d148      	bne.n	8006b2a <HAL_PCD_MspInit+0xc2>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8006a98:	2320      	movs	r3, #32
 8006a9a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006aa0:	f107 0310 	add.w	r3, r7, #16
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	f7fc f99d 	bl	8002de4 <HAL_RCCEx_PeriphCLKConfig>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8006ab0:	f7f9 fdc6 	bl	8000640 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	4b1e      	ldr	r3, [pc, #120]	; (8006b34 <HAL_PCD_MspInit+0xcc>)
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	4a1d      	ldr	r2, [pc, #116]	; (8006b34 <HAL_PCD_MspInit+0xcc>)
 8006abe:	f043 0301 	orr.w	r3, r3, #1
 8006ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ac4:	4b1b      	ldr	r3, [pc, #108]	; (8006b34 <HAL_PCD_MspInit+0xcc>)
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac8:	f003 0301 	and.w	r3, r3, #1
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006ad0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ad6:	2302      	movs	r3, #2
 8006ad8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ada:	2300      	movs	r3, #0
 8006adc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006ae2:	230a      	movs	r3, #10
 8006ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ae6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006aea:	4619      	mov	r1, r3
 8006aec:	4812      	ldr	r0, [pc, #72]	; (8006b38 <HAL_PCD_MspInit+0xd0>)
 8006aee:	f7fa fc63 	bl	80013b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006af2:	4b10      	ldr	r3, [pc, #64]	; (8006b34 <HAL_PCD_MspInit+0xcc>)
 8006af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006af6:	4a0f      	ldr	r2, [pc, #60]	; (8006b34 <HAL_PCD_MspInit+0xcc>)
 8006af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afc:	6353      	str	r3, [r2, #52]	; 0x34
 8006afe:	2300      	movs	r3, #0
 8006b00:	60bb      	str	r3, [r7, #8]
 8006b02:	4b0c      	ldr	r3, [pc, #48]	; (8006b34 <HAL_PCD_MspInit+0xcc>)
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	4a0b      	ldr	r2, [pc, #44]	; (8006b34 <HAL_PCD_MspInit+0xcc>)
 8006b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b0e:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <HAL_PCD_MspInit+0xcc>)
 8006b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b16:	60bb      	str	r3, [r7, #8]
 8006b18:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	2043      	movs	r0, #67	; 0x43
 8006b20:	f7fa fc13 	bl	800134a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006b24:	2043      	movs	r0, #67	; 0x43
 8006b26:	f7fa fc2c 	bl	8001382 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b2a:	bf00      	nop
 8006b2c:	3760      	adds	r7, #96	; 0x60
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	40023800 	.word	0x40023800
 8006b38:	40020000 	.word	0x40020000

08006b3c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b50:	4619      	mov	r1, r3
 8006b52:	4610      	mov	r0, r2
 8006b54:	f7fe fca4 	bl	80054a0 <USBD_LL_SetupStage>
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b082      	sub	sp, #8
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	460b      	mov	r3, r1
 8006b6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006b72:	78fa      	ldrb	r2, [r7, #3]
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	4613      	mov	r3, r2
 8006b78:	00db      	lsls	r3, r3, #3
 8006b7a:	1a9b      	subs	r3, r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	440b      	add	r3, r1
 8006b80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	78fb      	ldrb	r3, [r7, #3]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	f7fe fcde 	bl	800554a <USBD_LL_DataOutStage>
}
 8006b8e:	bf00      	nop
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
 8006b9e:	460b      	mov	r3, r1
 8006ba0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006ba8:	78fa      	ldrb	r2, [r7, #3]
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	4613      	mov	r3, r2
 8006bae:	00db      	lsls	r3, r3, #3
 8006bb0:	1a9b      	subs	r3, r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	440b      	add	r3, r1
 8006bb6:	3348      	adds	r3, #72	; 0x48
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	78fb      	ldrb	r3, [r7, #3]
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	f7fe fd27 	bl	8005610 <USBD_LL_DataInStage>
}
 8006bc2:	bf00      	nop
 8006bc4:	3708      	adds	r7, #8
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bca:	b580      	push	{r7, lr}
 8006bcc:	b082      	sub	sp, #8
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fe fe3b 	bl	8005854 <USBD_LL_SOF>
}
 8006bde:	bf00      	nop
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}

08006be6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006be6:	b580      	push	{r7, lr}
 8006be8:	b084      	sub	sp, #16
 8006bea:	af00      	add	r7, sp, #0
 8006bec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d001      	beq.n	8006bfe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006bfa:	f7f9 fd21 	bl	8000640 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c04:	7bfa      	ldrb	r2, [r7, #15]
 8006c06:	4611      	mov	r1, r2
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fe fde5 	bl	80057d8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c14:	4618      	mov	r0, r3
 8006c16:	f7fe fd91 	bl	800573c <USBD_LL_Reset>
}
 8006c1a:	bf00      	nop
 8006c1c:	3710      	adds	r7, #16
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
	...

08006c24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fe fde0 	bl	80057f8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	6812      	ldr	r2, [r2, #0]
 8006c46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c4a:	f043 0301 	orr.w	r3, r3, #1
 8006c4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a1b      	ldr	r3, [r3, #32]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d005      	beq.n	8006c64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c58:	4b04      	ldr	r3, [pc, #16]	; (8006c6c <HAL_PCD_SuspendCallback+0x48>)
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	4a03      	ldr	r2, [pc, #12]	; (8006c6c <HAL_PCD_SuspendCallback+0x48>)
 8006c5e:	f043 0306 	orr.w	r3, r3, #6
 8006c62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c64:	bf00      	nop
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	e000ed00 	.word	0xe000ed00

08006c70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7fe fdd0 	bl	8005824 <USBD_LL_Resume>
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c9e:	78fa      	ldrb	r2, [r7, #3]
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f7fe fe1e 	bl	80058e4 <USBD_LL_IsoOUTIncomplete>
}
 8006ca8:	bf00      	nop
 8006caa:	3708      	adds	r7, #8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	460b      	mov	r3, r1
 8006cba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cc2:	78fa      	ldrb	r2, [r7, #3]
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f7fe fde6 	bl	8005898 <USBD_LL_IsoINIncomplete>
}
 8006ccc:	bf00      	nop
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b082      	sub	sp, #8
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fe24 	bl	8005930 <USBD_LL_DevConnected>
}
 8006ce8:	bf00      	nop
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fe fe21 	bl	8005946 <USBD_LL_DevDisconnected>
}
 8006d04:	bf00      	nop
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d13f      	bne.n	8006d9c <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006d1c:	4a22      	ldr	r2, [pc, #136]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a20      	ldr	r2, [pc, #128]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006d2c:	4b1e      	ldr	r3, [pc, #120]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006d32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006d34:	4b1c      	ldr	r3, [pc, #112]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d36:	2206      	movs	r2, #6
 8006d38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006d3a:	4b1b      	ldr	r3, [pc, #108]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d3c:	2202      	movs	r2, #2
 8006d3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006d40:	4b19      	ldr	r3, [pc, #100]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d42:	2200      	movs	r2, #0
 8006d44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006d46:	4b18      	ldr	r3, [pc, #96]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d48:	2202      	movs	r2, #2
 8006d4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006d4c:	4b16      	ldr	r3, [pc, #88]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006d52:	4b15      	ldr	r3, [pc, #84]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006d58:	4b13      	ldr	r3, [pc, #76]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006d5e:	4b12      	ldr	r3, [pc, #72]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006d64:	4b10      	ldr	r3, [pc, #64]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006d6a:	4b0f      	ldr	r3, [pc, #60]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006d70:	480d      	ldr	r0, [pc, #52]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d72:	f7fa fc95 	bl	80016a0 <HAL_PCD_Init>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8006d7c:	f7f9 fc60 	bl	8000640 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006d80:	2180      	movs	r1, #128	; 0x80
 8006d82:	4809      	ldr	r0, [pc, #36]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d84:	f7fb fe27 	bl	80029d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006d88:	2240      	movs	r2, #64	; 0x40
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	4806      	ldr	r0, [pc, #24]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d8e:	f7fb fddb 	bl	8002948 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006d92:	2280      	movs	r2, #128	; 0x80
 8006d94:	2101      	movs	r1, #1
 8006d96:	4804      	ldr	r0, [pc, #16]	; (8006da8 <USBD_LL_Init+0x9c>)
 8006d98:	f7fb fdd6 	bl	8002948 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
 8006da6:	bf00      	nop
 8006da8:	200019a0 	.word	0x200019a0

08006dac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7fa fd90 	bl	80018e8 <HAL_PCD_Start>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 f990 	bl	80070f4 <USBD_Get_USB_Status>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	4608      	mov	r0, r1
 8006dec:	4611      	mov	r1, r2
 8006dee:	461a      	mov	r2, r3
 8006df0:	4603      	mov	r3, r0
 8006df2:	70fb      	strb	r3, [r7, #3]
 8006df4:	460b      	mov	r3, r1
 8006df6:	70bb      	strb	r3, [r7, #2]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006e0a:	78bb      	ldrb	r3, [r7, #2]
 8006e0c:	883a      	ldrh	r2, [r7, #0]
 8006e0e:	78f9      	ldrb	r1, [r7, #3]
 8006e10:	f7fb f9a1 	bl	8002156 <HAL_PCD_EP_Open>
 8006e14:	4603      	mov	r3, r0
 8006e16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 f96a 	bl	80070f4 <USBD_Get_USB_Status>
 8006e20:	4603      	mov	r3, r0
 8006e22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e24:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b084      	sub	sp, #16
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	460b      	mov	r3, r1
 8006e38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e48:	78fa      	ldrb	r2, [r7, #3]
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f7fb f9ea 	bl	8002226 <HAL_PCD_EP_Close>
 8006e52:	4603      	mov	r3, r0
 8006e54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 f94b 	bl	80070f4 <USBD_Get_USB_Status>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e62:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	460b      	mov	r3, r1
 8006e76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e86:	78fa      	ldrb	r2, [r7, #3]
 8006e88:	4611      	mov	r1, r2
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fb fac2 	bl	8002414 <HAL_PCD_EP_SetStall>
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f000 f92c 	bl	80070f4 <USBD_Get_USB_Status>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ec4:	78fa      	ldrb	r2, [r7, #3]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fb fb07 	bl	80024dc <HAL_PCD_EP_ClrStall>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 f90d 	bl	80070f4 <USBD_Get_USB_Status>
 8006eda:	4603      	mov	r3, r0
 8006edc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ede:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006efa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	da0b      	bge.n	8006f1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f04:	78fb      	ldrb	r3, [r7, #3]
 8006f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	00db      	lsls	r3, r3, #3
 8006f10:	1a9b      	subs	r3, r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	440b      	add	r3, r1
 8006f16:	333e      	adds	r3, #62	; 0x3e
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	e00b      	b.n	8006f34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f1c:	78fb      	ldrb	r3, [r7, #3]
 8006f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f22:	68f9      	ldr	r1, [r7, #12]
 8006f24:	4613      	mov	r3, r2
 8006f26:	00db      	lsls	r3, r3, #3
 8006f28:	1a9b      	subs	r3, r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f50:	2300      	movs	r3, #0
 8006f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f5a:	78fa      	ldrb	r2, [r7, #3]
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fb f8d4 	bl	800210c <HAL_PCD_SetAddress>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 f8c2 	bl	80070f4 <USBD_Get_USB_Status>
 8006f70:	4603      	mov	r3, r0
 8006f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b086      	sub	sp, #24
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	603b      	str	r3, [r7, #0]
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006f9c:	7af9      	ldrb	r1, [r7, #11]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	f7fb f9ed 	bl	8002380 <HAL_PCD_EP_Transmit>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f000 f8a1 	bl	80070f4 <USBD_Get_USB_Status>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006fb6:	7dbb      	ldrb	r3, [r7, #22]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3718      	adds	r7, #24
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	607a      	str	r2, [r7, #4]
 8006fca:	603b      	str	r3, [r7, #0]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006fde:	7af9      	ldrb	r1, [r7, #11]
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	f7fb f969 	bl	80022ba <HAL_PCD_EP_Receive>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 f880 	bl	80070f4 <USBD_Get_USB_Status>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006ff8:	7dbb      	ldrb	r3, [r7, #22]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b082      	sub	sp, #8
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007014:	78fa      	ldrb	r2, [r7, #3]
 8007016:	4611      	mov	r1, r2
 8007018:	4618      	mov	r0, r3
 800701a:	f7fb f999 	bl	8002350 <HAL_PCD_EP_GetRxCount>
 800701e:	4603      	mov	r3, r0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3708      	adds	r7, #8
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	460b      	mov	r3, r1
 8007032:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <HAL_PCDEx_LPM_Callback+0x18>
 800703a:	2b01      	cmp	r3, #1
 800703c:	d01f      	beq.n	800707e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800703e:	e03b      	b.n	80070b8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d007      	beq.n	8007058 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8007048:	f7f9 fa68 	bl	800051c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800704c:	4b1c      	ldr	r3, [pc, #112]	; (80070c0 <HAL_PCDEx_LPM_Callback+0x98>)
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	4a1b      	ldr	r2, [pc, #108]	; (80070c0 <HAL_PCDEx_LPM_Callback+0x98>)
 8007052:	f023 0306 	bic.w	r3, r3, #6
 8007056:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	6812      	ldr	r2, [r2, #0]
 8007066:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800706a:	f023 0301 	bic.w	r3, r3, #1
 800706e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe fbd4 	bl	8005824 <USBD_LL_Resume>
    break;
 800707c:	e01c      	b.n	80070b8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	6812      	ldr	r2, [r2, #0]
 800708c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007090:	f043 0301 	orr.w	r3, r3, #1
 8007094:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800709c:	4618      	mov	r0, r3
 800709e:	f7fe fbab 	bl	80057f8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a1b      	ldr	r3, [r3, #32]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d005      	beq.n	80070b6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80070aa:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <HAL_PCDEx_LPM_Callback+0x98>)
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	4a04      	ldr	r2, [pc, #16]	; (80070c0 <HAL_PCDEx_LPM_Callback+0x98>)
 80070b0:	f043 0306 	orr.w	r3, r3, #6
 80070b4:	6113      	str	r3, [r2, #16]
    break;
 80070b6:	bf00      	nop
}
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	e000ed00 	.word	0xe000ed00

080070c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80070cc:	4b03      	ldr	r3, [pc, #12]	; (80070dc <USBD_static_malloc+0x18>)
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	200001b0 	.word	0x200001b0

080070e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]

}
 80070e8:	bf00      	nop
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	4603      	mov	r3, r0
 80070fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070fe:	2300      	movs	r3, #0
 8007100:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007102:	79fb      	ldrb	r3, [r7, #7]
 8007104:	2b03      	cmp	r3, #3
 8007106:	d817      	bhi.n	8007138 <USBD_Get_USB_Status+0x44>
 8007108:	a201      	add	r2, pc, #4	; (adr r2, 8007110 <USBD_Get_USB_Status+0x1c>)
 800710a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710e:	bf00      	nop
 8007110:	08007121 	.word	0x08007121
 8007114:	08007127 	.word	0x08007127
 8007118:	0800712d 	.word	0x0800712d
 800711c:	08007133 	.word	0x08007133
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	73fb      	strb	r3, [r7, #15]
    break;
 8007124:	e00b      	b.n	800713e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007126:	2303      	movs	r3, #3
 8007128:	73fb      	strb	r3, [r7, #15]
    break;
 800712a:	e008      	b.n	800713e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800712c:	2301      	movs	r3, #1
 800712e:	73fb      	strb	r3, [r7, #15]
    break;
 8007130:	e005      	b.n	800713e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007132:	2303      	movs	r3, #3
 8007134:	73fb      	strb	r3, [r7, #15]
    break;
 8007136:	e002      	b.n	800713e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007138:	2303      	movs	r3, #3
 800713a:	73fb      	strb	r3, [r7, #15]
    break;
 800713c:	bf00      	nop
  }
  return usb_status;
 800713e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <__libc_init_array>:
 800714c:	b570      	push	{r4, r5, r6, lr}
 800714e:	4d0d      	ldr	r5, [pc, #52]	; (8007184 <__libc_init_array+0x38>)
 8007150:	4c0d      	ldr	r4, [pc, #52]	; (8007188 <__libc_init_array+0x3c>)
 8007152:	1b64      	subs	r4, r4, r5
 8007154:	10a4      	asrs	r4, r4, #2
 8007156:	2600      	movs	r6, #0
 8007158:	42a6      	cmp	r6, r4
 800715a:	d109      	bne.n	8007170 <__libc_init_array+0x24>
 800715c:	4d0b      	ldr	r5, [pc, #44]	; (800718c <__libc_init_array+0x40>)
 800715e:	4c0c      	ldr	r4, [pc, #48]	; (8007190 <__libc_init_array+0x44>)
 8007160:	f000 f820 	bl	80071a4 <_init>
 8007164:	1b64      	subs	r4, r4, r5
 8007166:	10a4      	asrs	r4, r4, #2
 8007168:	2600      	movs	r6, #0
 800716a:	42a6      	cmp	r6, r4
 800716c:	d105      	bne.n	800717a <__libc_init_array+0x2e>
 800716e:	bd70      	pop	{r4, r5, r6, pc}
 8007170:	f855 3b04 	ldr.w	r3, [r5], #4
 8007174:	4798      	blx	r3
 8007176:	3601      	adds	r6, #1
 8007178:	e7ee      	b.n	8007158 <__libc_init_array+0xc>
 800717a:	f855 3b04 	ldr.w	r3, [r5], #4
 800717e:	4798      	blx	r3
 8007180:	3601      	adds	r6, #1
 8007182:	e7f2      	b.n	800716a <__libc_init_array+0x1e>
 8007184:	0800721c 	.word	0x0800721c
 8007188:	0800721c 	.word	0x0800721c
 800718c:	0800721c 	.word	0x0800721c
 8007190:	08007220 	.word	0x08007220

08007194 <memset>:
 8007194:	4402      	add	r2, r0
 8007196:	4603      	mov	r3, r0
 8007198:	4293      	cmp	r3, r2
 800719a:	d100      	bne.n	800719e <memset+0xa>
 800719c:	4770      	bx	lr
 800719e:	f803 1b01 	strb.w	r1, [r3], #1
 80071a2:	e7f9      	b.n	8007198 <memset+0x4>

080071a4 <_init>:
 80071a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a6:	bf00      	nop
 80071a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071aa:	bc08      	pop	{r3}
 80071ac:	469e      	mov	lr, r3
 80071ae:	4770      	bx	lr

080071b0 <_fini>:
 80071b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b2:	bf00      	nop
 80071b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071b6:	bc08      	pop	{r3}
 80071b8:	469e      	mov	lr, r3
 80071ba:	4770      	bx	lr
